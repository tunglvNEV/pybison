/* ======================================================================== */
/*  コベルコ建機様向け用　稼動機管理システム                                */
/*  ファイル名  ：  merit_command.pc                                        */
/*  説明        ：  メールタイプ別処理を行う                                */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/*          KSC     2011.10.25  ミニ流用：国外／オーブコム２対応            */
/*                                                                          */
/* ======================================================================== */

/* ------------------------------------------------------------------------ */
/*  インクルードヘッダ定義                                                  */
/* ------------------------------------------------------------------------ */
#include    <stdio.h>
#include    <stdlib.h>
#include    <string.h>
#include    <ctype.h>

#include    <sqlca.h>
#include    <stdarg.h>

EXEC SQL BEGIN DECLARE SECTION;
#include    "merit_bat.h"                    /*  共通ヘッダ  */
EXEC SQL END DECLARE SECTION;


/* ------------------------------------------------------------------------ */
/*  関数プロトタイプ宣言                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_pos();
int     cmd_eg();
int     cmd_amof();
int     cmd_amon();
int     cmd_am();
int     cmd_cl();
int     cmd_sc();
int     cmd_cm0();
int     cmd_cm1();
int     cmd_d0();
int     cmd_d1();
int     cmd_d2();
int     cmd_d3();
int     cmd_m0();
int     cmd_m1();
int     cmd_m2();
int     cmd_m3();
int     cmd_m4();
int     cmd_m5();
int     cmd_m6();
int     cmd_m7();
int     cmd_m8();
int     cmd_sa();
int     cmd_bt();
int     cmd_t();
int     cmd_p();
int     cmd_i();
int     cmd_r();
int     cmd_c();
int     cmd_n();
int     cmd_f();
int     cmd_w();
int     cmd_u();
int     cmd_j();
int     cmd_ec();
int     cmd_fc();
int     cmd_hc();
int     cmd_lc();
int     cmd_ov();
int     cmd_ft();
int     cmd_fs();
int     cmd_sd();
int     cmd_hs();
int     cmd_he();
int     cmd_ah();
int     cmd_pn();
int     cmd_vr();
int     cmd_xx();
int     cmd_np();

int     cmd_xx_v7();
int     cmd_xx_v7_eg();
int     cmd_ea();
int     cmd_pa();
int     cmd_pb();
int     cmd_pc();
int     cmd_ua();
int     cmd_ub();
int     cmd_sw();
int     cmd_st();
int     cmd_mc();
int     cmd_mt();
int     cmd_dt();
int     cmd_sl();
int     cmd_td();
int     cmd_ssid();
int     cmd_kl();

/* ------------------------------------------------------------------------ */
/*  外部シンボル参照宣言                                                    */
/* ------------------------------------------------------------------------ */
extern PROC_COM_PARAM   G_PROC_COM_PARAM;
extern CMD_COM_PARAM	G_CMD_COM_PARAM;
extern CMD_POS_PARAM    G_CMD_POS_PARAM;
extern CMD_H_PARAM      G_CMD_H_PARAM;
extern CMD_A_PARAM      G_CMD_A_PARAM;
extern CMD_I_PARAM      G_CMD_I_PARAM;
extern CMD_R_PARAM      G_CMD_R_PARAM;
extern CMD_C_PARAM      G_CMD_C_PARAM;
extern CMD_N_PARAM      G_CMD_N_PARAM;
extern CMD_F_PARAM      G_CMD_F_PARAM;
extern CMD_W_PARAM      G_CMD_W_PARAM;
extern CMD_U_PARAM      G_CMD_U_PARAM;
extern CMD_J_PARAM      G_CMD_J_PARAM;
extern CMD_EC_PARAM     G_CMD_EC_PARAM;
extern CMD_FC_PARAM     G_CMD_FC_PARAM;
extern CMD_HC_PARAM     G_CMD_HC_PARAM;
extern CMD_LC_PARAM     G_CMD_LC_PARAM;
extern CMD_OV_PARAM     G_CMD_OV_PARAM;
extern CMD_FT_PARAM     G_CMD_FT_PARAM;
extern CMD_FS_PARAM     G_CMD_FS_PARAM;
extern CMD_T_PARAM      G_CMD_T_PARAM;
extern CMD_P_PARAM      G_CMD_P_PARAM;
extern CMD_EG_PARAM     G_CMD_EG_PARAM;
extern CMD_HS_PARAM     G_CMD_HS_PARAM;
extern CMD_HE_PARAM     G_CMD_HE_PARAM;
extern CMD_HF_PARAM     G_CMD_HF_PARAM;
extern CMD_HH_PARAM     G_CMD_HH_PARAM;
extern CMD_HL_PARAM     G_CMD_HL_PARAM;
extern CMD_D0_PARAM     G_CMD_D0_PARAM;
extern CMD_D1_PARAM     G_CMD_D1_PARAM;
extern CMD_D2_PARAM     G_CMD_D2_PARAM;
extern CMD_D3_PARAM     G_CMD_D3_PARAM;
extern CMD_CM0_PARAM    G_CMD_CM0_PARAM;
extern CMD_CM1_PARAM    G_CMD_CM1_PARAM;
extern CMD_M0_PARAM     G_CMD_M0_PARAM;
extern CMD_M1_PARAM     G_CMD_M1_PARAM;
extern CMD_M2_PARAM     G_CMD_M2_PARAM;
extern CMD_M3_PARAM     G_CMD_M3_PARAM;
extern CMD_M4_PARAM     G_CMD_M4_PARAM;
extern CMD_M5_PARAM     G_CMD_M5_PARAM;
extern CMD_M6_PARAM     G_CMD_M6_PARAM;
extern CMD_M7_PARAM     G_CMD_M7_PARAM;
extern CMD_M8_PARAM     G_CMD_M8_PARAM;
extern CMD_SC_PARAM     G_CMD_SC_PARAM;
extern CMD_SA_PARAM     G_CMD_SA_PARAM;
extern CMD_BT_PARAM     G_CMD_BT_PARAM;
extern CMD_XX_PARAM     G_CMD_XX_PARAM;
extern CMD_AMON_PARAM   G_CMD_AMON_PARAM;
extern CMD_AMOF_PARAM   G_CMD_AMOF_PARAM;
extern CMD_AM_PARAM     G_CMD_AM_PARAM;
extern CMD_CL_PARAM     G_CMD_CL_PARAM;
extern CMD_SD1_PARAM    G_CMD_SD1_PARAM;
extern CMD_SD2_PARAM    G_CMD_SD2_PARAM;
extern CMD_SD3_PARAM    G_CMD_SD3_PARAM;
extern CMD_AH_PARAM     G_CMD_AH_PARAM;
extern CMD_PN_PARAM     G_CMD_PN_PARAM;
extern CMD_VR_PARAM     G_CMD_VR_PARAM;
extern CMD_NP_PARAM     G_CMD_NP_PARAM;

extern CMD_MC_PARAM     G_CMD_MC_PARAM;
extern CMD_MT_PARAM     G_CMD_MT_PARAM;
extern CMD_SW_PARAM     G_CMD_SW_PARAM;
extern CMD_ADJUST_PARAM G_CMD_EA_PARAM;
extern CMD_ADJUST_PARAM G_CMD_PA_PARAM;
extern CMD_ADJUST_PARAM G_CMD_PB_PARAM;
extern CMD_ADJUST_PARAM G_CMD_PC_PARAM;
extern CMD_ADJUST_PARAM G_CMD_UA_PARAM;
extern CMD_ADJUST_PARAM G_CMD_UB_PARAM;
extern CMD_ST_PARAM     G_CMD_ST_PARAM;
extern CMD_SL_PARAM     G_CMD_SL_PARAM;
extern CMD_TD_PARAM     G_CMD_TD_PARAM;

extern CMD_C20X5_PARAM  G_CMD_HOZEN_PARAM[MAX_HOZEN_PARAM];

extern CMD_C20X5_PARAM  G_CMD_DAILY_EXT_PARAM[MAX_HANYO_PARAM];

extern CMD_C30X1_PARAM  G_CMD_HA_PARAM;
extern CMD_C30X1_PARAM  G_CMD_LK_PARAM;
extern CMD_C30X1_PARAM  G_CMD_YD_PARAM;
extern CMD_C30X1_PARAM  G_CMD_OT_PARAM;
extern CMD_C30X1_PARAM  G_CMD_M_PARAM;
extern CMD_C30X1_PARAM  G_CMD_JH_PARAM;
extern CMD_C30X1_PARAM  G_CMD_JS_PARAM;
extern CMD_C30X1_PARAM  G_CMD_JE_PARAM;
extern CMD_C30X1_PARAM  G_CMD_AB_PARAM;
extern CMD_C30X1_PARAM  G_CMD_SS_PARAM;
extern CMD_C30X1_PARAM  G_CMD_SR_PARAM;
extern CMD_C30X1_PARAM  G_CMD_SG_PARAM;
extern CMD_C30X1_PARAM  G_CMD_SU_PARAM;
extern CMD_C30X1_PARAM  G_CMD_HD_PARAM;
extern CMD_C30X1_PARAM  G_CMD_HQ_PARAM;
extern CMD_C30X10_PARAM G_CMD_HP_PARAM;
extern CMD_C30X1_PARAM  G_CMD_DA_PARAM;
extern CMD_C200X5_PARAM  G_CMD_DG_PARAM;

extern CMD_HANYO_PARAM  G_CMD_HANYO_REC[MAX_HANYO_REC];
extern CMD_HANYO06_PARAM  G_CMD_FDFR_REC[MAX_FDFR_REC];

extern CMD_C30X5_PARAM  G_CMD_LKOK_PARAM;

extern CMD_C30X1_PARAM  G_CMD_AE_REC[MAX_AE_REC];
extern CMD_HANYO06_PARAM G_CMD_AR_REC[MAX_AR_REC];
extern CMD_HANYO06_PARAM G_CMD_RR_REC[MAX_RR_REC];
extern CMD_SSID_PARAM  G_CMD_SSID_PARAM;
extern CMD_C30X10_PARAM  G_CMD_KL_REC[MAX_KL_REC];

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_pos                                                     */
/*  機能    :   コマンド[P]の処理を行う                                     */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_pos(char *p1,char *p2,char *p3,char *p4)                */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_pos(char *p1,char *p2,char *p3,char *p4)
{
	#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [POS] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p4);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_POS_PARAM.cmd_all, p1);       /*  コマンド行全文 */
    strcpy(G_CMD_POS_PARAM.latitude, p2);      /*  緯度           */
    strcpy(G_CMD_POS_PARAM.longitude, p3);     /*  経度           */
    strcpy(G_CMD_POS_PARAM.hh24middmm, p4);    /*  時分日月       */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_POS_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：緯度[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_POS_PARAM.latitude);
printf( "[%s][Line:%04d]Struct：経度[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_POS_PARAM.longitude);
printf( "[%s][Line:%04d]Struct：時分日月[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_POS_PARAM.hh24middmm);
printf( "[%s][Line:%04d]COMMAND[POS]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_h                                                       */
/*  機能    :   コマンド[H]の処理を行う                                     */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_h(char *p1,char *p2)                                    */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_h(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [H] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int power_on_h;
    sscanf(p2, "%d", &power_on_h);
    
    /* 構造体へデータセット */
    strcpy(G_CMD_H_PARAM.cmd_all, p1);          /*  コマンド行全文          */
    G_CMD_H_PARAM.power_on_h = power_on_h ;     /*  稼働時間                */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_H_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：稼働時間[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_H_PARAM.power_on_h);
printf( "[%s][Line:%04d]COMMAND[H]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_a                                                       */
/*  機能    :   コマンド[A]の処理を行う                                     */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_a(char *p1,char *p2)                                    */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_a(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [A] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int area_flg;
    sscanf(p2, "%d", &area_flg);
    
    /* 構造体へデータセット */
    strcpy(G_CMD_A_PARAM.cmd_all, p1);    /*  コマンド行全文          */
    G_CMD_A_PARAM.area_flg = area_flg;    /*  エリア内外フラクﾞ       */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_A_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：エリア内外フラクﾞ[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_A_PARAM.area_flg);
printf( "[%s][Line:%04d]COMMAND[A]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_eg                                                      */
/*  機能    :   コマンド[EG]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_eg(char *p1,char *p2)                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_eg(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [EG] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif
    
    /* 構造体へデータセット */
    strcpy(G_CMD_EG_PARAM.cmd_all, p1);                     /*  コマンド行全文      */
    strcpy(G_CMD_EG_PARAM.engine_state_flg, p2);            /*  エンジン状態        */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_EG_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：エンジン状態[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_EG_PARAM.engine_state_flg);
printf( "[%s][Line:%04d]COMMAND[EG]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_amof                                                    */
/*  機能    :   コマンド[AMOF]の処理を行う                                  */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_amof(char *p1,char *p2,char *p3)                        */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_amof(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [AMOF] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_AMOF_PARAM.cmd_all, p1);        /*  コマンド行全文    */
    strcpy(G_CMD_AMOF_PARAM.hh24mi, p2);         /*  時分    */
    strcpy(G_CMD_AMOF_PARAM.am_r_status, p3);    /*  応答    */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AMOF_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：時分[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AMOF_PARAM.hh24mi);
printf( "[%s][Line:%04d]Struct：応答ﾌﾗｸﾞ[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_AMOF_PARAM.am_r_status);
printf( "[%s][Line:%04d]COMMAND[AMOF]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_amon                                                    */
/*  機能    :   コマンド[AMON]の処理を行う                                  */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_amon(char *p1,char *p2,char *p3)                        */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_amon(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [AMON] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_AMON_PARAM.cmd_all, p1);        /*  コマンド行全文    */
    strcpy(G_CMD_AMON_PARAM.hh24mi, p2);         /*  時分    */
    strcpy(G_CMD_AMON_PARAM.am_r_status, p3);    /*  応答    */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AMON_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：時分[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AMON_PARAM.hh24mi);
printf( "[%s][Line:%04d]Struct：応答ﾌﾗｸﾞ[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_AMON_PARAM.am_r_status);
printf( "[%s][Line:%04d]COMMAND[AMON]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_am                                                      */
/*  機能    :   コマンド[AM]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_am(char *p1,char *p2,char *p3)                          */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_am(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [AM] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_AM_PARAM.cmd_all, p1);        /*  コマンド行全文    */
    strcpy(G_CMD_AM_PARAM.hold_al, p2);        /*  曜日毎有効指定    */
    strcpy(G_CMD_AM_PARAM.am_r_status, p3);    /*  応答    */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AM_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：曜日毎有効指定[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AM_PARAM.hold_al);
printf( "[%s][Line:%04d]Struct：応答ﾌﾗｸﾞ[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_AM_PARAM.am_r_status);
printf( "[%s][Line:%04d]COMMAND[AM]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_cl                                                      */
/*  機能    :   コマンド[CL]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_cl(char *p1,char *p2,char *p3,char *p4,char *p5,char *p6) */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_cl(char *p1,char *p2,char *p3,char *p4,char *p5,char *p6)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [CL] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p4);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p5);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p6);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_CL_PARAM.cmd_all, p1);         /*  コマンド行全文    */
    strcpy(G_CMD_CL_PARAM.latitude1, p2);       /*  緯度1             */
    strcpy(G_CMD_CL_PARAM.longitude1, p3);      /*  経度1             */
    strcpy(G_CMD_CL_PARAM.latitude2, p4);       /*  緯度2             */
    strcpy(G_CMD_CL_PARAM.longitude2, p5);      /*  経度2             */
    strcpy(G_CMD_CL_PARAM.cl_r_status, p6);     /*  応答     */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_CL_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：緯度1[%f]\n", __FUNCTION__,__LINE__ ,G_CMD_CL_PARAM.latitude1);
printf( "[%s][Line:%04d]Struct：経度1[%f]\n", __FUNCTION__,__LINE__ ,G_CMD_CL_PARAM.longitude1);
printf( "[%s][Line:%04d]Struct：緯度2[%f]\n", __FUNCTION__,__LINE__ ,G_CMD_CL_PARAM.latitude2);
printf( "[%s][Line:%04d]Struct：経度2[%f]\n", __FUNCTION__,__LINE__ ,G_CMD_CL_PARAM.longitude2);
printf( "[%s][Line:%04d]Struct：応答[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_CL_PARAM.cl_r_status);
printf( "[%s][Line:%04d]COMMAND[CL]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_sc                                                      */
/*  機能    :   コマンド[SC]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_sc(char *p1,char *p2)                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_sc(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [SC] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif
    
    /* 構造体へデータセット */
    strcpy(G_CMD_SC_PARAM.cmd_all, p1);               /*  コマンド行全文  */
    strcpy(G_CMD_SC_PARAM.yymmddhh24mi, p2);          /*  年月日時分    */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SC_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：年月日時分[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SC_PARAM.yymmddhh24mi);
printf( "[%s][Line:%04d]COMMAND[SC]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_cm0                                                     */
/*  機能    :   コマンド[CM0]の処理を行う                                   */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_cm0(char *p1,char *p2)                                  */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_cm0(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [CM0] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif
    
    /* 構造体へデータセット */
    strcpy(G_CMD_CM0_PARAM.cmd_all, p1);               /*  コマンド行全文  */
    strcpy(G_CMD_CM0_PARAM.cm0_r_status, p2);          /*  通信停止応答    */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_CM0_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：通信停止応答[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_CM0_PARAM.cm0_r_status);
printf( "[%s][Line:%04d]COMMAND[CM0]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_cm1                                                     */
/*  機能    :   コマンド[CM1]の処理を行う                                   */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_cm1(char *p1,char *p2)                                  */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_cm1(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [CM1] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif
    
    /* 構造体へデータセット */
    strcpy(G_CMD_CM1_PARAM.cmd_all, p1);               /*  コマンド行全文  */
    strcpy(G_CMD_CM1_PARAM.cm1_r_status, p2);          /*  通信再開応答    */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_CM1_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：通信再開応答[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_CM1_PARAM.cm1_r_status);
printf( "[%s][Line:%04d]COMMAND[CM1]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_d0                                                      */
/*  機能    :   コマンド[D0]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_d0(char *p1,char *p2)                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_d0(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [D0] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif
    
    /* 構造体へデータセット */
    strcpy(G_CMD_D0_PARAM.cmd_all, p1);               /*  コマンド行全文  */
    strcpy(G_CMD_D0_PARAM.ct0_tel_no, p2);            /*  電話番号        */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_D0_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：電話番号[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_D0_PARAM.ct0_tel_no);
printf( "[%s][Line:%04d]COMMAND[D0]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_d1                                                      */
/*  機能    :   コマンド[D1]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_d1(char *p1,char *p2)                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_d1(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [D1] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif
    
    /* 構造体へデータセット */
    strcpy(G_CMD_D1_PARAM.cmd_all, p1);               /*  コマンド行全文  */
    strcpy(G_CMD_D1_PARAM.ct0_ip_address, p2);        /*  IPアドレス      */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_D1_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：IPアドレス[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_D1_PARAM.ct0_ip_address);
printf( "[%s][Line:%04d]COMMAND[D1]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_d2                                                      */
/*  機能    :   コマンド[D2]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_d2(char *p1,char *p2)                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_d2(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [D2] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif
    
    /* 構造体へデータセット */
    strcpy(G_CMD_D2_PARAM.cmd_all, p1);              /*  コマンド行全文  */
    strcpy(G_CMD_D2_PARAM.ct0_sei_y, p2);            /*  西暦日付        */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_D2_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：西暦日付[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_D2_PARAM.ct0_sei_y);
printf( "[%s][Line:%04d]COMMAND[D2]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_d3                                                      */
/*  機能    :   コマンド[D3]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_d3(char *p1,char *p2)                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_d3(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [D3] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int ct0_mechatro;
    sscanf(p2, "%d", &ct0_mechatro);
    
    /* 構造体へデータセット */
    strcpy(G_CMD_D3_PARAM.cmd_all, p1);              /*  コマンド行全文    */
    G_CMD_D3_PARAM.ct0_mechatro = ct0_mechatro;      /*  メカトロ有無ﾌﾗｸﾞ  */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_D3_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：メカトロ有無ﾌﾗｸﾞ[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_D3_PARAM.ct0_mechatro);
printf( "[%s][Line:%04d]COMMAND[D3]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_m0                                                      */
/*  機能    :   コマンド[M0]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_m0(char *p1,char *p2)                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_m0(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [M0] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int ct1_receive_byte;
    sscanf(p2, "%d", &ct1_receive_byte);
    
    /* 構造体へデータセット */
    strcpy(G_CMD_M0_PARAM.cmd_all, p1);                    /*  コマンド行全文  */
    G_CMD_M0_PARAM.ct1_receive_byte = ct1_receive_byte;    /*  受信メール容量  */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_M0_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：受信メール容量[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_M0_PARAM.ct1_receive_byte);
printf( "[%s][Line:%04d]COMMAND[M0]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_m1                                                      */
/*  機能    :   コマンド[M1]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_m1(char *p1,char *p2)                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_m1(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [M1] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int ct1_send_byte;
    sscanf(p2, "%d", &ct1_send_byte);
    
    /* 構造体へデータセット */
    strcpy(G_CMD_M1_PARAM.cmd_all, p1);              /*  コマンド行全文  */
    G_CMD_M1_PARAM.ct1_send_byte = ct1_send_byte;    /*  送信メール容量  */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_M1_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：送信メール容量[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_M1_PARAM.ct1_send_byte);
printf( "[%s][Line:%04d]COMMAND[M1]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_m2                                                      */
/*  機能    :   コマンド[M2]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_m2(char *p1,char *p2)                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_m2(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [M2] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int ct1_receive_mail;
    sscanf(p2, "%d", &ct1_receive_mail);
    
    /* 構造体へデータセット */
    strcpy(G_CMD_M2_PARAM.cmd_all, p1);                    /*  コマンド行全文  */
    G_CMD_M2_PARAM.ct1_receive_mail = ct1_receive_mail;    /*  受信メール数  */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_M2_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：受信メール数[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_M2_PARAM.ct1_receive_mail);
printf( "[%s][Line:%04d]COMMAND[M2]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_m3                                                      */
/*  機能    :   コマンド[M3]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_m3(char *p1,char *p2)                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_m3(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [M3] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int ct1_send_mail;
    sscanf(p2, "%d", &ct1_send_mail);
    
    /* 構造体へデータセット */
    strcpy(G_CMD_M3_PARAM.cmd_all, p1);              /*  コマンド行全文  */
    G_CMD_M3_PARAM.ct1_send_mail = ct1_send_mail;    /*  送信メール数  */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_M3_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：送信メール数[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_M3_PARAM.ct1_send_mail);
printf( "[%s][Line:%04d]COMMAND[M3]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_m4                                                      */
/*  機能    :   コマンド[M4]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_m4(char *p1,char *p2)                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_m4(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [M4] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int ct1_retry;
    sscanf(p2, "%d", &ct1_retry);
    
    /* 構造体へデータセット */
    strcpy(G_CMD_M4_PARAM.cmd_all, p1);      /*  コマンド行全文  */
    G_CMD_M4_PARAM.ct1_retry = ct1_retry;    /*  リトライ回数  */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_M4_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：リトライ回数[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_M4_PARAM.ct1_retry);
printf( "[%s][Line:%04d]COMMAND[M4]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_m5                                                      */
/*  機能    :   コマンド[M5]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_m5(char *p1,char *p2)                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_m5(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [M5] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int ct1_reserve1;
    sscanf(p2, "%d", &ct1_reserve1);
    
    /* 構造体へデータセット */
    strcpy(G_CMD_M5_PARAM.cmd_all, p1);            /*  コマンド行全文  */
    G_CMD_M5_PARAM.ct1_reserve1 = ct1_reserve1;    /*  予備１  */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_M5_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：reserve1[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_M5_PARAM.ct1_reserve1);
printf( "[%s][Line:%04d]COMMAND[M5]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_m6                                                      */
/*  機能    :   コマンド[M6]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_m6(char *p1,char *p2)                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_m6(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [M6] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int ct1_reserve2;
    sscanf(p2, "%d", &ct1_reserve2);
    
    /* 構造体へデータセット */
    strcpy(G_CMD_M6_PARAM.cmd_all, p1);            /*  コマンド行全文  */
    G_CMD_M6_PARAM.ct1_reserve2 = ct1_reserve2;    /*  予備２  */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_M6_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：reserve2[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_M6_PARAM.ct1_reserve2);
printf( "[%s][Line:%04d]COMMAND[M6]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_m7                                                      */
/*  機能    :   コマンド[M7]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_m7(char *p1,char *p2)                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_m7(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [M7] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int ct1_reserve3;
    sscanf(p2, "%d", &ct1_reserve3);
    
    /* 構造体へデータセット */
    strcpy(G_CMD_M7_PARAM.cmd_all, p1);            /*  コマンド行全文  */
    G_CMD_M7_PARAM.ct1_reserve3 = ct1_reserve3;    /*  予備３  */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_M7_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：reserve3[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_M7_PARAM.ct1_reserve3);
printf( "[%s][Line:%04d]COMMAND[M7]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_m8                                                      */
/*  機能    :   コマンド[M8]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_m8(char *p1,char *p2)                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_m8(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [M8] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int ct1_reserve4;
    sscanf(p2, "%d", &ct1_reserve4);
    
    /* 構造体へデータセット */
    strcpy(G_CMD_M8_PARAM.cmd_all, p1);            /*  コマンド行全文  */
    G_CMD_M8_PARAM.ct1_reserve4 = ct1_reserve4;    /*  予備４  */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_M8_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：reserve4[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_M8_PARAM.ct1_reserve4);
printf( "[%s][Line:%04d]COMMAND[M8]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_sa                                                      */
/*  機能    :   コマンド[SA]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_sa(char *p1,char *p2)                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_sa(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [SA] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int abnormal_flg;
    sscanf(p2, "%d", &abnormal_flg);
    
    /* 構造体へデータセット */
    strcpy(G_CMD_SA_PARAM.cmd_all, p1);            /*  コマンド行全文  */
    G_CMD_SA_PARAM.abnormal_flg = abnormal_flg;    /*  異常フラグ(発生/解除)  */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SA_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：異常フラグ(発生/解除)[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_SA_PARAM.abnormal_flg);
printf( "[%s][Line:%04d]COMMAND[SA]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_bt                                                      */
/*  機能    :   コマンド[BT]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_bt(char *p1,char *p2)                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_bt(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [BT] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int abnormal_flg;
    sscanf(p2, "%d", &abnormal_flg);
    
    /* 構造体へデータセット */
    strcpy(G_CMD_BT_PARAM.cmd_all, p1);            /*  コマンド行全文  */
    G_CMD_BT_PARAM.abnormal_flg = abnormal_flg;    /*  異常フラグ(発生/解除)  */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_BT_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：異常フラグ(発生/解除)[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_BT_PARAM.abnormal_flg);
printf( "[%s][Line:%04d]COMMAND[BT]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_t                                                       */
/*  機能    :   コマンド[T]の処理を行う                                     */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_t(char *p1,char *p2,char *p3,char *p4)                  */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_t(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [T] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

	CMD_T_PARAM *pCMD_T_PARAM = (CMD_T_PARAM*)getParamArea_CMD_T_PARAM();
	strcpy(pCMD_T_PARAM->cmd_all, p1);          /*  コマンド行全文          */
	strcpy(pCMD_T_PARAM->yymmddhh24mi, p2);     /*  月日時分                */

    /* 構造体へデータセット */
    strcpy(G_CMD_T_PARAM.cmd_all, p1);          /*  コマンド行全文          */
    strcpy(G_CMD_T_PARAM.yymmddhh24mi, p2);     /*  時分日月                */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_T_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：時分日月[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_T_PARAM.yymmddhh24mi);
printf( "[%s][Line:%04d]COMMAND[T]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_p                                                       */
/*  機能    :   コマンド[P]の処理を行う                                     */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_p(char *p1,char *p2)                                    */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_p(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [P] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

	CMD_P_PARAM *pCMD_P_PARAM = (CMD_P_PARAM*)getParamArea_CMD_P_PARAM();
	strcpy(pCMD_P_PARAM->cmd_all, p1);          /*  コマンド行全文          */
	strcpy(pCMD_P_PARAM->yymmddhh24mi, p2);     /*  月日時分                */

    /* 構造体へデータセット */
    strcpy(G_CMD_P_PARAM.cmd_all, p1);          /*  コマンド行全文          */
    strcpy(G_CMD_P_PARAM.yymmddhh24mi, p2);     /*  時分日月                */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_P_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：時分日月[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_P_PARAM.yymmddhh24mi);
printf( "[%s][Line:%04d]COMMAND[P]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_i                                                       */
/*  機能    :   コマンド[I]の処理を行う                                     */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_i(char *p1,char *p2)                                     */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_i(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [I] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int idle_h;
    sscanf(p2, "%d", &idle_h);

    /* 構造体へデータセット */
    strcpy(G_CMD_I_PARAM.cmd_all, p1);      /*  コマンド行全文   */
    G_CMD_I_PARAM.idle_h = idle_h;          /*  無操作時間       */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_I_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：無操作時間[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_I_PARAM.idle_h);
printf( "[%s][Line:%04d]COMMAND[I]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_r                                                       */
/*  機能    :   コマンド[R]の処理を行う                                     */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_r(char *p1,char *p2)                                     */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_r(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [R] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int running_h;
    sscanf(p2, "%d", &running_h);

    /* 構造体へデータセット */
    strcpy(G_CMD_R_PARAM.cmd_all, p1);      /*  コマンド行全文 */
    G_CMD_R_PARAM.running_h = running_h;    /*  走行時間       */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_R_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：走行時間[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_R_PARAM.running_h);
printf( "[%s][Line:%04d]COMMAND[R]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_c                                                       */
/*  機能    :   コマンド[C]の処理を行う                                     */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_c(char *p1,char *p2)                                     */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_c(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [C] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int high_r_h;
    sscanf(p2, "%d", &high_r_h);

    /* 構造体へデータセット */
    strcpy(G_CMD_C_PARAM.cmd_all, p1);             /*  コマンド行全文 */
    G_CMD_C_PARAM.high_r_h = high_r_h;     /*  ハイリーチ使用時間  */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_C_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：ハイリーチ使用時間[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_C_PARAM.high_r_h);
printf( "[%s][Line:%04d]COMMAND[C]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_n                                                      */
/*  機能    :   コマンド[N]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_n(char *p1,char *p2,char *p3,char *p4)                 */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_n(char *p1,char *p2,char *p3,char *p4)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [N] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int nb_h;
    sscanf(p2, "%d", &nb_h);

    /* 構造体へデータセット */
    strcpy(G_CMD_N_PARAM.cmd_all, p1);  /*  コマンド行全文 */
    G_CMD_N_PARAM.nb_h = nb_h;          /*  N&B使用時間    */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_N_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：N&B使用時間[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_N_PARAM.nb_h);
printf( "[%s][Line:%04d]COMMAND[N]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_f                                                       */
/*  機能    :   コマンド[F]の処理を行う                                     */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_f(char *p1,char *p2)                                    */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_f(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [F] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int fuel_per;
    sscanf(p2, "%d", &fuel_per);

    /* 構造体へデータセット */
    strcpy(G_CMD_F_PARAM.cmd_all, p1);    /*  コマンド行全文 */
    G_CMD_F_PARAM.fuel_per = fuel_per;    /*  燃料残量    */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_F_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：燃料残量[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_F_PARAM.fuel_per);
printf( "[%s][Line:%04d]COMMAND[F]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_w                                                       */
/*  機能    :   コマンド[W]の処理を行う                                     */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_w(char *p1,char *p2,char *p3,char *p4,char *p5)         */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_w(char *p1,char *p2,char *p3,char *p4,char *p5)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [W] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p4);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p5);
#endif

    int e_temp_1;
    int e_temp_2;
    int e_temp_3;
    int e_temp_4;
    sscanf(p2, "%d", &e_temp_1);
    sscanf(p3, "%d", &e_temp_2);
    sscanf(p4, "%d", &e_temp_3);
    sscanf(p5, "%d", &e_temp_4);

    /* 構造体へデータセット */
    strcpy(G_CMD_W_PARAM.cmd_all, p1);    /*  コマンド行全文 */
    G_CMD_W_PARAM.e_temp_1 = e_temp_1;    /*  水温1    */
    G_CMD_W_PARAM.e_temp_2 = e_temp_2;    /*  水温2    */
    G_CMD_W_PARAM.e_temp_3 = e_temp_3;    /*  水温3    */
    G_CMD_W_PARAM.e_temp_4 = e_temp_4;    /*  水温4    */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_W_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：水温1[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_W_PARAM.e_temp_1);
printf( "[%s][Line:%04d]Struct：水温2[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_W_PARAM.e_temp_2);
printf( "[%s][Line:%04d]Struct：水温3[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_W_PARAM.e_temp_3);
printf( "[%s][Line:%04d]Struct：水温4[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_W_PARAM.e_temp_4);
printf( "[%s][Line:%04d]COMMAND[W]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_u                                                       */
/*  機能    :   コマンド[U]の処理を行う                                     */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_u(char *p1,char *p2,char *p3,char *p4,char *p5)         */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_u(char *p1,char *p2,char *p3,char *p4,char *p5)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [U] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p4);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p5);
#endif

    int pump_p1;
    int pump_p2;
    int pump_p3;
    int pump_p4;
    sscanf(p2, "%d", &pump_p1);
    sscanf(p3, "%d", &pump_p2);
    sscanf(p4, "%d", &pump_p3);
    sscanf(p5, "%d", &pump_p4);

    /* 構造体へデータセット */
    strcpy(G_CMD_W_PARAM.cmd_all, p1);            /*  コマンド行全文 */
    G_CMD_U_PARAM.pump_p1 = pump_p1;    /*  圧力1    */
    G_CMD_U_PARAM.pump_p2 = pump_p2;    /*  圧力2    */
    G_CMD_U_PARAM.pump_p3 = pump_p3;    /*  圧力3    */
    G_CMD_U_PARAM.pump_p4 = pump_p4;    /*  圧力4    */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_U_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：圧力1[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_U_PARAM.pump_p1);
printf( "[%s][Line:%04d]Struct：圧力2[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_U_PARAM.pump_p2);
printf( "[%s][Line:%04d]Struct：圧力3[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_U_PARAM.pump_p3);
printf( "[%s][Line:%04d]Struct：圧力4[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_U_PARAM.pump_p4);
printf( "[%s][Line:%04d]COMMAND[U]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_j                                                       */
/*  機能    :   コマンド[J]の処理を行う                                     */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_j(char *p1,char *p2)                                    */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_j(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [J] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int ope_amount;
    sscanf(p2, "%d", &ope_amount);

    /* 構造体へデータセット */
    strcpy(G_CMD_J_PARAM.cmd_all, p1);        /*  コマンド行全文 */
    G_CMD_J_PARAM.ope_amount = ope_amount;    /*  稼動量    */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_J_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：稼動量[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_J_PARAM.ope_amount);
printf( "[%s][Line:%04d]COMMAND[J]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_ec                                                      */
/*  機能    :   コマンド[EC]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_ec(char *p1,char *p2)                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_ec(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [EC] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int change_h;
    sscanf(p2, "%d", &change_h);

    /* 構造体へデータセット */
    strcpy(G_CMD_EC_PARAM.cmd_all, p1);      /*  コマンド行全文 */
    G_CMD_EC_PARAM.change_h = change_h;      /*  交換残時間    */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_EC_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：交換残時間[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_EC_PARAM.change_h);
printf( "[%s][Line:%04d]COMMAND[EC]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_fc                                                      */
/*  機能    :   コマンド[FC]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_fc(char *p1,char *p2)                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_fc(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [FC] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int change_h;
    sscanf(p2, "%d", &change_h);

    /* 構造体へデータセット */
    strcpy(G_CMD_FC_PARAM.cmd_all, p1);      /*  コマンド行全文 */
    G_CMD_FC_PARAM.change_h = change_h;      /*  交換残時間    */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FC_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：交換残時間[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_FC_PARAM.change_h);
printf( "[%s][Line:%04d]COMMAND[FC]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_hc                                                      */
/*  機能    :   コマンド[HC]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_hc(char *p1,char *p2)                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_hc(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [HC] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int change_h;
    sscanf(p2, "%d", &change_h);

    /* 構造体へデータセット */
    strcpy(G_CMD_HC_PARAM.cmd_all, p1);      /*  コマンド行全文 */
    G_CMD_HC_PARAM.change_h = change_h;      /*  交換残時間    */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HC_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：交換残時間[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_HC_PARAM.change_h);
printf( "[%s][Line:%04d]COMMAND[HC]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_lc                                                      */
/*  機能    :   コマンド[LC]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_lc(char *p1,char *p2)                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_lc(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [LC] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int change_h;
    sscanf(p2, "%d", &change_h);

    /* 構造体へデータセット */
    strcpy(G_CMD_LC_PARAM.cmd_all, p1);      /*  コマンド行全文 */
    G_CMD_LC_PARAM.change_h = change_h;      /*  交換残時間    */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_LC_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：交換残時間[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_LC_PARAM.change_h);
printf( "[%s][Line:%04d]COMMAND[LC]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_ov                                                      */
/*  機能    :   コマンド[OV]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_ov(char *p1,char *p2)                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_ov(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [OV] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int state_h;
    sscanf(p2, "%d", &state_h);

    /* 構造体へデータセット */
    strcpy(G_CMD_OV_PARAM.cmd_all, p1);     /*  コマンド行全文 */
    G_CMD_OV_PARAM.state_h = state_h;       /*  状態時間    */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_OV_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：状態時間[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_OV_PARAM.state_h);
printf( "[%s][Line:%04d]COMMAND[OV]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_ft                                                      */
/*  機能    :   コマンド[FT]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_ft(char *p1,char *p2)                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_ft(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [FT] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int fuel_tmp;
    sscanf(p2, "%d", &fuel_tmp);

    /* 構造体へデータセット */
    strcpy(G_CMD_FT_PARAM.cmd_all, p1);      /*  コマンド行全文 */
    G_CMD_FT_PARAM.fuel_tmp = fuel_tmp;      /*  燃料温度    */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FT_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：燃料温度[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_FT_PARAM.fuel_tmp);
printf( "[%s][Line:%04d]COMMAND[FT]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_fs                                                      */
/*  機能    :   コマンド[FS]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_fs(char *p1,char *p2)                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_fs(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [FS] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int fuel_dt;
    sscanf(p2, "%d", &fuel_dt);

    /* 構造体へデータセット */
    strcpy(G_CMD_FS_PARAM.cmd_all, p1);    /*  コマンド行全文 */
    G_CMD_FS_PARAM.fuel_dt = fuel_dt;      /*  燃料識別値    */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FS_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：燃料識別値[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_FS_PARAM.fuel_dt);
printf( "[%s][Line:%04d]COMMAND[FS]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_sd1                                                     */
/*  機能    :   コマンド[SD1]の処理を行う                                   */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_sd1(char *p1,char *p2,char *p3)                         */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_sd1(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [SD1] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_SD1_PARAM.cmd_all, p1);          /*  コマンド行全文        */
    strcpy(G_CMD_SD1_PARAM.group_cd, p2);         /*  グループコード        */
    strcpy(G_CMD_SD1_PARAM.sindan_no, p3);        /*  診断管理No            */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SD1_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：グループコード[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SD1_PARAM.group_cd);
printf( "[%s][Line:%04d]Struct：診断管理No[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SD1_PARAM.sindan_no);
printf( "[%s][Line:%04d]COMMAND[SD1]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_sd2                                                     */
/*  機能    :   コマンド[SD2]の処理を行う                                   */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_sd2(char *p1,char *p2)                                  */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_sd2(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [SD2] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    CMD_SD2_PARAM *pCMD_SD2_PARAM = (CMD_SD2_PARAM*)getParamArea_CMD_SD2_PARAM();
    strcpy(pCMD_SD2_PARAM->cmd_all, p1);          /*  コマンド行全文          */
    strcpy(pCMD_SD2_PARAM->diagnoisi_data, p2);   /*  グループコード + データコード + データ */

    /* 構造体へデータセット */
    strcpy(G_CMD_SD2_PARAM.cmd_all, p1);          /*  コマンド行全文          */
    strcpy(G_CMD_SD2_PARAM.diagnoisi_data, p2);   /*  グループコード + データコード + データ */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SD2_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：グループコード + データコード + データ[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SD2_PARAM.diagnoisi_data);
printf( "[%s][Line:%04d]COMMAND[SD2]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_sd3                                                     */
/*  機能    :   コマンド[SD3]の処理を行う                                   */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_sd3(char *p1,char *p2,char *p3)                         */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_sd3(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [SD3] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_SD3_PARAM.cmd_all, p1);          /*  コマンド行全文        */
    strcpy(G_CMD_SD3_PARAM.group_cd, p2);         /*  グループコード        */
    strcpy(G_CMD_SD3_PARAM.sd_status, p3);        /*  応答                  */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SD3_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：グループコード[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SD3_PARAM.group_cd);
printf( "[%s][Line:%04d]Struct：応答[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SD3_PARAM.sd_status);
printf( "[%s][Line:%04d]COMMAND[SD3]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_hs                                                      */
/*  機能    :   コマンド[HS]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_hs(char *p1,char *p2,char *p3)                          */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_hs(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [HS] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
#endif
    
    /* 構造体へデータセット */
    strcpy(G_CMD_HS_PARAM.cmd_all, p1);         /*  コマンド行全文      */
    strcpy(G_CMD_HS_PARAM.hs_r_cont, p2);       /*  アワメータ変更要求値 */
    strcpy(G_CMD_HS_PARAM.reply, p3);           /*  応答 */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HS_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：アワメータ変更要求値[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HS_PARAM.hs_r_cont);
printf( "[%s][Line:%04d]Struct：応答[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HS_PARAM.reply);
printf( "[%s][Line:%04d]COMMAND[HS]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_he                                                      */
/*  機能    :   コマンド[HE]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_he(char *p1,char *p2,char *p3)                          */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_he(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [HE] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
#endif
    
    /* 構造体へデータセット */
    strcpy(G_CMD_HE_PARAM.cmd_all, p1);         /*  コマンド行全文      */
    strcpy(G_CMD_HE_PARAM.he_r_cont, p2);       /*  交換時間 */
    strcpy(G_CMD_HE_PARAM.reply, p3);           /*  応答 */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HE_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：交換時間[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HE_PARAM.he_r_cont);
printf( "[%s][Line:%04d]Struct：応答[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HE_PARAM.reply);
printf( "[%s][Line:%04d]COMMAND[HE]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_hf                                                      */
/*  機能    :   コマンド[HF]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_hf(char *p1,char *p2,char *p3)                          */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_hf(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [HF] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
#endif
    
    /* 構造体へデータセット */
    strcpy(G_CMD_HF_PARAM.cmd_all, p1);         /*  コマンド行全文      */
    strcpy(G_CMD_HF_PARAM.hf_r_cont, p2);       /*  交換時間 */
    strcpy(G_CMD_HF_PARAM.reply, p3);           /*  応答 */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HF_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：交換時間[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HF_PARAM.hf_r_cont);
printf( "[%s][Line:%04d]Struct：応答[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HF_PARAM.reply);
printf( "[%s][Line:%04d]COMMAND[HF]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_hh                                                      */
/*  機能    :   コマンド[HH]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_hh(char *p1,char *p2,char *p3)                          */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_hh(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [HH] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
#endif
    
    /* 構造体へデータセット */
    strcpy(G_CMD_HH_PARAM.cmd_all, p1);         /*  コマンド行全文      */
    strcpy(G_CMD_HH_PARAM.hh_r_cont, p2);       /*  交換時間 */
    strcpy(G_CMD_HH_PARAM.reply, p3);           /*  応答 */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HH_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：交換時間[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HH_PARAM.hh_r_cont);
printf( "[%s][Line:%04d]Struct：応答[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HH_PARAM.reply);
printf( "[%s][Line:%04d]COMMAND[HH]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_hl                                                      */
/*  機能    :   コマンド[HL]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_hl(char *p1,char *p2,char *p3)                          */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_hl(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [HL] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
#endif
    
    /* 構造体へデータセット */
    strcpy(G_CMD_HL_PARAM.cmd_all, p1);         /*  コマンド行全文      */
    strcpy(G_CMD_HL_PARAM.hl_r_cont, p2);       /*  交換時間 */
    strcpy(G_CMD_HL_PARAM.reply, p3);           /*  応答 */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HL_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：交換時間[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HL_PARAM.hl_r_cont);
printf( "[%s][Line:%04d]Struct：応答[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HL_PARAM.reply);
printf( "[%s][Line:%04d]COMMAND[HL]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_ah                                                      */
/*  機能    :   コマンド[AH]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_ah(char *p1,char *p2,char *p3,char *p4,char *p5         */
/*                     char *p6,char *p7,char *p8,char *p9,char *p10        */
/*                     char *p11,char *p12,char *p13,char *p14,char *p15    */
/*                     char *p16,char *p17)                                 */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_ah(char *p1,char *p2,char *p3,char *p4,char *p5,char *p6,char *p7,char *p8,char *p9,char *p10,char *p11,char *p12,char *p13,char *p14,char *p15,char *p16,char *p17)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [AH] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p4);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p5);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p6);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p7);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p8);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p9);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p10);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p11);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p12);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p13);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p14);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p15);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p16);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p17);
#endif

    int tousi_no;
    int hour_meter;
    sscanf(p2, "%d", &tousi_no);
    sscanf(p17, "%d", &hour_meter);

    CMD_AH_PARAM *pCMD_AH_PARAM = (CMD_AH_PARAM*)getParamArea_CMD_AH_PARAM();
    strcpy(pCMD_AH_PARAM->cmd_all, p1);      /*  コマンド行全文 */
    pCMD_AH_PARAM->tousi_no = tousi_no;      /*  通し番号     */
    strcpy(pCMD_AH_PARAM->raireki1, p3);     /*  故障来歴０１ */
    strcpy(pCMD_AH_PARAM->raireki2, p4);     /*  故障来歴０２ */
    strcpy(pCMD_AH_PARAM->raireki3, p5);     /*  故障来歴０３ */
    strcpy(pCMD_AH_PARAM->raireki4, p6);     /*  故障来歴０４ */
    strcpy(pCMD_AH_PARAM->raireki5, p7);     /*  故障来歴０５ */
    strcpy(pCMD_AH_PARAM->raireki6, p8);     /*  故障来歴０６ */
    strcpy(pCMD_AH_PARAM->raireki7, p9);     /*  故障来歴０７ */
    strcpy(pCMD_AH_PARAM->raireki8, p10);    /*  故障来歴０８ */
    strcpy(pCMD_AH_PARAM->raireki9, p11);    /*  故障来歴０９ */
    strcpy(pCMD_AH_PARAM->raireki10, p12);   /*  故障来歴１０ */
    strcpy(pCMD_AH_PARAM->raireki11, p13);   /*  故障来歴１１ */
    strcpy(pCMD_AH_PARAM->raireki12, p14);   /*  故障来歴１２ */
    strcpy(pCMD_AH_PARAM->raireki13, p15);   /*  故障来歴１３ */
    strcpy(pCMD_AH_PARAM->raireki14, p16);   /*  故障来歴１４ */
    pCMD_AH_PARAM->hour_meter = hour_meter;  /*  アワメータ   */

    /* 構造体へデータセット */
    strcpy(G_CMD_AH_PARAM.cmd_all, p1);      /*  コマンド行全文 */
    G_CMD_AH_PARAM.tousi_no = tousi_no;      /*  通し番号     */
    strcpy(G_CMD_AH_PARAM.raireki1, p3);     /*  故障来歴０１ */
    strcpy(G_CMD_AH_PARAM.raireki2, p4);     /*  故障来歴０２ */
    strcpy(G_CMD_AH_PARAM.raireki3, p5);     /*  故障来歴０３ */
    strcpy(G_CMD_AH_PARAM.raireki4, p6);     /*  故障来歴０４ */
    strcpy(G_CMD_AH_PARAM.raireki5, p7);     /*  故障来歴０５ */
    strcpy(G_CMD_AH_PARAM.raireki6, p8);     /*  故障来歴０６ */
    strcpy(G_CMD_AH_PARAM.raireki7, p9);     /*  故障来歴０７ */
    strcpy(G_CMD_AH_PARAM.raireki8, p10);    /*  故障来歴０８ */
    strcpy(G_CMD_AH_PARAM.raireki9, p11);    /*  故障来歴０９ */
    strcpy(G_CMD_AH_PARAM.raireki10, p12);   /*  故障来歴１０ */
    strcpy(G_CMD_AH_PARAM.raireki11, p13);   /*  故障来歴１１ */
    strcpy(G_CMD_AH_PARAM.raireki12, p14);   /*  故障来歴１２ */
    strcpy(G_CMD_AH_PARAM.raireki13, p15);   /*  故障来歴１３ */
    strcpy(G_CMD_AH_PARAM.raireki14, p16);   /*  故障来歴１４ */
    G_CMD_AH_PARAM.hour_meter = hour_meter;  /*  アワメータ   */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AH_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：通し番号[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_AH_PARAM.tousi_no);
printf( "[%s][Line:%04d]Struct：故障来歴０１[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AH_PARAM.raireki1);
printf( "[%s][Line:%04d]Struct：故障来歴０２[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AH_PARAM.raireki2);
printf( "[%s][Line:%04d]Struct：故障来歴０３[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AH_PARAM.raireki3);
printf( "[%s][Line:%04d]Struct：故障来歴０４[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AH_PARAM.raireki4);
printf( "[%s][Line:%04d]Struct：故障来歴０５[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AH_PARAM.raireki5);
printf( "[%s][Line:%04d]Struct：故障来歴０６[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AH_PARAM.raireki6);
printf( "[%s][Line:%04d]Struct：故障来歴０７[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AH_PARAM.raireki7);
printf( "[%s][Line:%04d]Struct：故障来歴０８[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AH_PARAM.raireki8);
printf( "[%s][Line:%04d]Struct：故障来歴０９[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AH_PARAM.raireki9);
printf( "[%s][Line:%04d]Struct：故障来歴１０[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AH_PARAM.raireki10);
printf( "[%s][Line:%04d]Struct：故障来歴１１[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AH_PARAM.raireki11);
printf( "[%s][Line:%04d]Struct：故障来歴１２[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AH_PARAM.raireki12);
printf( "[%s][Line:%04d]Struct：故障来歴１３[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AH_PARAM.raireki13);
printf( "[%s][Line:%04d]Struct：故障来歴１４[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AH_PARAM.raireki14);
printf( "[%s][Line:%04d]Struct：アワメータ[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_AH_PARAM.hour_meter);
printf( "[%s][Line:%04d]COMMAND[SD2]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_pn                                                      */
/*  機能    :   コマンド[PN]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_pn(char *p1,char *p2)                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_pn(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [PN] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_PN_PARAM.cmd_all, p1);  /*  コマンド行全文 */
    strcpy(G_CMD_PN_PARAM.mc_pno, p2);   /*  ﾒｶﾄﾛｺﾝﾄﾛｰﾗﾊﾟｰﾂNo */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_PN_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：ﾒｶﾄﾛｺﾝﾄﾛｰﾗﾊﾟｰﾂNo[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_PN_PARAM.mc_pno);
printf( "[%s][Line:%04d]COMMAND[PN]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_vr                                                      */
/*  機能    :   コマンド[VR]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_vr(char *p1,char *p2)                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新    SKCS    2012.05.17 Vコマンドも間借
/* ------------------------------------------------------------------------ */
int     cmd_vr(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [VR/V] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_VR_PARAM.cmd_all, p1);  /*  コマンド行全文 */
    strcpy(G_CMD_VR_PARAM.mc_ver, p2);   /*  ﾒｶﾄﾛｺﾝﾄﾛｰﾗｿﾌﾄVer */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_VR_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：ﾒｶﾄﾛｺﾝﾄﾛｰﾗｿﾌﾄVer[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_VR_PARAM.mc_ver);
printf( "[%s][Line:%04d]COMMAND[VR/V]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_xx                                                      */
/*  機能    :   コマンド[XX]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_xx(char *p1,char *p2,char *p3,char *p4)                 */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_xx(char *p1,char *p2,char *p3,char *p4)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [XX] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p4);
#endif

    int alarm_status;
    sscanf(p3, "%d", &alarm_status);
    
    /* 構造体へデータセット */
    strcpy(G_CMD_XX_PARAM.cmd_all, p1);         /*  コマンド行全文      */
    strcpy(G_CMD_XX_PARAM.alarm_cd, p2);        /*  警報コード */
    strcpy(G_CMD_XX_PARAM.error_cd, p2);        /*  エラーコード */
    G_CMD_XX_PARAM.alarm_status = alarm_status; /*  発生/解除 */
    strcpy(G_CMD_XX_PARAM.yymmddhh24mi, p4);    /*  年月時分 */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_XX_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：警報コード[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_XX_PARAM.alarm_cd);
printf( "[%s][Line:%04d]Struct：エラーコード[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_XX_PARAM.error_cd);
printf( "[%s][Line:%04d]Struct：発生/解除[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_XX_PARAM.alarm_status);
printf( "[%s][Line:%04d]Struct：年月時分[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_XX_PARAM.yymmddhh24mi);
printf( "[%s][Line:%04d]COMMAND[XX]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_np                                                      */
/*  機能    :   コマンド[NP]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_np(char *p1,char *p2,char *p3)                          */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_np(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [NP] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
#endif
    
    int fuel_cons_amount;
    int power_on_h;
    sscanf(p2, "%d", &fuel_cons_amount);
    sscanf(p3, "%d", &power_on_h);

    /* 構造体へデータセット */
    strcpy(G_CMD_NP_PARAM.cmd_all, p1);       /*  コマンド行全文 */
    G_CMD_NP_PARAM.fuel_cons_amount = fuel_cons_amount;  /*  燃料消費量 */
    G_CMD_NP_PARAM.power_on_h = power_on_h ;  /*  稼働時間 */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_NP_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：燃料消費量[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_NP_PARAM.fuel_cons_amount);
printf( "[%s][Line:%04d]Struct：稼働時間[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_NP_PARAM.power_on_h);
printf( "[%s][Line:%04d]COMMAND[NP]-END\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_xx_v7                                                   */
/*  機能    :   コマンド[XX(Tier4a(V7))]の処理を行う                        */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_xx_v7(char *p1,char *p2,char *p3,char *p4,char *p5)     */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2012.05.16                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_xx_v7(char *p1,char *p2,char *p3,char *p4,char *p5)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]command[XX(Tier4a(V7))]-start\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p4);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p5);
#endif

    int alarm_status;
    sscanf(p3, "%d", &alarm_status);

    /* 構造体へデータセット */
    strcpy(G_CMD_XX_PARAM.cmd_all, p1);         /*  コマンド行全文      */
    strcpy(G_CMD_XX_PARAM.alarm_cd, p2);        /*  警報コード */
    G_CMD_XX_PARAM.alarm_status = alarm_status; /*  発生/解除 */
    strcpy(G_CMD_XX_PARAM.error_cd, p4);        /*  エラーコード */
    strcpy(G_CMD_XX_PARAM.yymmddhh24mi, p5);    /*  年月時分 */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct:cmd_all[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_XX_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct:alarm_cd[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_XX_PARAM.alarm_cd);
printf( "[%s][Line:%04d]Struct:alarm_status[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_XX_PARAM.alarm_status);
printf( "[%s][Line:%04d]Struct:error_cd[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_XX_PARAM.error_cd);
printf( "[%s][Line:%04d]Struct:yymmddhh24mi[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_XX_PARAM.yymmddhh24mi);
printf( "[%s][Line:%04d]command[XX(Tier4a(V7))]-end\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* --------------------------------------------------------------------------------- */
/*  関数名  :   cmd_xx_v7_eg                                                         */
/*  機能    :   コマンド[XX(Tier4a(V7))]の処理を行う                                 */
/*  関数型  :   int                                                                  */
/*  呼出形式:   cmd_xx_v7_eg(char *p1,char *p2,char *p3,char *p4,char *p5,char *p6)  */
/*                                                                                   */
/*  戻り値  :   0：正常  0以外：異常                                                 */
/*  引数    :   なし                                                                 */
/* --------------------------------------------------------------------------------- */
/*  作成    SKCS    2012.05.16                                                       */
/*  更新                                                                             */
/* --------------------------------------------------------------------------------- */
int     cmd_xx_v7_eg(char *p1,char *p2,char *p3,char *p4,char *p5,char *p6)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]command[XX(Tier4a(V7))]-start\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p4);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p5);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p6);
#endif

    int alarm_status;
    sscanf(p3, "%d", &alarm_status);

    /* 構造体へデータセット */
    strcpy(G_CMD_XX_PARAM.cmd_all, p1);         /*  コマンド行全文      */
    strcpy(G_CMD_XX_PARAM.alarm_cd, p2);        /*  警報コード */
    G_CMD_XX_PARAM.alarm_status = alarm_status; /*  発生/解除 */
    strcpy(G_CMD_XX_PARAM.error_cd, p4);        /*  エラーコード */
    strcpy(G_CMD_XX_PARAM.yymmddhh24mi, p5);    /*  年月時分 */
    strcpy(G_CMD_XX_PARAM.eg_status, p6);       /*  E/G稼働状況 */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct:cmd_all[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_XX_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct:alarm_cd[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_XX_PARAM.alarm_cd);
printf( "[%s][Line:%04d]Struct:alarm_status[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_XX_PARAM.alarm_status);
printf( "[%s][Line:%04d]Struct:error_cd[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_XX_PARAM.error_cd);
printf( "[%s][Line:%04d]Struct:yymmddhh24mi[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_XX_PARAM.yymmddhh24mi);
printf( "[%s][Line:%04d]Struct:eg_status[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_XX_PARAM.eg_status);
printf( "[%s][Line:%04d]command[XX(Tier4a(V7))]-end\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_ea
/*  機能    :   コマンド[EATier4a(V7))]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_ea(char *p1,char *p2)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2012.05.16
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_ea(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]command[EA(Tier4a(V7))]-start\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int adjust;
    sscanf(p2, "%d", &adjust);

    /* 構造体へデータセット */
    strcpy(G_CMD_EA_PARAM.cmd_all, p1);         /*  コマンド行全文      */
    G_CMD_EA_PARAM.adjust = adjust;             /*  調整値 */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct:cmd_all[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_EA_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct:adjust[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_EA_PARAM.adjust);
printf( "[%s][Line:%04d]COMMAND[EA(Tier4a(V7))]-end\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_pa
/*  機能    :   コマンド[PA(Tier4a(V7))]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_pa(char *p1,char *p2)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2012.05.16
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_pa(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [PA(Tier4a(V7))] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int adjust;
    sscanf(p2, "%d", &adjust);

    /* 構造体へデータセット */
    strcpy(G_CMD_PA_PARAM.cmd_all, p1);         /*  コマンド行全文      */
    G_CMD_PA_PARAM.adjust = adjust;             /*  調整値 */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_PA_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：調整値[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_PA_PARAM.adjust);
printf( "[%s][Line:%04d]COMMAND[PA(Tier4a(V7))]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_pb
/*  機能    :   コマンド[PB(Tier4a(V7))]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_pb(char *p1,char *p2)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2012.05.16
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_pb(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [PB(Tier4a(V7))] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int adjust;
    sscanf(p2, "%d", &adjust);

    /* 構造体へデータセット */
    strcpy(G_CMD_PB_PARAM.cmd_all, p1);         /*  コマンド行全文      */
    G_CMD_PB_PARAM.adjust = adjust;             /*  調整値 */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_PB_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：調整値[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_PB_PARAM.adjust);
printf( "[%s][Line:%04d]COMMAND[PB(Tier4a(V7))]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_pc
/*  機能    :   コマンド[PC(Tier4a(V7))]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_pc(char *p1,char *p2)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2012.05.16
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_pc(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [PC(Tier4a(V7))] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int adjust;
    sscanf(p2, "%d", &adjust);

    /* 構造体へデータセット */
    strcpy(G_CMD_PC_PARAM.cmd_all, p1);         /*  コマンド行全文      */
    G_CMD_PC_PARAM.adjust = adjust;             /*  調整値 */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_PC_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：調整値[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_PC_PARAM.adjust);
printf( "[%s][Line:%04d]COMMAND[PC(Tier4a(V7))]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_ua
/*  機能    :   コマンド[UA(Tier4a(V7))]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_ua(char *p1,char *p2)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2012.05.16
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_ua(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [UA(Tier4a(V7))] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int adjust;
    sscanf(p2, "%d", &adjust);

    /* 構造体へデータセット */
    strcpy(G_CMD_UA_PARAM.cmd_all, p1);         /*  コマンド行全文      */
    G_CMD_UA_PARAM.adjust = adjust;             /*  調整値 */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_UA_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：調整値[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_UA_PARAM.adjust);
printf( "[%s][Line:%04d]COMMAND[UA(Tier4a(V7))]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_ub
/*  機能    :   コマンド[UB(Tier4a(V7))]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_ub(char *p1,char *p2)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2012.05.16
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_ub(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [UB(Tier4a(V7))] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int adjust;
    sscanf(p2, "%d", &adjust);

    /* 構造体へデータセット */
    strcpy(G_CMD_UB_PARAM.cmd_all, p1);         /*  コマンド行全文      */
    G_CMD_UB_PARAM.adjust = adjust;             /*  調整値 */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_UB_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：調整値[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_UB_PARAM.adjust);
printf( "[%s][Line:%04d]COMMAND[UB(Tier4a(V7))]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_sw
/*  機能    :   コマンド[SW(Tier4a(V7))]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_sw(char *p1,char *p2)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2012.05.16
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_sw(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [SW(Tier4a(V7))] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int turning_h;
    sscanf(p2, "%d", &turning_h);

    /* 構造体へデータセット */
    strcpy(G_CMD_SW_PARAM.cmd_all, p1);         /*  コマンド行全文      */
    G_CMD_SW_PARAM.turning_h = turning_h;       /*  旋回操作時間 */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SW_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：旋回操作時間[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_SW_PARAM.turning_h);
printf( "[%s][Line:%04d]COMMAND[SW(Tier4a(V7))]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_st
/*  機能    :   コマンド[ST(Tier4a(V7))]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_st(char *p1,char *p2)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2012.05.16
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_st(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [ST(Tier4a(V7))] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

    int adjust;
    sscanf(p2, "%d", &adjust);

    /* 構造体へデータセット */
    strcpy(G_CMD_ST_PARAM.cmd_all, p1);         /*  コマンド行全文      */
    G_CMD_ST_PARAM.eg_st_count = adjust;           /*  エンジン始動回数 */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_ST_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：エンジン始動回数[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_ST_PARAM.eg_st_count);
printf( "[%s][Line:%04d]COMMAND[ST(Tier4a(V7))]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_mc
/*  機能    :   コマンド[MC(Tier4a(V7))]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_mc(char *p1,char *p2,char *p3,char *p4)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2012.05.16
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_mc(char *p1,char *p2,char *p3,char *p4)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [MC(Tier4a(V7))] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p4);
#endif
    
    int fuel_cons_amount;

    /* 構造体へデータセット */
    strcpy(G_CMD_NP_PARAM.cmd_all, p1);       /*  コマンド行全文 */
    sscanf(p2, "%d", &fuel_cons_amount);
    G_CMD_MC_PARAM.fuel_cons_h_mode = fuel_cons_amount;  /*  燃料消費量(H) */
    sscanf(p3, "%d", &fuel_cons_amount);
    G_CMD_MC_PARAM.fuel_cons_s_mode = fuel_cons_amount;  /*  燃料消費量(S) */
    sscanf(p4, "%d", &fuel_cons_amount);
    G_CMD_MC_PARAM.fuel_cons_e_mode = fuel_cons_amount;  /*  燃料消費量(E) */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_MC_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：燃料消費量(H)[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_MC_PARAM.fuel_cons_h_mode);
printf( "[%s][Line:%04d]Struct：燃料消費量(S)[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_MC_PARAM.fuel_cons_s_mode);
printf( "[%s][Line:%04d]Struct：燃料消費量(E)[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_MC_PARAM.fuel_cons_e_mode);
printf( "[%s][Line:%04d]COMMAND[MC(Tier4a(V7))]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_mt
/*  機能    :   コマンド[MT(Tier4a(V7))]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_mt(char *p1,char *p2,char *p3,char *p4)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2012.05.16
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_mt(char *p1,char *p2,char *p3,char *p4)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [MT(Tier4a(V7))] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p4);
#endif
    
    int fuel_pon;

    /* 構造体へデータセット */
    strcpy(G_CMD_NP_PARAM.cmd_all, p1);       /*  コマンド行全文 */
    sscanf(p2, "%d", &fuel_pon);
    G_CMD_MT_PARAM.fuel_pon_h_mode = fuel_pon;  /*  燃費_稼働時間(H) */
    sscanf(p3, "%d", &fuel_pon);
    G_CMD_MT_PARAM.fuel_pon_s_mode = fuel_pon;  /*  燃費_稼働時間(S) */
    sscanf(p4, "%d", &fuel_pon);
    G_CMD_MT_PARAM.fuel_pon_e_mode = fuel_pon;  /*  燃費_稼働時間(E) */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_MT_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：燃費_稼働時間(H)[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_MT_PARAM.fuel_pon_h_mode);
printf( "[%s][Line:%04d]Struct：燃費_稼働時間(S)[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_MT_PARAM.fuel_pon_s_mode);
printf( "[%s][Line:%04d]Struct：燃費_稼働時間(E)[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_MT_PARAM.fuel_pon_e_mode);
printf( "[%s][Line:%04d]COMMAND[MT(Tier4a(V7))]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_dt
/*  機能    :   コマンド[DT(Tier4a(V7))]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_dt(char *p1,char *p2)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2012.05.16
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_dt(char *p1,char *p2)
{
	return( 0 );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_sl
/*  機能    :   コマンド[SL]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_sl(char *p1,char *p2)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2013.02.07
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_sl(char *p1,char *p2)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [SL] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif
    
    int int_val;

    /* 構造体へデータセット */
    strcpy(G_CMD_SL_PARAM.cmd_all, p1);       /*  コマンド行全文 */
    strcpy(G_CMD_SL_PARAM.dpf_level,p2);      /*  DPF目詰まりレベル */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SL_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：DPF目詰まりレベル[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SL_PARAM.dpf_level);
printf( "[%s][Line:%04d]COMMAND[SL]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_td
/*  機能    :   コマンド[TD]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_td(char *p1,char *p2, char *p3)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    KSC    2013.03.18
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_td(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [TD] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif
    
    int int_val;

    /* 構造体へデータセット */
    strcpy(G_CMD_TD_PARAM.cmd_all, p1);       /*  コマンド行全文 */
    strcpy(G_CMD_TD_PARAM.td_value,p2);       /*  時差           */
    strcpy(G_CMD_TD_PARAM.td_status,p3);      /*  応答           */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_TD_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：時差TD[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_TD_PARAM.td_value);
printf( "[%s][Line:%04d]Struct：応答[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_TD_PARAM.td_status);
printf( "[%s][Line:%04d]COMMAND[TD]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_x1                                                      */
/*  機能    :   コマンド[X1]の処理を行う                                    */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_x1(char*,char*,char*,char*,char*,char*)                 */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2014.06.18                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_x1(char *p1,char *p2, int argc , ...)
{
	va_list list;
	char* arr[26];
#ifdef DEBUG
printf( "[%s][Line:%04d]argc[%d]\n", __FUNCTION__,__LINE__ ,argc);
#endif
	va_start( list ,  argc );
	int i;


#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [X1] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]argc[%d]\n", __FUNCTION__,__LINE__ ,argc);
#endif

	for( i=0 ; i<26 ; i++ ) {
		arr[i] = "";
	}
	for( i=0 ; i<argc ; i++ ) {
		arr[i] = va_arg(list,char*);
#ifdef DEBUG
		printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,arr[i]);
#endif
	}


	int cur = G_CMD_HOZEN_PARAM[0].count;

	if(cur > MAX_HOZEN_PARAM ){
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND[X1] Element OB.\n", __FUNCTION__,__LINE__ );
#endif
		return ( 0 );	/* 以降のデータは読み飛ばす(正常扱いとする) */
	}

#ifdef DEBUG
printf( "[%s][Line:%04d]OK.\n", __FUNCTION__,__LINE__ );
#endif


    /* 構造体へデータセット */
    strcpy(G_CMD_HOZEN_PARAM[cur].cmd_all, p1);             /*  コマンド行全文      */
    strcpy(G_CMD_HOZEN_PARAM[cur].value00, p2);             /*  値00 */
    strcpy(G_CMD_HOZEN_PARAM[cur].value01, arr[0]);         /*  値01 */
    strcpy(G_CMD_HOZEN_PARAM[cur].value02, arr[1]);         /*  値02 */
    strcpy(G_CMD_HOZEN_PARAM[cur].value03, arr[2]);         /*  値03 */
    strcpy(G_CMD_HOZEN_PARAM[cur].value04, arr[3]);         /*  値04 */
    strcpy(G_CMD_HOZEN_PARAM[cur].value05, arr[4]);         /*  値05 */
    strcpy(G_CMD_HOZEN_PARAM[cur].value06, arr[5]);         /*  値06 */
    strcpy(G_CMD_HOZEN_PARAM[cur].value07, arr[6]);         /*  値07 */
    strcpy(G_CMD_HOZEN_PARAM[cur].value08, arr[7]);         /*  値08 */
    strcpy(G_CMD_HOZEN_PARAM[cur].value09, arr[8]);         /*  値09 */
    strcpy(G_CMD_HOZEN_PARAM[cur].value10, arr[9]);         /*  値10 */
    strcpy(G_CMD_HOZEN_PARAM[cur].value11, arr[10]);        /*  値11 */
    strcpy(G_CMD_HOZEN_PARAM[cur].value12, arr[11]);        /*  値12 */
    strcpy(G_CMD_HOZEN_PARAM[cur].value13, arr[12]);        /*  値13 */
    strcpy(G_CMD_HOZEN_PARAM[cur].value14, arr[13]);        /*  値14 */
    strcpy(G_CMD_HOZEN_PARAM[cur].value15, arr[14]);        /*  値15 */
    strcpy(G_CMD_HOZEN_PARAM[cur].value16, arr[15]);        /*  値16 */
    strcpy(G_CMD_HOZEN_PARAM[cur].value17, arr[16]);        /*  値17 */
    strcpy(G_CMD_HOZEN_PARAM[cur].value18, arr[17]);        /*  値18 */
    strcpy(G_CMD_HOZEN_PARAM[cur].value19, arr[18]);        /*  値19 */
    strcpy(G_CMD_HOZEN_PARAM[cur].value20, arr[19]);        /*  値20 */
    strcpy(G_CMD_HOZEN_PARAM[cur].value21, arr[20]);        /*  値21 */
    strcpy(G_CMD_HOZEN_PARAM[cur].value22, arr[21]);        /*  値22 */
    strcpy(G_CMD_HOZEN_PARAM[cur].value23, arr[22]);        /*  値23 */
    strcpy(G_CMD_HOZEN_PARAM[cur].value24, arr[23]);        /*  値24 */
    strcpy(G_CMD_HOZEN_PARAM[cur].value25, arr[24]);        /*  値25 */
    strcpy(G_CMD_HOZEN_PARAM[cur].value26, arr[25]);        /*  値26 */
    G_CMD_HOZEN_PARAM[0].count ++;

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].cmd_all);
printf( "[%s][Line:%04d]Struct：HOZEN_LINE[%d]\n", __FUNCTION__,__LINE__ ,cur);
printf( "[%s][Line:%04d]Struct：VALUE00[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].value00);
printf( "[%s][Line:%04d]Struct：VALUE01[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].value01);
printf( "[%s][Line:%04d]Struct：VALUE02[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].value02);
printf( "[%s][Line:%04d]Struct：VALUE03[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].value03);
printf( "[%s][Line:%04d]Struct：VALUE04[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].value04);
printf( "[%s][Line:%04d]Struct：VALUE05[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].value05);
printf( "[%s][Line:%04d]Struct：VALUE06[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].value06);
printf( "[%s][Line:%04d]Struct：VALUE07[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].value07);
printf( "[%s][Line:%04d]Struct：VALUE08[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].value08);
printf( "[%s][Line:%04d]Struct：VALUE09[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].value09);
printf( "[%s][Line:%04d]Struct：VALUE10[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].value10);
printf( "[%s][Line:%04d]Struct：VALUE11[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].value11);
printf( "[%s][Line:%04d]Struct：VALUE12[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].value12);
printf( "[%s][Line:%04d]Struct：VALUE13[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].value13);
printf( "[%s][Line:%04d]Struct：VALUE14[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].value14);
printf( "[%s][Line:%04d]Struct：VALUE15[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].value15);
printf( "[%s][Line:%04d]Struct：VALUE16[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].value16);
printf( "[%s][Line:%04d]Struct：VALUE17[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].value17);
printf( "[%s][Line:%04d]Struct：VALUE18[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].value18);
printf( "[%s][Line:%04d]Struct：VALUE19[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].value19);
printf( "[%s][Line:%04d]Struct：VALUE20[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].value20);
printf( "[%s][Line:%04d]Struct：VALUE21[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].value21);
printf( "[%s][Line:%04d]Struct：VALUE22[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].value22);
printf( "[%s][Line:%04d]Struct：VALUE23[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].value23);
printf( "[%s][Line:%04d]Struct：VALUE24[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].value24);
printf( "[%s][Line:%04d]Struct：VALUE25[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].value25);
printf( "[%s][Line:%04d]Struct：VALUE26[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HOZEN_PARAM[cur].value26);
printf( "[%s][Line:%04d]COMMAND[X1]-END\n", __FUNCTION__,__LINE__ );
#endif


	va_end( list );

    return( 0 );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_ha
/*  機能    :   コマンド[HA]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_ha(char *p1,char *p2,char *p3)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    KSC    2014.10.31
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_ha(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [HA] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_HA_PARAM.cmd_all, p1);       /*  コマンド行全文 */
    G_CMD_HA_PARAM.count = 1;                 /*  データ件数     */
    strcpy(G_CMD_HA_PARAM.value00,p2);        /*  value00        */
    strcpy(G_CMD_HA_PARAM.value01,p3);        /*  value01        */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HA_PARAM.cmd_all);
printf( "[%s][Line:%04d]value00[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]value01[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]COMMAND[HA]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_lk
/*  機能    :   コマンド[LK]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_lk(char *p1,char *p2,char *p3)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    KSC    2014.10.31
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_lk(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [LK] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_LK_PARAM.cmd_all, p1);       /*  コマンド行全文 */
    G_CMD_LK_PARAM.count = 1;                 /*  データ件数     */
    strcpy(G_CMD_LK_PARAM.value00,p2);        /*  value00        */
    strcpy(G_CMD_LK_PARAM.value01,p3);        /*  value01        */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_LK_PARAM.cmd_all);
printf( "[%s][Line:%04d]count[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_LK_PARAM.count);
printf( "[%s][Line:%04d]value00[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_LK_PARAM.value00);
printf( "[%s][Line:%04d]value01[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_LK_PARAM.value01);
printf( "[%s][Line:%04d]COMMAND[LK]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_lkok
/*  機能    :   コマンド[LK9OK]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_lkok(char *p1,char *p2,char *p3)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    KSC    2014.10.31
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_lkok(char *p1,char *p2,char *p3,char *p4)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [LK(OK)] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p4);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_LKOK_PARAM.cmd_all, p1);       /*  コマンド行全文 */
    G_CMD_LKOK_PARAM.count = 1;                 /*  データ件数     */
    strcpy(G_CMD_LKOK_PARAM.value00,p2);        /*  value00        */
    strcpy(G_CMD_LKOK_PARAM.value01,p3);        /*  value01        */
    strcpy(G_CMD_LKOK_PARAM.value02,p4);        /*  value02        */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_LKOK_PARAM.cmd_all);
printf( "[%s][Line:%04d]count[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_LKOK_PARAM.count);
printf( "[%s][Line:%04d]value00[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_LKOK_PARAM.value00);
printf( "[%s][Line:%04d]value01[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_LKOK_PARAM.value01);
printf( "[%s][Line:%04d]value02[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_LKOK_PARAM.value02);
printf( "[%s][Line:%04d]COMMAND[LK(OK)]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_yd
/*  機能    :   コマンド[YD]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_yd(char *p1,char *p2,char *p3)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    KSC    2014.10.31
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_yd(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [YD] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_YD_PARAM.cmd_all, p1);       /*  コマンド行全文 */
    G_CMD_YD_PARAM.count = 1;                 /*  データ件数     */
    strcpy(G_CMD_YD_PARAM.value00,p2);        /*  value00        */
    strcpy(G_CMD_YD_PARAM.value01,p3);        /*  value01        */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_YD_PARAM.cmd_all);
printf( "[%s][Line:%04d]count[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_YD_PARAM.count);
printf( "[%s][Line:%04d]value00[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_YD_PARAM.value00);
printf( "[%s][Line:%04d]value01[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_YD_PARAM.value01);
printf( "[%s][Line:%04d]COMMAND[YD]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_ot
/*  機能    :   コマンド[OT]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_ot(char *p1,char *p2,char *p3)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    KSC    2014.10.31
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_ot(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [OT] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_OT_PARAM.cmd_all, p1);       /*  コマンド行全文 */
    G_CMD_OT_PARAM.count = 1;                 /*  データ件数     */
    strcpy(G_CMD_OT_PARAM.value00,p2);        /*  value00        */
    strcpy(G_CMD_OT_PARAM.value01,p3);        /*  value01        */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_OT_PARAM.cmd_all);
printf( "[%s][Line:%04d]count[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_OT_PARAM.count);
printf( "[%s][Line:%04d]value00[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_OT_PARAM.value00);
printf( "[%s][Line:%04d]value01[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_OT_PARAM.value01);
printf( "[%s][Line:%04d]COMMAND[OT]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_m
/*  機能    :   コマンド[M]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_m(char *p1,char *p2,char *p3)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    KSC    2014.10.31
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_m(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [M] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_M_PARAM.cmd_all, p1);       /*  コマンド行全文 */
    G_CMD_M_PARAM.count = 1;                 /*  データ件数     */
    strcpy(G_CMD_M_PARAM.value00,p2);        /*  value00        */
    strcpy(G_CMD_M_PARAM.value01,p3);        /*  value01        */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_M_PARAM.cmd_all);
printf( "[%s][Line:%04d]count[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_M_PARAM.count);
printf( "[%s][Line:%04d]value00[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_M_PARAM.value00);
printf( "[%s][Line:%04d]value01[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_M_PARAM.value01);
printf( "[%s][Line:%04d]COMMAND[M]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_jh
/*  機能    :   コマンド[JH]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_jh(char *p1,char *p2,char *p3)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    KSC    2014.10.31
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_jh(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [JH] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_JH_PARAM.cmd_all, p1);       /*  コマンド行全文 */
    G_CMD_JH_PARAM.count = 1;                 /*  データ件数     */
    strcpy(G_CMD_JH_PARAM.value00,p2);        /*  value00        */
    strcpy(G_CMD_JH_PARAM.value01,p3);        /*  value01        */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_JH_PARAM.cmd_all);
printf( "[%s][Line:%04d]count[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_JH_PARAM.count);
printf( "[%s][Line:%04d]value00[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_JH_PARAM.value00);
printf( "[%s][Line:%04d]value01[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_JH_PARAM.value01);
printf( "[%s][Line:%04d]COMMAND[JH]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_js
/*  機能    :   コマンド[JS]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_js(char *p1,char *p2,char *p3)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    KSC    2014.10.31
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_js(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [JS] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_JS_PARAM.cmd_all, p1);       /*  コマンド行全文 */
    G_CMD_JS_PARAM.count = 1;                 /*  データ件数     */
    strcpy(G_CMD_JS_PARAM.value00,p2);        /*  value00        */
    strcpy(G_CMD_JS_PARAM.value01,p3);        /*  value01        */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_JS_PARAM.cmd_all);
printf( "[%s][Line:%04d]count[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_JS_PARAM.count);
printf( "[%s][Line:%04d]value00[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_JS_PARAM.value00);
printf( "[%s][Line:%04d]value01[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_JS_PARAM.value01);
printf( "[%s][Line:%04d]COMMAND[JS]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_je
/*  機能    :   コマンド[JE]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_je(char *p1,char *p2,char *p3)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    KSC    2014.10.31
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_je(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [JE] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_JE_PARAM.cmd_all, p1);       /*  コマンド行全文 */
    G_CMD_JE_PARAM.count = 1;                 /*  データ件数     */
    strcpy(G_CMD_JE_PARAM.value00,p2);        /*  value00        */
    strcpy(G_CMD_JE_PARAM.value01,p3);        /*  value01        */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_JE_PARAM.cmd_all);
printf( "[%s][Line:%04d]count[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_JE_PARAM.count);
printf( "[%s][Line:%04d]value00[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_JE_PARAM.value00);
printf( "[%s][Line:%04d]value01[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_JE_PARAM.value01);
printf( "[%s][Line:%04d]COMMAND[JE]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_ab
/*  機能    :   コマンド[AB]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_ab(char *p1,char *p2,char *p3)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    KSC    2014.10.31
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_ab(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [AB] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_AB_PARAM.cmd_all, p1);       /*  コマンド行全文 */
    G_CMD_AB_PARAM.count = 1;                 /*  データ件数     */
    strcpy(G_CMD_AB_PARAM.value00,p2);        /*  value00        */
    strcpy(G_CMD_AB_PARAM.value01,p3);        /*  value01        */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AB_PARAM.cmd_all);
printf( "[%s][Line:%04d]count[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_AB_PARAM.count);
printf( "[%s][Line:%04d]value00[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AB_PARAM.value00);
printf( "[%s][Line:%04d]value01[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AB_PARAM.value01);
printf( "[%s][Line:%04d]COMMAND[AB]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_ss
/*  機能    :   コマンド[SS]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_ss(char *p1,char *p2,char *p3)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    KSC    2014.10.31
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_ss(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [SS] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_SS_PARAM.cmd_all, p1);       /*  コマンド行全文 */
    G_CMD_SS_PARAM.count = 1;                 /*  データ件数     */
    strcpy(G_CMD_SS_PARAM.value00,p2);        /*  value00        */
    strcpy(G_CMD_SS_PARAM.value01,p3);        /*  value01        */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SS_PARAM.cmd_all);
printf( "[%s][Line:%04d]count[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_SS_PARAM.count);
printf( "[%s][Line:%04d]value00[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SS_PARAM.value00);
printf( "[%s][Line:%04d]value01[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SS_PARAM.value01);
printf( "[%s][Line:%04d]COMMAND[SS]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_sr
/*  機能    :   コマンド[SR]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_sr(char *p1,char *p2,char *p3)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    KSC    2014.10.31
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_sr(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [SR] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_SR_PARAM.cmd_all, p1);       /*  コマンド行全文 */
    G_CMD_SR_PARAM.count = 1;                 /*  データ件数     */
    strcpy(G_CMD_SR_PARAM.value00,p2);        /*  value00        */
    strcpy(G_CMD_SR_PARAM.value01,p3);        /*  value01        */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SR_PARAM.cmd_all);
printf( "[%s][Line:%04d]count[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_SR_PARAM.count);
printf( "[%s][Line:%04d]value00[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SR_PARAM.value00);
printf( "[%s][Line:%04d]value01[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SR_PARAM.value01);
printf( "[%s][Line:%04d]COMMAND[SR]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_sg
/*  機能    :   コマンド[SG]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_sg(char *p1,char *p2,char *p3)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    KSC    2014.10.31
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_sg(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [SG] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_SG_PARAM.cmd_all, p1);       /*  コマンド行全文 */
    G_CMD_SG_PARAM.count = 1;                 /*  データ件数     */
    strcpy(G_CMD_SG_PARAM.value00,p2);        /*  value00        */
    strcpy(G_CMD_SG_PARAM.value01,p3);        /*  value01        */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SG_PARAM.cmd_all);
printf( "[%s][Line:%04d]count[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_SG_PARAM.count);
printf( "[%s][Line:%04d]value00[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SG_PARAM.value00);
printf( "[%s][Line:%04d]value01[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SG_PARAM.value01);
printf( "[%s][Line:%04d]COMMAND[SG]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_su
/*  機能    :   コマンド[SU]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_su(char *p1,char *p2,char *p3)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    KSC    2014.10.31
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_su(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [SU] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_SU_PARAM.cmd_all, p1);       /*  コマンド行全文 */
    G_CMD_SU_PARAM.count = 1;                 /*  データ件数     */
    strcpy(G_CMD_SU_PARAM.value00,p2);        /*  value00        */
    strcpy(G_CMD_SU_PARAM.value01,p3);        /*  value01        */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SU_PARAM.cmd_all);
printf( "[%s][Line:%04d]count[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_SU_PARAM.count);
printf( "[%s][Line:%04d]value00[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SU_PARAM.value00);
printf( "[%s][Line:%04d]value01[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SU_PARAM.value01);
printf( "[%s][Line:%04d]COMMAND[SU]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_hd
/*  機能    :   コマンド[HD]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_hd(char *p1,char *p2,char *p3)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    KSC    2014.10.31
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_hd(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [HD] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_HD_PARAM.cmd_all, p1);       /*  コマンド行全文 */
    G_CMD_HD_PARAM.count = 1;                 /*  データ件数     */
    strcpy(G_CMD_HD_PARAM.value00,p2);        /*  value00        */
    strcpy(G_CMD_HD_PARAM.value01,p3);        /*  value01        */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HD_PARAM.cmd_all);
printf( "[%s][Line:%04d]count[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_HD_PARAM.count);
printf( "[%s][Line:%04d]value00[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HD_PARAM.value00);
printf( "[%s][Line:%04d]value01[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HD_PARAM.value01);
printf( "[%s][Line:%04d]COMMAND[HD]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_hq
/*  機能    :   コマンド[HQ]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_hq(char *p1,char *p2,char *p3)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    KSC    2014.10.31
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_hq(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [HQ] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_HQ_PARAM.cmd_all, p1);       /*  コマンド行全文 */
    G_CMD_HQ_PARAM.count = 1;                 /*  データ件数     */
    strcpy(G_CMD_HQ_PARAM.value00,p2);        /*  value00        */
    strcpy(G_CMD_HQ_PARAM.value01,p3);        /*  value01        */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HQ_PARAM.cmd_all);
printf( "[%s][Line:%04d]count[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_HQ_PARAM.count);
printf( "[%s][Line:%04d]value00[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HQ_PARAM.value00);
printf( "[%s][Line:%04d]value01[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HQ_PARAM.value01);
printf( "[%s][Line:%04d]COMMAND[HQ]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_da
/*  機能    :   コマンド[DA]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_da(char *p1,char *p2,char *p3)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    KSC    2014.10.31
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_da(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [DA] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_DA_PARAM.cmd_all, p1);       /*  コマンド行全文 */
    G_CMD_DA_PARAM.count = 1;                 /*  データ件数     */
    strcpy(G_CMD_DA_PARAM.value00,p2);        /*  value00        */
    strcpy(G_CMD_DA_PARAM.value01,p3);        /*  value01        */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DA_PARAM.cmd_all);
printf( "[%s][Line:%04d]count[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_DA_PARAM.count);
printf( "[%s][Line:%04d]value00[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DA_PARAM.value00);
printf( "[%s][Line:%04d]value01[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DA_PARAM.value01);
printf( "[%s][Line:%04d]COMMAND[DA]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_hp
/*  機能    :   コマンド[HP]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_hp(char *p1,char *p2, char *p3...., char *p9)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    KSC    2014.10.31
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_hp(char *p1, char *p2, char *p3, char *p4, char *p5, char *p6, char *p7, char *p8, char *p9)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [HP] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p4);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p5);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p6);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p7);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p8);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p9);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_HP_PARAM.cmd_all, p1);       /*  コマンド行全文 */
    G_CMD_HP_PARAM.count = 1;                 /*  データ件数     */
    strcpy(G_CMD_HP_PARAM.value00,p2);        /*  value00        */
    strcpy(G_CMD_HP_PARAM.value01,p3);        /*  value01        */
    strcpy(G_CMD_HP_PARAM.value02,p4);        /*  value02        */
    strcpy(G_CMD_HP_PARAM.value03,p5);        /*  value03        */
    strcpy(G_CMD_HP_PARAM.value04,p6);        /*  value04        */
    strcpy(G_CMD_HP_PARAM.value05,p7);        /*  value05        */
    strcpy(G_CMD_HP_PARAM.value06,p8);        /*  value06        */
    strcpy(G_CMD_HP_PARAM.value07,p9);        /*  value07        */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HP_PARAM.cmd_all);
printf( "[%s][Line:%04d]count[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_HP_PARAM.count);
printf( "[%s][Line:%04d]value00[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HP_PARAM.value00);
printf( "[%s][Line:%04d]value01[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HP_PARAM.value01);
printf( "[%s][Line:%04d]value02[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HP_PARAM.value02);
printf( "[%s][Line:%04d]value03[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HP_PARAM.value03);
printf( "[%s][Line:%04d]value04[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HP_PARAM.value04);
printf( "[%s][Line:%04d]value05[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HP_PARAM.value05);
printf( "[%s][Line:%04d]value06[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HP_PARAM.value06);
printf( "[%s][Line:%04d]value07[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HP_PARAM.value07);
printf( "[%s][Line:%04d]COMMAND[HP]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_res_remote_dl
/*  機能    :   コマンド[遠隔DL応答]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_dg(char *p1,char *p2,char *p3,char *p4)
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    KSC    2014.11.06
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_res_remote_dl(char *p1,char *p2,char *p3,char *p4,char *p5)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [RES_REMOTE_DL] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p4);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_DG_PARAM.cmd_all, p1);       /*  コマンド行全文 */
    G_CMD_DG_PARAM.count = 1;                 /*  データ件数     */
    strcpy(G_CMD_DG_PARAM.value00,p2);        /*  value00        */
    strcpy(G_CMD_DG_PARAM.value01,p3);        /*  value01        */
    strcpy(G_CMD_DG_PARAM.value02,p4);        /*  value02        */
    strcpy(G_CMD_DG_PARAM.value03,p5);        /*  value03        */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DG_PARAM.cmd_all);
printf( "[%s][Line:%04d]count[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_DG_PARAM.count);
printf( "[%s][Line:%04d]value00[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DG_PARAM.value00);
printf( "[%s][Line:%04d]value01[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DG_PARAM.value01);
printf( "[%s][Line:%04d]value02[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DG_PARAM.value02);
printf( "[%s][Line:%04d]value03[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DG_PARAM.value03);
printf( "[%s][Line:%04d]COMMAND[RES_REMOTE_DL]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}



/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_astrsk1                                                 */
/*  機能    :   コマンド[ASTRSK1]の処理を行う                               */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_astrsk1(char *p1, int argc , ...)              */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2015.1.27
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_astrsk1(char *p1,int argc , ...)
{
	va_list list;
	char* arr[5];
#ifdef DEBUG
printf( "[%s][Line:%04d]argc[%d]\n", __FUNCTION__,__LINE__ ,argc);
#endif
	va_start( list ,  argc );
	int i;


#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [ASTRSK1] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]argc[%d]\n", __FUNCTION__,__LINE__ ,argc);
#endif

	for( i=0 ; i<5 ; i++ ) {	/* 可変引数５ */
		arr[i] = "";
	}

	/* 規定数以上は読み捨てる */
	if(argc > 5) argc = 5;

	for( i=0 ; i<argc ; i++ ) {
#ifdef DEBUG
		printf( "[%s][Line:%04d]Param-i[%d]\n", __FUNCTION__,__LINE__ ,i);
#endif
		arr[i] = va_arg(list,char*);
#ifdef DEBUG
		printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,arr[i]);
#endif
	}

#ifdef DEBUG
		printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HANYO_REC[0].count);
#endif

	int cur = G_CMD_HANYO_REC[0].count;

	if(cur >= MAX_HANYO_REC ){
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND[ASTRSK1] Element OB.\n", __FUNCTION__,__LINE__ );
#endif
		return ( 0 );	/* 以降のデータは読み飛ばす(正常扱いとする) */
	}

#ifdef DEBUG
printf( "[%s][Line:%04d]OK.\n", __FUNCTION__,__LINE__ );
#endif

    /* 構造体へデータセット */
    strncpy_withnul(G_CMD_HANYO_REC[cur].cmd_all, p1 ,BODY_LINE_MAX_LEN);       /*  コマンド行全文      */
    strncpy_withnul(G_CMD_HANYO_REC[cur].key1, arr[0],CONST_HANYO_KEY);         /*  KEY1 */
    strncpy_withnul(G_CMD_HANYO_REC[cur].key2, arr[1],CONST_HANYO_KEY);         /*  KEY2 */
    strncpy_withnul(G_CMD_HANYO_REC[cur].key3, arr[2],CONST_HANYO_KEY);         /*  KEY3 */
    strncpy_withnul(G_CMD_HANYO_REC[cur].key4, arr[3],CONST_HANYO_KEY);         /*  KEY4 */
    strncpy_withnul(G_CMD_HANYO_REC[cur].key5, arr[4],CONST_HANYO_KEY);         /*  KEY5 */
    G_CMD_HANYO_REC[0].count ++;

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HANYO_REC[cur].cmd_all);
printf( "[%s][Line:%04d]Struct：ASTRSK_LINE[%d]\n", __FUNCTION__,__LINE__ ,cur);
printf( "[%s][Line:%04d]Struct：key1[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HANYO_REC[cur].key1);
printf( "[%s][Line:%04d]Struct：key2[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HANYO_REC[cur].key2);
printf( "[%s][Line:%04d]Struct：key3[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HANYO_REC[cur].key3);
printf( "[%s][Line:%04d]Struct：key4[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HANYO_REC[cur].key4);
printf( "[%s][Line:%04d]Struct：key5[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HANYO_REC[cur].key5);
printf( "[%s][Line:%04d]COMMAND[ASTRSK1]-END\n", __FUNCTION__,__LINE__ );
#endif

	va_end( list );

    return( 0 );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_astrsk2
/*  機能    :   
/*  関数型  :   int
/*  呼出形式:   
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    KSC    2015.1.27
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_astrsk2(char *p1,char *p2)
{
	char* arr[2];
	char *tp;

	int i;
	/* 拡張情報は最大１０個なので１０で良いのだが、汎用構造体のサイズ分初期化 */
	for( i=0 ; i<2 ; i++ ) {
		arr[i] = "";
	}
#ifdef DEBUG
printf( "[%s][Line:%04d]OK.\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p2);
#endif

	i = 0;
	tp = strtok( p2, "," );
	arr[i++] = tp;
	while ( tp != NULL ) {
		tp = strtok( NULL,"," );
		arr[i++] = tp;
		/* ２個に分割してbreak */
		break;
	}

	int cur = G_CMD_HANYO_REC[0].count;

	if(cur >= MAX_HANYO_REC ){
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND[ASTRSK2] Element OB.\n", __FUNCTION__,__LINE__ );
#endif
		return ( 0 );	/* 以降のデータは読み飛ばす(正常扱いとする) */
	}

#ifdef DEBUG
printf( "[%s][Line:%04d]OK.\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[0]);
#endif

    /* 構造体へデータセット */
    strncpy_withnul(G_CMD_HANYO_REC[cur].cmd_all, p1     ,BODY_LINE_MAX_LEN);       /*  コマンド行全文      */
    strncpy_withnul(G_CMD_HANYO_REC[cur].reckey1, arr[0] ,CONST_HANYO_KEY );         /*  レコードKey */
    strncpy_withnul(G_CMD_HANYO_REC[cur].value01, p1     ,CONST_HANYO_DATA );        /*  レコード値(１行を登録) */
    G_CMD_HANYO_REC[0].count ++;

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HANYO_REC[cur].cmd_all);
printf( "[%s][Line:%04d]Struct：ASTRSK_LINE[%d]\n", __FUNCTION__,__LINE__ ,cur);
printf( "[%s][Line:%04d]Struct：reckey1[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HANYO_REC[cur].reckey1);
printf( "[%s][Line:%04d]Struct：value01[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_HANYO_REC[cur].value01);
printf( "[%s][Line:%04d]COMMAND[ASTRSK2]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_numsign
/*  機能    :   
/*  関数型  :   int
/*  呼出形式:   
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    KSC    2015.1.27
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_numsign(char *p1,char *p2)
{
	char* arr[27];
	char *tp;

	int i;
	/* 拡張情報は最大１０個なので１０で良いのだが、汎用構造体のサイズ分初期化 */
	for( i=0 ; i<27 ; i++ ) {
		arr[i] = "";
	}

	i = 0;
	tp = strtok( p2, "," );
	arr[i++] = tp;
	while ( tp != NULL ) {
		tp = strtok( NULL,"," );
		if ( tp == NULL ) break;
		arr[i++] = tp;
	}

	int cur = G_CMD_DAILY_EXT_PARAM[0].count;

	if(cur >= MAX_HANYO_PARAM ){
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND[X1] Element OB.\n", __FUNCTION__,__LINE__ );
#endif
		return ( 0 );	/* 以降のデータは読み飛ばす(正常扱いとする) */
	}

#ifdef DEBUG
printf( "[%s][Line:%04d]OK.\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[0] );
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[1] );
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[2] );
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[3] );
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[4] );
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[5] );
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[6] );
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[7] );
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[8] );
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[9] );
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[10]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[11]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[12]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[13]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[14]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[15]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[16]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[17]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[18]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[19]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[20]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[21]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[22]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[23]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[24]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[25]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[26]);
printf( "[%s][Line:%04d][%d]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[0].count);
#endif

    /* 構造体へデータセット */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].cmd_all, p1     ,BODY_LINE_MAX_LEN);/*  コマンド行全文      */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].value00, arr[0] ,CONST_C20);        /*  値00 */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].value01, arr[1] ,CONST_C20);        /*  値01 */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].value02, arr[2] ,CONST_C20);        /*  値02 */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].value03, arr[3] ,CONST_C20);        /*  値03 */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].value04, arr[4] ,CONST_C20);        /*  値04 */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].value05, arr[5] ,CONST_C20);        /*  値05 */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].value06, arr[6] ,CONST_C20);        /*  値06 */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].value07, arr[7] ,CONST_C20);        /*  値07 */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].value08, arr[8] ,CONST_C20);        /*  値08 */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].value09, arr[9] ,CONST_C20);        /*  値09 */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].value10, arr[10],CONST_C20);        /*  値10 */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].value11, arr[11],CONST_C20);        /*  値11 */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].value12, arr[12],CONST_C20);        /*  値12 */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].value13, arr[13],CONST_C20);        /*  値13 */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].value14, arr[14],CONST_C20);        /*  値14 */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].value15, arr[15],CONST_C20);        /*  値15 */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].value16, arr[16],CONST_C20);        /*  値16 */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].value17, arr[17],CONST_C20);        /*  値17 */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].value18, arr[18],CONST_C20);        /*  値18 */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].value19, arr[19],CONST_C20);        /*  値19 */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].value20, arr[20],CONST_C20);        /*  値20 */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].value21, arr[21],CONST_C20);        /*  値21 */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].value22, arr[22],CONST_C20);        /*  値22 */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].value23, arr[23],CONST_C20);        /*  値23 */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].value24, arr[24],CONST_C20);        /*  値24 */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].value25, arr[25],CONST_C20);        /*  値25 */
    strncpy_withnul(G_CMD_DAILY_EXT_PARAM[cur].value26, arr[26],CONST_C20);        /*  値26 */
    G_CMD_DAILY_EXT_PARAM[0].count ++;

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].cmd_all);
printf( "[%s][Line:%04d]Struct：DAILY_ETT_LINE[%d]\n", __FUNCTION__,__LINE__ ,cur);
printf( "[%s][Line:%04d]Struct：VALUE00[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].value00);
printf( "[%s][Line:%04d]Struct：VALUE01[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].value01);
printf( "[%s][Line:%04d]Struct：VALUE02[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].value02);
printf( "[%s][Line:%04d]Struct：VALUE03[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].value03);
printf( "[%s][Line:%04d]Struct：VALUE04[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].value04);
printf( "[%s][Line:%04d]Struct：VALUE05[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].value05);
printf( "[%s][Line:%04d]Struct：VALUE06[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].value06);
printf( "[%s][Line:%04d]Struct：VALUE07[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].value07);
printf( "[%s][Line:%04d]Struct：VALUE08[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].value08);
printf( "[%s][Line:%04d]Struct：VALUE09[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].value09);
printf( "[%s][Line:%04d]Struct：VALUE10[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].value10);
printf( "[%s][Line:%04d]Struct：VALUE11[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].value11);
printf( "[%s][Line:%04d]Struct：VALUE12[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].value12);
printf( "[%s][Line:%04d]Struct：VALUE13[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].value13);
printf( "[%s][Line:%04d]Struct：VALUE14[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].value14);
printf( "[%s][Line:%04d]Struct：VALUE15[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].value15);
printf( "[%s][Line:%04d]Struct：VALUE16[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].value16);
printf( "[%s][Line:%04d]Struct：VALUE17[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].value17);
printf( "[%s][Line:%04d]Struct：VALUE18[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].value18);
printf( "[%s][Line:%04d]Struct：VALUE19[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].value19);
printf( "[%s][Line:%04d]Struct：VALUE20[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].value20);
printf( "[%s][Line:%04d]Struct：VALUE21[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].value21);
printf( "[%s][Line:%04d]Struct：VALUE22[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].value22);
printf( "[%s][Line:%04d]Struct：VALUE23[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].value23);
printf( "[%s][Line:%04d]Struct：VALUE24[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].value24);
printf( "[%s][Line:%04d]Struct：VALUE25[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].value25);
printf( "[%s][Line:%04d]Struct：VALUE26[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_DAILY_EXT_PARAM[cur].value26);
printf( "[%s][Line:%04d]COMMAND[X1]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_fd
/*  機能    :   
/*  関数型  :   int
/*  呼出形式:   
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   なし
/* ------------------------------------------------------------------------ */
/*  作成    KSC    2015.12.07
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_fd(char *p1,char *p2,char *p3)
{
	char *arr[50+1];
	char *tp;

	char *x1;

	int i;
	/* 初期化 */
	for( i=0 ; i<50+1 ; i++ ) {
		arr[i] = "";
	}
tp = strstr(p3,",");


	i = 0;
	while ( p3 != NULL ){
		arr[i++] = p3;
		x1 = strstr(p3,",");
		if ( x1 == NULL ) break;
		if ( i > 50 ) break;
		*x1 = 0x00;
		p3 = x1 + 1;
		*tp = 0x00;
	}

/*
	i = 0;
	tp = strtok( p3, "," );
	arr[i++] = tp;
	while ( tp != NULL ) {
printf( "[%s]TP(1)[Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,tp);
		tp = strtok( NULL,"," );
		if ( tp == NULL ) break;
printf( "[%s]TP(2)[Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,tp);
		if ( i > 50 ) break;
		arr[i++] = tp;
	}
*/
	
	int cur = G_CMD_FDFR_REC[0].count;

	G_CMD_FDFR_REC[cur].value_count = i;
	/*	行数チェック	*/
	if(cur >= MAX_FDFR_REC ){
#ifdef DEBUG
printf( "[%s][Line:%04d] Element OB.\n", __FUNCTION__,__LINE__ );
#endif
		return ( 0 );	/* 以降のデータは読み飛ばす(正常扱いとする) */
	}

#ifdef DEBUG
printf( "[%s][Line:%04d]OK.\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p3);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[0] );
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[1] );
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[2] );
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[3] );
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[4] );
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[5] );
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[6] );
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[7] );
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[8] );
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[9] );
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[10]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[11]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[12]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[13]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[14]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[15]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[16]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[17]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[18]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[19]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[20]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[21]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[22]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[23]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[24]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[25]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[26]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[27]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[28]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[29]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[30]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[31]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[32]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[33]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[34]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[35]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[36]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[37]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[38]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[39]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[40]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[41]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[42]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[43]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[44]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[45]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[46]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[47]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[48]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[49]);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,arr[50]);
printf( "[%s][Line:%04d][%d]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[0].count);
#endif

    /* 構造体へデータセット */
    strncpy_withnul(G_CMD_FDFR_REC[cur].cmd_all, p1     ,BODY_LINE_MAX_LEN);/*  コマンド行全文      */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value00, p2 ,CONST_C20);        /*  コマンド値(FD,FR) */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value01, arr[0] ,CONST_C20);        /*  以下引数：値01 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value02, arr[1] ,CONST_C20);        /*  値02 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value03, arr[2] ,CONST_C20);        /*  値03 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value04, arr[3] ,CONST_C20);        /*  値04 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value05, arr[4] ,CONST_C20);        /*  値05 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value06, arr[5] ,CONST_C20);        /*  値06 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value07, arr[6] ,CONST_C20);        /*  値07 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value08, arr[7] ,CONST_C20);        /*  値08 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value09, arr[8] ,CONST_C20);        /*  値09 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value10, arr[9] ,CONST_C20);        /*  値10 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value11, arr[10],CONST_C20);        /*  値11 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value12, arr[11],CONST_C20);        /*  値12 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value13, arr[12],CONST_C20);        /*  値13 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value14, arr[13],CONST_C20);        /*  値14 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value15, arr[14],CONST_C20);        /*  値15 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value16, arr[15],CONST_C20);        /*  値16 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value17, arr[16],CONST_C20);        /*  値17 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value18, arr[17],CONST_C20);        /*  値18 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value19, arr[18],CONST_C20);        /*  値19 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value20, arr[19],CONST_C20);        /*  値20 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value21, arr[20],CONST_C20);        /*  値21 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value22, arr[21],CONST_C20);        /*  値22 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value23, arr[22],CONST_C20);        /*  値23 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value24, arr[23],CONST_C20);        /*  値24 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value25, arr[24],CONST_C20);        /*  値25 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value26, arr[25],CONST_C20);        /*  値26 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value27, arr[26],CONST_C20);        /*  値27 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value28, arr[27],CONST_C20);        /*  値28 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value29, arr[28],CONST_C20);        /*  値29 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value30, arr[29],CONST_C20);        /*  値30 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value31, arr[30],CONST_C20);        /*  値31 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value32, arr[31],CONST_C20);        /*  値32 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value33, arr[32],CONST_C20);        /*  値33 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value34, arr[33],CONST_C20);        /*  値34 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value35, arr[34],CONST_C20);        /*  値35 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value36, arr[35],CONST_C20);        /*  値36 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value37, arr[36],CONST_C20);        /*  値37 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value38, arr[37],CONST_C20);        /*  値38 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value39, arr[38],CONST_C20);        /*  値39 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value40, arr[39],CONST_C20);        /*  値40 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value41, arr[40],CONST_C20);        /*  値41 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value42, arr[41],CONST_C20);        /*  値42 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value43, arr[42],CONST_C20);        /*  値43 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value44, arr[43],CONST_C20);        /*  値44 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value45, arr[44],CONST_C20);        /*  値45 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value46, arr[45],CONST_C20);        /*  値46 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value47, arr[46],CONST_C20);        /*  値47 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value48, arr[47],CONST_C20);        /*  値48 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value49, arr[48],CONST_C20);        /*  値49 */
    strncpy_withnul(G_CMD_FDFR_REC[cur].value50, arr[49],CONST_C20);        /*  値50 */
    G_CMD_FDFR_REC[0].count ++;

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：cmd_fd all[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].cmd_all);
printf( "[%s][Line:%04d]Struct：VALUE00[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value00);
printf( "[%s][Line:%04d]Struct：VALUE01[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value01);
printf( "[%s][Line:%04d]Struct：VALUE02[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value02);
printf( "[%s][Line:%04d]Struct：VALUE03[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value03);
printf( "[%s][Line:%04d]Struct：VALUE04[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value04);
printf( "[%s][Line:%04d]Struct：VALUE05[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value05);
printf( "[%s][Line:%04d]Struct：VALUE06[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value06);
printf( "[%s][Line:%04d]Struct：VALUE07[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value07);
printf( "[%s][Line:%04d]Struct：VALUE08[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value08);
printf( "[%s][Line:%04d]Struct：VALUE09[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value09);
printf( "[%s][Line:%04d]Struct：VALUE10[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value10);
printf( "[%s][Line:%04d]Struct：VALUE11[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value11);
printf( "[%s][Line:%04d]Struct：VALUE12[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value12);
printf( "[%s][Line:%04d]Struct：VALUE13[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value13);
printf( "[%s][Line:%04d]Struct：VALUE14[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value14);
printf( "[%s][Line:%04d]Struct：VALUE15[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value15);
printf( "[%s][Line:%04d]Struct：VALUE16[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value16);
printf( "[%s][Line:%04d]Struct：VALUE17[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value17);
printf( "[%s][Line:%04d]Struct：VALUE18[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value18);
printf( "[%s][Line:%04d]Struct：VALUE19[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value19);
printf( "[%s][Line:%04d]Struct：VALUE20[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value20);
printf( "[%s][Line:%04d]Struct：VALUE21[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value21);
printf( "[%s][Line:%04d]Struct：VALUE22[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value22);
printf( "[%s][Line:%04d]Struct：VALUE23[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value23);
printf( "[%s][Line:%04d]Struct：VALUE24[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value24);
printf( "[%s][Line:%04d]Struct：VALUE25[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value25);
printf( "[%s][Line:%04d]Struct：VALUE26[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value26);
printf( "[%s][Line:%04d]Struct：VALUE27[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value27);
printf( "[%s][Line:%04d]Struct：VALUE28[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value28);
printf( "[%s][Line:%04d]Struct：VALUE29[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value29);
printf( "[%s][Line:%04d]Struct：VALUE30[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value30);
printf( "[%s][Line:%04d]Struct：VALUE31[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value31);
printf( "[%s][Line:%04d]Struct：VALUE32[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value32);
printf( "[%s][Line:%04d]Struct：VALUE33[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value33);
printf( "[%s][Line:%04d]Struct：VALUE34[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value34);
printf( "[%s][Line:%04d]Struct：VALUE35[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value35);
printf( "[%s][Line:%04d]Struct：VALUE36[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value36);
printf( "[%s][Line:%04d]Struct：VALUE37[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value37);
printf( "[%s][Line:%04d]Struct：VALUE38[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value38);
printf( "[%s][Line:%04d]Struct：VALUE39[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value39);
printf( "[%s][Line:%04d]Struct：VALUE40[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value40);
printf( "[%s][Line:%04d]Struct：VALUE41[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value41);
printf( "[%s][Line:%04d]Struct：VALUE42[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value42);
printf( "[%s][Line:%04d]Struct：VALUE43[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value43);
printf( "[%s][Line:%04d]Struct：VALUE44[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value44);
printf( "[%s][Line:%04d]Struct：VALUE45[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value45);
printf( "[%s][Line:%04d]Struct：VALUE46[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value46);
printf( "[%s][Line:%04d]Struct：VALUE47[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value47);
printf( "[%s][Line:%04d]Struct：VALUE48[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value48);
printf( "[%s][Line:%04d]Struct：VALUE49[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value49);
printf( "[%s][Line:%04d]Struct：VALUE50[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_FDFR_REC[cur].value50);
printf( "[%s][Line:%04d]cmd_fd(end)\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_ae                                                       */
/*  機能    :   コマンド[T]の処理を行う                                     */
/*  関数型  :   int                                                         */
/*  呼出形式:   cmd_ae(char *p1,char *p2,char *p3)
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int     cmd_ae(char *p1,char *p2,char *p3)
{
	char *tp;

	char *x1;

	int i;
	
	int cur = G_CMD_AE_REC[0].count;

	/*	行数チェック	*/
	if(cur >= MAX_AE_REC ){
#ifdef DEBUG
printf( "[%s][Line:%04d] Element OB.\n", __FUNCTION__,__LINE__ );
#endif
		return ( 0 );	/* 以降のデータは読み飛ばす(正常扱いとする) */
	}

#ifdef DEBUG
printf( "[%s][Line:%04d]OK.\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p3);
printf( "[%s][Line:%04d][%d]\n", __FUNCTION__,__LINE__ ,G_CMD_AE_REC[0].count);
#endif

    /* 構造体へデータセット */
    strncpy_withnul(G_CMD_AE_REC[cur].cmd_all, p1     ,BODY_LINE_MAX_LEN);/*  コマンド行全文      */
    strncpy_withnul(G_CMD_AE_REC[cur].value00, p2 , 1);            /*  AEに続く数値　1 or 0 */
    strncpy_withnul(G_CMD_AE_REC[cur].value01, p3 ,10);            /*  日付(YYMMDDhhmm) */
    G_CMD_AE_REC[0].count ++;

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：cmd_fd all[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AE_REC[cur].cmd_all);
printf( "[%s][Line:%04d]Struct：VALUE00[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AE_REC[cur].value00);
printf( "[%s][Line:%04d]Struct：VALUE01[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AE_REC[cur].value01);
printf( "[%s][Line:%04d]cmd_ae(end)\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_ar
/*  機能    :   
/*  関数型  :   int
/*  呼出形式:   
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   p1:
/* ------------------------------------------------------------------------ */
/*  作成    KSC    2017.08.24
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_ar(char *p1,char *p2 
              ,char *p3 ,char *p4 ,char *p5,char *p6 
              ,char *p7 ,char *p8 ,char *p9,char *p10
              ,char *p11,char *p12,char *p13,char *p14
              ,char *p15,char *p16,char *p17,char *p18
              ,char *p19,char *p20,char *p21,char *p22
              ,char *p23,char *p24,char *p25,char *p26)
{
	char *arr[24+1]; /* 最大列数 */
	char *tp;

	char *x1;


#ifdef DEBUG
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p3);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p4);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p5);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p6);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p7);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p8);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p9);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p10);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p11);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p12);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p13);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p14);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p15);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p16);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p17);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p18);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p19);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p20);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p21);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p22);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p23);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p24);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p25);
printf( "[%s][Line:%04d]CUR_INDEX[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[0].count);
#endif

	
	int cur = G_CMD_AR_REC[0].count;
	G_CMD_AR_REC[cur].value_count = 24;

    /* 構造体へデータセット */
    strncpy_withnul(G_CMD_AR_REC[cur].cmd_all, p1     ,BODY_LINE_MAX_LEN);/*  コマンド行全文      */
    strncpy_withnul(G_CMD_AR_REC[cur].value00, p2  ,CONST_C20);            /*  ARに続く数字(AR0〜AR25) */
    strncpy_withnul(G_CMD_AR_REC[cur].value01, p3  ,CONST_C20);            /*   0時 */
    strncpy_withnul(G_CMD_AR_REC[cur].value02, p4  ,CONST_C20);            /*   1時 */
    strncpy_withnul(G_CMD_AR_REC[cur].value03, p5  ,CONST_C20);            /*   2時 */
    strncpy_withnul(G_CMD_AR_REC[cur].value04, p6  ,CONST_C20);            /*   3時 */
    strncpy_withnul(G_CMD_AR_REC[cur].value05, p7  ,CONST_C20);            /*   4時 */
    strncpy_withnul(G_CMD_AR_REC[cur].value06, p8  ,CONST_C20);            /*   5時 */
    strncpy_withnul(G_CMD_AR_REC[cur].value07, p9  ,CONST_C20);            /*   6時 */
    strncpy_withnul(G_CMD_AR_REC[cur].value08, p10  ,CONST_C20);            /*   7時 */
    strncpy_withnul(G_CMD_AR_REC[cur].value09, p11 ,CONST_C20);            /*   8時 */
    strncpy_withnul(G_CMD_AR_REC[cur].value10, p12 ,CONST_C20);            /*   9時 */
    strncpy_withnul(G_CMD_AR_REC[cur].value11, p13 ,CONST_C20);            /*  10時 */
    strncpy_withnul(G_CMD_AR_REC[cur].value12, p14 ,CONST_C20);            /*  11時 */
    strncpy_withnul(G_CMD_AR_REC[cur].value13, p15 ,CONST_C20);            /*  12時 */
    strncpy_withnul(G_CMD_AR_REC[cur].value14, p16 ,CONST_C20);            /*  13時 */
    strncpy_withnul(G_CMD_AR_REC[cur].value15, p17 ,CONST_C20);            /*  14時 */
    strncpy_withnul(G_CMD_AR_REC[cur].value16, p18 ,CONST_C20);            /*  15時 */
    strncpy_withnul(G_CMD_AR_REC[cur].value17, p19 ,CONST_C20);            /*  16時 */
    strncpy_withnul(G_CMD_AR_REC[cur].value18, p20 ,CONST_C20);            /*  17時 */
    strncpy_withnul(G_CMD_AR_REC[cur].value19, p21 ,CONST_C20);            /*  18時 */
    strncpy_withnul(G_CMD_AR_REC[cur].value20, p22 ,CONST_C20);            /*  19時 */
    strncpy_withnul(G_CMD_AR_REC[cur].value21, p23 ,CONST_C20);            /*  20時 */
    strncpy_withnul(G_CMD_AR_REC[cur].value22, p24 ,CONST_C20);            /*  21時 */
    strncpy_withnul(G_CMD_AR_REC[cur].value23, p25 ,CONST_C20);            /*  22時 */
    strncpy_withnul(G_CMD_AR_REC[cur].value24, p26 ,CONST_C20);            /*  23時 */
    G_CMD_AR_REC[0].count ++;

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct cmd_all[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[cur].cmd_all);
printf( "[%s][Line:%04d]Struct VALUE00[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[cur].value00);
printf( "[%s][Line:%04d]Struct VALUE01[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[cur].value01);
printf( "[%s][Line:%04d]Struct VALUE02[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[cur].value02);
printf( "[%s][Line:%04d]Struct VALUE03[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[cur].value03);
printf( "[%s][Line:%04d]Struct VALUE04[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[cur].value04);
printf( "[%s][Line:%04d]Struct VALUE05[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[cur].value05);
printf( "[%s][Line:%04d]Struct VALUE06[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[cur].value06);
printf( "[%s][Line:%04d]Struct VALUE07[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[cur].value07);
printf( "[%s][Line:%04d]Struct VALUE08[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[cur].value08);
printf( "[%s][Line:%04d]Struct VALUE09[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[cur].value09);
printf( "[%s][Line:%04d]Struct VALUE10[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[cur].value10);
printf( "[%s][Line:%04d]Struct VALUE11[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[cur].value11);
printf( "[%s][Line:%04d]Struct VALUE12[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[cur].value12);
printf( "[%s][Line:%04d]Struct VALUE13[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[cur].value13);
printf( "[%s][Line:%04d]Struct VALUE14[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[cur].value14);
printf( "[%s][Line:%04d]Struct VALUE15[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[cur].value15);
printf( "[%s][Line:%04d]Struct VALUE16[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[cur].value16);
printf( "[%s][Line:%04d]Struct VALUE17[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[cur].value17);
printf( "[%s][Line:%04d]Struct VALUE18[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[cur].value18);
printf( "[%s][Line:%04d]Struct VALUE19[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[cur].value19);
printf( "[%s][Line:%04d]Struct VALUE20[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[cur].value20);
printf( "[%s][Line:%04d]Struct VALUE21[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[cur].value21);
printf( "[%s][Line:%04d]Struct VALUE22[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[cur].value22);
printf( "[%s][Line:%04d]Struct VALUE23[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[cur].value23);
printf( "[%s][Line:%04d]Struct VALUE24[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[cur].value24);
printf( "[%s][Line:%04d]CUR_INDEX[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[0].count);
printf( "[%s][Line:%04d]cmd_ar(end)\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_rr
/*  機能    :   
/*  関数型  :   int
/*  呼出形式:   
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   p1:
/* ------------------------------------------------------------------------ */
/*  作成    KSC    2020.11.20
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_rr(char *p1,char *p2 
              ,char *p3 ,char *p4 ,char *p5,char *p6 
              ,char *p7 ,char *p8 ,char *p9,char *p10
              ,char *p11,char *p12)
{
	char *arr[10+1]; /* 最大列数 */
	char *tp;

	char *x1;


#ifdef DEBUG
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p3);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p4);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p5);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p6);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p7);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p8);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p9);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p10);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p11);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p12);
printf( "[%s][Line:%04d]CUR_INDEX[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_RR_REC[0].count);
#endif

	
	int cur = G_CMD_RR_REC[0].count;
	G_CMD_RR_REC[cur].value_count = 10;

    /* 構造体へデータセット */
    strncpy_withnul(G_CMD_RR_REC[cur].cmd_all, p1     ,BODY_LINE_MAX_LEN);/*  コマンド行全文      */
    strncpy_withnul(G_CMD_RR_REC[cur].value00, p2  ,CONST_C20);            /*  RRに続く数字(RR0〜RR3) */
    strncpy_withnul(G_CMD_RR_REC[cur].value01, p3  ,CONST_C20);            /*  */
    strncpy_withnul(G_CMD_RR_REC[cur].value02, p4  ,CONST_C20);            /*  */
    strncpy_withnul(G_CMD_RR_REC[cur].value03, p5  ,CONST_C20);            /*  */
    strncpy_withnul(G_CMD_RR_REC[cur].value04, p6  ,CONST_C20);            /*  */
    strncpy_withnul(G_CMD_RR_REC[cur].value05, p7  ,CONST_C20);            /*  */
    strncpy_withnul(G_CMD_RR_REC[cur].value06, p8  ,CONST_C20);            /*  */
    strncpy_withnul(G_CMD_RR_REC[cur].value07, p9  ,CONST_C20);            /*  */
    strncpy_withnul(G_CMD_RR_REC[cur].value08, p10 ,CONST_C20);            /*  */
    strncpy_withnul(G_CMD_RR_REC[cur].value09, p11 ,CONST_C20);            /*  */
    strncpy_withnul(G_CMD_RR_REC[cur].value10, p12 ,CONST_C20);            /*  */
    G_CMD_RR_REC[0].count ++;

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct cmd_all[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_RR_REC[cur].cmd_all);
printf( "[%s][Line:%04d]Struct VALUE00[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_RR_REC[cur].value00);
printf( "[%s][Line:%04d]Struct VALUE01[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_RR_REC[cur].value01);
printf( "[%s][Line:%04d]Struct VALUE02[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_RR_REC[cur].value02);
printf( "[%s][Line:%04d]Struct VALUE03[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_RR_REC[cur].value03);
printf( "[%s][Line:%04d]Struct VALUE04[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_RR_REC[cur].value04);
printf( "[%s][Line:%04d]Struct VALUE05[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_RR_REC[cur].value05);
printf( "[%s][Line:%04d]Struct VALUE06[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_RR_REC[cur].value06);
printf( "[%s][Line:%04d]Struct VALUE07[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_RR_REC[cur].value07);
printf( "[%s][Line:%04d]Struct VALUE08[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_RR_REC[cur].value08);
printf( "[%s][Line:%04d]Struct VALUE09[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_RR_REC[cur].value09);
printf( "[%s][Line:%04d]Struct VALUE10[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_RR_REC[cur].value10);
printf( "[%s][Line:%04d]CUR_INDEX[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_RR_REC[0].count);
printf( "[%s][Line:%04d]cmd_rr(end)\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_ssid
/*  機能    :   コマンド[SSID]の処理を行う
/*  関数型  :   int
/*  呼出形式:   cmd_ssid()
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   p1:
/* ------------------------------------------------------------------------ */
/*  作成    KSC    2021.09.10
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_ssid(char *p1,char *p2,char *p3)
{
#ifdef DEBUG
printf( "[%s][Line:%04d]COMMAND [SSID] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,p3);
#endif

    /* 構造体へデータセット */
    strcpy(G_CMD_SSID_PARAM.cmd_all, p1);     /*  コマンド行全文 */
    strcpy(G_CMD_SSID_PARAM.ssid_status,p2);  /*  SSID変更応答   */
    strcpy(G_CMD_SSID_PARAM.ssid_value,p3);   /*  SSID内部値     */

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct：COMMAND_ZENBUN[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SSID_PARAM.cmd_all);
printf( "[%s][Line:%04d]Struct：SSID変更応答[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SSID_PARAM.ssid_status);
printf( "[%s][Line:%04d]Struct：SSID内部値[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_SSID_PARAM.ssid_value);
printf( "[%s][Line:%04d]COMMAND[SSID]-END\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   cmd_kl
/*  機能    :   
/*  関数型  :   int
/*  呼出形式:   
/*
/*  戻り値  :   0：正常  0以外：異常
/*  引数    :   p1:
/* ------------------------------------------------------------------------ */
/*  作成    KSC    2021.09.29
/*  更新    
/* ------------------------------------------------------------------------ */
int     cmd_kl(char *p1,char *p2, char *p3, char *p4, char *p5, char *p6, char *p7)
{

#ifdef DEBUG
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p1);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p2);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p3);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p4);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p5);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p6);
printf( "[%s][Line:%04d][%s]\n", __FUNCTION__,__LINE__ ,p7);
printf( "[%s][Line:%04d]CUR_INDEX[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_KL_REC[0].count);
#endif

	
	int cur = G_CMD_KL_REC[0].count;

    /* 構造体へデータセット */
    strncpy_withnul(G_CMD_KL_REC[cur].cmd_all, p1  ,BODY_LINE_MAX_LEN);    /*  コマンド行全文      */
    strncpy_withnul(G_CMD_KL_REC[cur].value00, p2  ,CONST_C30);            /*  RRに続く数字(RR0〜RR3) */
    strncpy_withnul(G_CMD_KL_REC[cur].value01, p3  ,CONST_C30);            /*  */
    strncpy_withnul(G_CMD_KL_REC[cur].value02, p4  ,CONST_C30);            /*  */
    strncpy_withnul(G_CMD_KL_REC[cur].value03, p5  ,CONST_C30);            /*  */
    strncpy_withnul(G_CMD_KL_REC[cur].value04, p6  ,CONST_C30);            /*  */
    strncpy_withnul(G_CMD_KL_REC[cur].value05, p7  ,CONST_C30);            /*  */
    G_CMD_KL_REC[0].count ++;

#ifdef DEBUG
printf( "[%s][Line:%04d]Struct cmd_all[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_KL_REC[cur].cmd_all);
printf( "[%s][Line:%04d]Struct VALUE00[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_KL_REC[cur].value00);
printf( "[%s][Line:%04d]Struct VALUE01[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_KL_REC[cur].value01);
printf( "[%s][Line:%04d]Struct VALUE02[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_KL_REC[cur].value02);
printf( "[%s][Line:%04d]Struct VALUE03[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_KL_REC[cur].value03);
printf( "[%s][Line:%04d]Struct VALUE04[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_KL_REC[cur].value04);
printf( "[%s][Line:%04d]Struct VALUE05[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_KL_REC[cur].value05);
printf( "[%s][Line:%04d]CUR_INDEX[%d]\n", __FUNCTION__,__LINE__ ,G_CMD_KL_REC[0].count);
printf( "[%s][Line:%04d]cmd_kl(end)\n", __FUNCTION__,__LINE__ );
#endif

	return( 0 );
}

