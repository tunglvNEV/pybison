/* ======================================================================== */
/*  コベルコ建機様向け用　稼動機管理システム                                */
/*  ファイル名  ：  merit_mtyp.pc                                           */
/*  説明        ：  メールタイプ別処理を行う                                */
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2011.06.05                                              */
/*  更新                                                                    */
/*			KSC 	2011.10.25	ミニ流用：国外／オーブコム２対応			*/
/*                                                                          */
/* ======================================================================== */

/* ------------------------------------------------------------------------ */
/*  インクルードヘッダ定義                                                  */
/* ------------------------------------------------------------------------ */
#include    <stdio.h>
#include    <stdlib.h>
#include    <string.h>
#include    <ctype.h>

#include    <sqlca.h>

EXEC SQL BEGIN DECLARE SECTION;
#include    "merit_bat.h"                    /*  共通ヘッダ  */
EXEC SQL END DECLARE SECTION;

/* ------------------------------------------------------------------------ */
/*  関数プロトタイプ宣言                                                    */
/* ------------------------------------------------------------------------ */
int nighttime_ope();

/* ------------------------------------------------------------------------ */
/*  外部シンボル参照宣言                                                    */
/* ------------------------------------------------------------------------ */
extern PROC_COM_PARAM   G_PROC_COM_PARAM;   /*  プロセス共通構造体          */
extern CMD_COM_PARAM    G_CMD_COM_PARAM;    /*  メール共通構造体            */
extern CMD_POS_PARAM    G_CMD_POS_PARAM;    /*  位置コマンド構造体          */
extern CMD_H_PARAM      G_CMD_H_PARAM;      /*  アワメータコマンド構造体    */
extern CMD_A_PARAM      G_CMD_A_PARAM;      /*  エリア判定コマンド構造体    */
extern CMD_T_PARAM      G_CMD_T_PARAM;      /*  エンジン始動時間構造体    */
extern CMD_P_PARAM      G_CMD_P_PARAM;      /*  エンジン停止時間構造体    */
extern CMD_I_PARAM      G_CMD_I_PARAM;      /*  無操作時間構造体    */
extern CMD_R_PARAM      G_CMD_R_PARAM;      /*  走行時間構造体    */
extern CMD_C_PARAM      G_CMD_C_PARAM;      /*  ハイリーチ使用時間構造体    */
extern CMD_N_PARAM      G_CMD_N_PARAM;      /*  N&B使用時間構造体    */
extern CMD_F_PARAM      G_CMD_F_PARAM;      /*  燃料残量構造体    */
extern CMD_W_PARAM      G_CMD_W_PARAM;      /*  エンジン水温分布構造体    */
extern CMD_U_PARAM      G_CMD_U_PARAM;      /*  ポンプ圧力分布構造体    */
extern CMD_J_PARAM      G_CMD_J_PARAM;      /*  ポンプ稼動量構造体    */
extern CMD_EC_PARAM     G_CMD_EC_PARAM;     /*  エンジンオイル交換残時間構造体    */
extern CMD_FC_PARAM     G_CMD_FC_PARAM;     /*  燃料フィルタ交換残時間構造体    */
extern CMD_HC_PARAM     G_CMD_HC_PARAM;     /*  作動油フィルタ交換残時間構造体    */
extern CMD_LC_PARAM     G_CMD_LC_PARAM;     /*  作動油交換残時間構造体    */
extern CMD_OV_PARAM     G_CMD_OV_PARAM;     /*  オーバーロード状態時間構造体    */
extern CMD_FT_PARAM     G_CMD_FT_PARAM;     /*  燃料温度構造体    */
extern CMD_FS_PARAM     G_CMD_FS_PARAM;     /*  燃料識別値構造体    */
extern CMD_EG_PARAM     G_CMD_EG_PARAM;     /*  エンジン稼動情報構造体    */
extern CMD_HS_PARAM     G_CMD_HS_PARAM;     /*  ｱﾜﾒｰﾀ変更構造体    */
extern CMD_HE_PARAM     G_CMD_HE_PARAM;     /*  エンジンオイル交換残時間構造体    */
extern CMD_HF_PARAM     G_CMD_HF_PARAM;     /*  燃料ﾌｨﾙﾀ交換残時間構造体    */
extern CMD_HH_PARAM     G_CMD_HH_PARAM;     /*  作業油ﾌｨﾙﾀ交換残時間構造体    */
extern CMD_HL_PARAM     G_CMD_HL_PARAM;     /*  作業油交換残時間構造体    */
extern CMD_D0_PARAM     G_CMD_D0_PARAM;      /*  通信テスト応答(電話番号)構造体    */
extern CMD_D1_PARAM     G_CMD_D1_PARAM;      /*  通信テスト応答(IPアドレス)燃料残量構造体    */
extern CMD_D2_PARAM     G_CMD_D2_PARAM;      /*  通信テスト応答(西暦)燃料残量構造体    */
extern CMD_D3_PARAM     G_CMD_D3_PARAM;      /*  通信テスト応答(予備１)燃料残量構造体    */
extern CMD_CM0_PARAM    G_CMD_CM0_PARAM;     /*  通信停止応答構造体    */
extern CMD_CM1_PARAM    G_CMD_CM1_PARAM;     /*  通信再開応答構造体    */
extern CMD_M0_PARAM     G_CMD_M0_PARAM;      /*  通信量確認応答(受信ﾒｰﾙ総容量)構造体    */
extern CMD_M1_PARAM     G_CMD_M1_PARAM;      /*  通信量確認応答(送信ﾒｰﾙ総容量)構造体    */
extern CMD_M2_PARAM     G_CMD_M2_PARAM;      /*  通信量確認応答(受信ﾒｰﾙ総数)構造体    */
extern CMD_M3_PARAM     G_CMD_M3_PARAM;      /*  通信量確認応答(送信ﾒｰﾙ総数)構造体    */
extern CMD_M4_PARAM     G_CMD_M4_PARAM;      /*  通信量確認応答(ﾘﾄﾗｲ回数)構造体    */
extern CMD_M5_PARAM     G_CMD_M5_PARAM;      /*  通信量確認応答(予備１)構造体    */
extern CMD_M6_PARAM     G_CMD_M6_PARAM;      /*  通信量確認応答(予備２)構造体    */
extern CMD_M7_PARAM     G_CMD_M7_PARAM;      /*  通信量確認応答(予備３)構造体    */
extern CMD_M8_PARAM     G_CMD_M8_PARAM;      /*  通信量確認応答(予備４)構造体    */
extern CMD_SC_PARAM     G_CMD_SC_PARAM;      /*  侵入警報構造体    */
extern CMD_SA_PARAM     G_CMD_SA_PARAM;      /*  エリア外警報構造体    */
extern CMD_BT_PARAM     G_CMD_BT_PARAM;      /*  バッテリ外し警報構造体    */
extern CMD_XX_PARAM     G_CMD_XX_PARAM;      /*  警報、自己診断構造体    */
extern CMD_AMON_PARAM   G_CMD_AMON_PARAM;    /*  侵入警報有効時間設定構造体(ON)     */
extern CMD_AMOF_PARAM   G_CMD_AMOF_PARAM;    /*  侵入警報有効時間設定構造体(OFF)    */
extern CMD_AM_PARAM     G_CMD_AM_PARAM;      /*  侵入警報有効時間設定構造体(曜日)   */
extern CMD_CL_PARAM     G_CMD_CL_PARAM;      /*  エリア設定構造体    */
extern CMD_SD1_PARAM    G_CMD_SD1_PARAM;     /*  サービス診断(WEB管理番号)構造体    */
extern CMD_SD2_PARAM    G_CMD_SD2_PARAM;     /*  サービス診断(サービス診断情報)構造体    */
extern CMD_SD3_PARAM    G_CMD_SD3_PARAM;     /*  サービス診断(応答)構造体    */
extern CMD_AH_PARAM     G_CMD_AH_PARAM;      /*  故障来歴情報構造体    */
extern CMD_PN_PARAM     G_CMD_PN_PARAM;      /*  ﾒｶﾄﾛｺﾝﾄﾛｰﾗﾊﾟｰﾂNo構造体    */
extern CMD_VR_PARAM     G_CMD_VR_PARAM;      /*  ﾒｶﾄﾛｺﾝﾄﾛｰﾗｿﾌﾄVer構造体    */
extern CMD_NP_PARAM     G_CMD_NP_PARAM;      /*  燃費情報構造体    */

extern CMD_T_PARAM			*pG_CMD_T_PARAM;
extern CMD_P_PARAM			*pG_CMD_P_PARAM;
extern CMD_SD2_PARAM		*pG_CMD_SD2_PARAM;
extern CMD_AH_PARAM			*pG_CMD_AH_PARAM;

extern CMD_MC_PARAM     G_CMD_MC_PARAM;
extern CMD_MT_PARAM     G_CMD_MT_PARAM;
extern CMD_SW_PARAM     G_CMD_SW_PARAM;
extern CMD_ADJUST_PARAM G_CMD_EA_PARAM;
extern CMD_ADJUST_PARAM G_CMD_PA_PARAM;
extern CMD_ADJUST_PARAM G_CMD_PB_PARAM;
extern CMD_ADJUST_PARAM G_CMD_PC_PARAM;
extern CMD_ADJUST_PARAM G_CMD_UA_PARAM;
extern CMD_ADJUST_PARAM G_CMD_UB_PARAM;
extern CMD_ST_PARAM     G_CMD_ST_PARAM;
extern CMD_SL_PARAM     G_CMD_SL_PARAM;
extern CMD_TD_PARAM     G_CMD_TD_PARAM;

extern CMD_C20X5_PARAM	G_CMD_HOZEN_PARAM[MAX_HOZEN_PARAM];
extern CMD_C20X5_PARAM  G_CMD_DAILY_EXT_PARAM[MAX_HANYO_PARAM];

extern CMD_C30X1_PARAM  G_CMD_HA_PARAM;
extern CMD_C30X1_PARAM  G_CMD_LK_PARAM;
extern CMD_C30X1_PARAM  G_CMD_YD_PARAM;
extern CMD_C30X1_PARAM  G_CMD_OT_PARAM;
extern CMD_C30X1_PARAM  G_CMD_M_PARAM;
extern CMD_C30X1_PARAM  G_CMD_JH_PARAM;
extern CMD_C30X1_PARAM  G_CMD_JS_PARAM;
extern CMD_C30X1_PARAM  G_CMD_JE_PARAM;
extern CMD_C30X1_PARAM  G_CMD_AB_PARAM;
extern CMD_C30X1_PARAM  G_CMD_SS_PARAM;
extern CMD_C30X1_PARAM  G_CMD_SR_PARAM;
extern CMD_C30X1_PARAM  G_CMD_SG_PARAM;
extern CMD_C30X1_PARAM  G_CMD_SU_PARAM;
extern CMD_C30X1_PARAM  G_CMD_HD_PARAM;
extern CMD_C30X1_PARAM  G_CMD_HQ_PARAM;
extern CMD_C30X10_PARAM G_CMD_HP_PARAM;
extern CMD_C30X1_PARAM  G_CMD_DA_PARAM;
extern CMD_C200X5_PARAM  G_CMD_DG_PARAM;

extern CMD_HANYO_PARAM  G_CMD_HANYO_REC[MAX_HANYO_REC];
extern CMD_HANYO06_PARAM  G_CMD_FDFR_REC[MAX_FDFR_REC];

extern CMD_C30X5_PARAM  G_CMD_LKOK_PARAM;

extern CMD_C30X1_PARAM  G_CMD_AE_REC[MAX_AE_REC];
extern CMD_HANYO06_PARAM G_CMD_AR_REC[MAX_AR_REC];

extern CMD_HANYO06_PARAM G_CMD_RR_REC[MAX_RR_REC];
extern CMD_SSID_PARAM  G_CMD_SSID_PARAM;
extern CMD_C30X10_PARAM G_CMD_KL_REC[MAX_KL_REC];


/* ------------------------------------------------------------------------ */
/*  関数名  :   nighttime_ope                                               */
/*  機能    :   メール種別「夜間バッチ(稼働)」時のDB更新処理を行う          */
/*  関数型  :   int                                                         */
/*  呼出形式:   nighttime_ope()                                             */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int nighttime_ope(){
    #ifdef DEBUG
    printf( "[%s][Line:%04d]「nighttime_ope」START\n", __FUNCTION__,__LINE__ );
    #endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号                */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時        */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名              */
        varchar     latitude[LATITUDE_MAX_LEN + 1];     /*  緯度                    */
        varchar     longitude[LONGITUDE_MAX_LEN + 1];   /*  経度                    */
        varchar     posdate[TIME_MAX_LEN + 1];          /*  位置日時(年月日時分秒)  */
        char  date_t[ENGINE_ON_OF_MAX_COUNT][TIME_MAX_LEN + 1];           /*  ｴﾝｼﾞﾝ始動時間           */
                 EXEC SQL VAR date_t IS STRING;
        char  date_p[ENGINE_ON_OF_MAX_COUNT][TIME_MAX_LEN + 1];           /*  ｴﾝｼﾞﾝ停止時間           */
                 EXEC SQL VAR date_p IS STRING;
        char  hozen_cmd[MAX_HOZEN_PARAM][CONST_C20 + 1];                  /*  予防保全(コマンド)      */
                 EXEC SQL VAR hozen_cmd IS STRING;
        char  hozen_p01[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１)          */
                 EXEC SQL VAR hozen_p01 IS STRING;
        char  hozen_p02[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２)          */
                 EXEC SQL VAR hozen_p02 IS STRING;
        char  hozen_p03[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値３)          */
                 EXEC SQL VAR hozen_p03 IS STRING;
        char  hozen_p04[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値４)          */
                 EXEC SQL VAR hozen_p04 IS STRING;
        char  hozen_p05[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値５)          */
                 EXEC SQL VAR hozen_p05 IS STRING;
        char  hozen_p06[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値６)          */
                 EXEC SQL VAR hozen_p06 IS STRING;
        char  hozen_p07[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値７)          */
                 EXEC SQL VAR hozen_p07 IS STRING;
        char  hozen_p08[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値８)          */
                 EXEC SQL VAR hozen_p08 IS STRING;
        char  hozen_p09[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値９)          */
                 EXEC SQL VAR hozen_p09 IS STRING;
        char  hozen_p10[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１０)          */
                 EXEC SQL VAR hozen_p10 IS STRING;
        char  hozen_p11[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１１)          */
                 EXEC SQL VAR hozen_p11 IS STRING;
        char  hozen_p12[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１２)          */
                 EXEC SQL VAR hozen_p12 IS STRING;
        char  hozen_p13[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１３)          */
                 EXEC SQL VAR hozen_p13 IS STRING;
        char  hozen_p14[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１４)          */
                 EXEC SQL VAR hozen_p14 IS STRING;
        char  hozen_p15[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１５)          */
                 EXEC SQL VAR hozen_p15 IS STRING;
        char  hozen_p16[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１６)          */
                 EXEC SQL VAR hozen_p16 IS STRING;
        char  hozen_p17[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１７)          */
                 EXEC SQL VAR hozen_p17 IS STRING;
        char  hozen_p18[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１８)          */
                 EXEC SQL VAR hozen_p18 IS STRING;
        char  hozen_p19[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１９)          */
                 EXEC SQL VAR hozen_p19 IS STRING;
        char  hozen_p20[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２０)          */
                 EXEC SQL VAR hozen_p20 IS STRING;
        char  hozen_p21[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２１)          */
                 EXEC SQL VAR hozen_p21 IS STRING;
        char  hozen_p22[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２２)          */
                 EXEC SQL VAR hozen_p22 IS STRING;
        char  hozen_p23[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２３)          */
                 EXEC SQL VAR hozen_p23 IS STRING;
        char  hozen_p24[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２４)          */
                 EXEC SQL VAR hozen_p24 IS STRING;
        char  hozen_p25[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２５)          */
                 EXEC SQL VAR hozen_p25 IS STRING;
        char  hozen_p26[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２６)          */
                 EXEC SQL VAR hozen_p26 IS STRING;


        char  hanyo_p00[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値０)          */
                 EXEC SQL VAR hanyo_p00 IS STRING;
        char  hanyo_p01[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値１)          */
                 EXEC SQL VAR hanyo_p01 IS STRING;
        char  hanyo_p02[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値２)          */
                 EXEC SQL VAR hanyo_p02 IS STRING;
        char  hanyo_p03[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値３)          */
                 EXEC SQL VAR hanyo_p03 IS STRING;
        char  hanyo_p04[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値４)          */
                 EXEC SQL VAR hanyo_p04 IS STRING;
        char  hanyo_p05[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値５)          */
                 EXEC SQL VAR hanyo_p05 IS STRING;
        char  hanyo_p06[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値６)          */
                 EXEC SQL VAR hanyo_p06 IS STRING;
        char  hanyo_p07[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値７)          */
                 EXEC SQL VAR hanyo_p07 IS STRING;
        char  hanyo_p08[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値８)          */
                 EXEC SQL VAR hanyo_p08 IS STRING;
        char  hanyo_p09[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値９)          */
                 EXEC SQL VAR hanyo_p09 IS STRING;


        int         idle_h;                             /*  無操作時間              */
        int         running_h;                          /*  走行時間                */
        int         high_r_h;                           /*  ハイリーチ使用時間      */
        int         nb_h;                               /*  N&B使用時間             */
        int         hour_meter;                         /*  受信アワメータ          */
        int         fuel_per;                           /*  燃料残量                */
        int         e_temp_1;                           /*  水温1                   */
        int         e_temp_2;                           /*  水温2                   */
        int         e_temp_3;                           /*  水温3                   */
        int         e_temp_4;                           /*  水温4                   */
        int         pump_p1;                            /*  圧力1                   */
        int         pump_p2;                            /*  圧力2                   */
        int         pump_p3;                            /*  圧力3                   */
        int         pump_p4;                            /*  圧力4                   */
        int         ope_amount;                         /*  ポンプ稼動量             */
        int         area_flg;                           /*  エリア内外フラグ         */
        int         change_h_ec;                        /*  ｴﾝｼﾞﾝｵｲﾙ交換残時間       */
        int         change_h_fc;                        /*  燃料フィルタ交換残時間   */
        int         change_h_hc;                        /*  作動油フィルタ交換残時間 */
        int         change_h_lc;                        /*  作動油交換残時間         */
        int         state_h;                            /*  ｵｰﾊﾞｰﾛｰﾄﾞ状態時間        */
        int         fuel_tmp;                           /*  燃料温度                 */
        int         fuel_dt;                            /*  燃料識別値(30℃換算値)   */
        int         fuel_cons_amount;                   /*  燃料消費量               */
        int         power_on_h;                         /*  稼働時間                 */
        int         chuuki;                             /*  駐機状態                 */
        int         date_t_cnt;                         /*  ｴﾝｼﾞﾝ始動時間件数 */
        int         date_p_cnt;                         /*  ｴﾝｼﾞﾝ停止時間件数 */
        int         hozen_cnt;                          /*  予防保全件数 */
        int         hanyo_cnt;                          /*  拡張稼働情報件数 */
        int         i;
        varchar     itc_serial_no[SERIAL_NO_MAX_LEN + 1];  /*  ITCシリアルNO      */
        varchar     mail_date[TIME_MAX_LEN + 1];        /*  メール日付               */
        short       ind_mail_date;
        int         fuel_cons_h_mode;                   /*  Tier4a:燃料消費量_Hモード */
        int         fuel_cons_s_mode;                   /*  Tier4a:燃料消費量_Sモード */
        int         fuel_cons_e_mode;                   /*  Tier4a:燃料消費量_Eモード */
        int         fuel_pon_h_mode;                    /*  Tier4a:稼働時間_Hモード   */
        int         fuel_pon_s_mode;                    /*  Tier4a:稼働時間_Sモード   */
        int         fuel_pon_e_mode;                    /*  Tier4a:稼働時間_Eモード   */
        int         turning_h;                          /*  旋回操作時間              */
        varchar     dpf_level[2+1];                     /*  DPF目詰まりレベル         */
        varchar     td_value[5+1];                      /*  時差設定                  */
    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( latitude.arr, G_CMD_POS_PARAM.latitude);
    latitude.len = strlen(G_CMD_POS_PARAM.latitude);

    strcpy( longitude.arr, G_CMD_POS_PARAM.longitude);
    longitude.len = strlen(G_CMD_POS_PARAM.longitude);

    strcpy( posdate.arr, G_CMD_POS_PARAM.hh24middmm);
    posdate.len = strlen(G_CMD_POS_PARAM.hh24middmm);
    
    memset(date_t,0x00,ENGINE_ON_OF_MAX_COUNT * (TIME_MAX_LEN + 1));
    date_t_cnt = 0;
    if(NULL != pG_CMD_T_PARAM){
        CMD_T_PARAM *cur = NULL;
        
        cur = pG_CMD_T_PARAM;
        for(;;){
            strcpy(date_t[date_t_cnt],cur->yymmddhh24mi);
            date_t_cnt ++;
            if(NULL == cur->next){
                break;
            }
            cur = cur->next;
        }
    }

    memset(date_p,0x00,ENGINE_ON_OF_MAX_COUNT * (TIME_MAX_LEN + 1));
    date_p_cnt = 0;
    if(NULL != pG_CMD_P_PARAM){
        CMD_P_PARAM *cur = NULL;
        
        cur = pG_CMD_P_PARAM;
        for(;;){
            strcpy(date_p[date_p_cnt],cur->yymmddhh24mi);
            date_p_cnt ++;
            if(NULL == cur->next){
                break;
            }
            cur = cur->next;
        }
    }

    memset(hozen_cmd,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p01,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p02,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p03,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p04,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p05,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p06,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p07,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p08,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p09,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p10,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p11,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p12,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p13,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p14,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p15,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p16,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p17,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p18,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p19,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p20,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p21,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p22,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p23,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p24,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p25,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p26,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    hozen_cnt = G_CMD_HOZEN_PARAM[0].count;
    for(i=0;i<hozen_cnt;i++){
        CMD_C20X5_PARAM *cur = &G_CMD_HOZEN_PARAM[i];
        strcpy(hozen_cmd[i]  ,cur->value00);
        strcpy(hozen_p01[i]  ,cur->value01);
        strcpy(hozen_p02[i]  ,cur->value02);
        strcpy(hozen_p03[i]  ,cur->value03);
        strcpy(hozen_p04[i]  ,cur->value04);
        strcpy(hozen_p05[i]  ,cur->value05);
        strcpy(hozen_p06[i]  ,cur->value06);
        strcpy(hozen_p07[i]  ,cur->value07);
        strcpy(hozen_p08[i]  ,cur->value08);
        strcpy(hozen_p09[i]  ,cur->value09);
        strcpy(hozen_p10[i]  ,cur->value10);
        strcpy(hozen_p11[i]  ,cur->value11);
        strcpy(hozen_p12[i]  ,cur->value12);
        strcpy(hozen_p13[i]  ,cur->value13);
        strcpy(hozen_p14[i]  ,cur->value14);
        strcpy(hozen_p15[i]  ,cur->value15);
        strcpy(hozen_p16[i]  ,cur->value16);
        strcpy(hozen_p17[i]  ,cur->value17);
        strcpy(hozen_p18[i]  ,cur->value18);
        strcpy(hozen_p19[i]  ,cur->value19);
        strcpy(hozen_p20[i]  ,cur->value20);
        strcpy(hozen_p21[i]  ,cur->value21);
        strcpy(hozen_p22[i]  ,cur->value22);
        strcpy(hozen_p23[i]  ,cur->value23);
        strcpy(hozen_p24[i]  ,cur->value24);
        strcpy(hozen_p25[i]  ,cur->value25);
        strcpy(hozen_p26[i]  ,cur->value26);
    }

    memset(hanyo_p00,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p01,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p02,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p03,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p04,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p05,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p06,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p07,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p08,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p09,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    hanyo_cnt = G_CMD_DAILY_EXT_PARAM[0].count;
    for(i=0;i<hanyo_cnt;i++){
        CMD_C20X5_PARAM *cur = &G_CMD_DAILY_EXT_PARAM[i];
        strcpy(hanyo_p00[i]  ,cur->value00);
        strcpy(hanyo_p01[i]  ,cur->value01);
        strcpy(hanyo_p02[i]  ,cur->value02);
        strcpy(hanyo_p03[i]  ,cur->value03);
        strcpy(hanyo_p04[i]  ,cur->value04);
        strcpy(hanyo_p05[i]  ,cur->value05);
        strcpy(hanyo_p06[i]  ,cur->value06);
        strcpy(hanyo_p07[i]  ,cur->value07);
        strcpy(hanyo_p08[i]  ,cur->value08);
        strcpy(hanyo_p09[i]  ,cur->value09);
    }



    idle_h = G_CMD_I_PARAM.idle_h;
    running_h = G_CMD_R_PARAM.running_h;
    high_r_h = G_CMD_C_PARAM.high_r_h;
    nb_h = G_CMD_N_PARAM.nb_h;
    hour_meter = G_CMD_H_PARAM.power_on_h;
    fuel_per = G_CMD_F_PARAM.fuel_per;
    e_temp_1 = G_CMD_W_PARAM.e_temp_1;
    e_temp_2 = G_CMD_W_PARAM.e_temp_2;
    e_temp_3 = G_CMD_W_PARAM.e_temp_3;
    e_temp_4 = G_CMD_W_PARAM.e_temp_4;
    pump_p1 = G_CMD_U_PARAM.pump_p1;
    pump_p2 = G_CMD_U_PARAM.pump_p2;
    pump_p3 = G_CMD_U_PARAM.pump_p3;
    pump_p4 = G_CMD_U_PARAM.pump_p4;
    ope_amount = G_CMD_J_PARAM.ope_amount;
    area_flg = G_CMD_A_PARAM.area_flg;
    change_h_ec = G_CMD_EC_PARAM.change_h;
    change_h_fc = G_CMD_FC_PARAM.change_h;
    change_h_hc = G_CMD_HC_PARAM.change_h;
    change_h_lc = G_CMD_LC_PARAM.change_h;
    state_h = G_CMD_OV_PARAM.state_h;
    fuel_tmp = G_CMD_FT_PARAM.fuel_tmp;
    fuel_dt = G_CMD_FS_PARAM.fuel_dt;
    fuel_cons_amount = G_CMD_NP_PARAM.fuel_cons_amount;
    power_on_h = G_CMD_NP_PARAM.power_on_h;
    chuuki = G_CMD_POS_PARAM.chuuki;


    /*  Tier4a:燃料消費量_Hモード */
    fuel_cons_h_mode = G_CMD_MC_PARAM.fuel_cons_h_mode;
    /*  Tier4a:燃料消費量_Sモード */
    fuel_cons_s_mode = G_CMD_MC_PARAM.fuel_cons_s_mode;
    /*  Tier4a:燃料消費量_Eモード */
    fuel_cons_e_mode = G_CMD_MC_PARAM.fuel_cons_e_mode;
    /*  Tier4a:稼働時間_Hモード   */
    fuel_pon_h_mode = G_CMD_MT_PARAM.fuel_pon_h_mode;
    /*  Tier4a:稼働時間_Sモード   */
    fuel_pon_s_mode = G_CMD_MT_PARAM.fuel_pon_s_mode;
    /*  Tier4a:稼働時間_Eモード   */
    fuel_pon_e_mode = G_CMD_MT_PARAM.fuel_pon_e_mode;
    /*  旋回操作時間              */
    turning_h = G_CMD_SW_PARAM.turning_h;
    /*  DPF目詰まりレベル         */
    vcstrncpy( &dpf_level, G_CMD_SL_PARAM.dpf_level,2);
    /*  時差                      */
    vcstrncpy( &td_value, G_CMD_TD_PARAM.td_value,5);

    strcpy( itc_serial_no.arr, G_CMD_COM_PARAM.itc_serial_no);
    itc_serial_no.len = strlen(G_CMD_COM_PARAM.itc_serial_no);

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [NIGHTTIME_OPE] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,equip_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,latitude.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,longitude.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,posdate.arr);
for(i=0;i<date_t_cnt;i++){
	printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,date_t[i]);
}
for(i=0;i<date_p_cnt;i++){
	printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,date_p[i]);
}
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,idle_h);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,running_h);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,high_r_h);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,nb_h);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,hour_meter);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,fuel_per);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,e_temp_1);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,e_temp_2);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,e_temp_3);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,e_temp_4);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,pump_p1);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,pump_p2);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,pump_p3);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,pump_p4);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,ope_amount);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,area_flg);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,change_h_ec);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,change_h_fc);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,change_h_hc);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,change_h_lc);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,state_h);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,fuel_tmp);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,fuel_dt);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,fuel_cons_amount);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,power_on_h);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,chuuki);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,date_t_cnt);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,date_p_cnt);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,itc_serial_no.arr);
printf( "[%s][Line:%04d]T4a_Param[%d]\n", __FUNCTION__,__LINE__ ,fuel_cons_h_mode);
printf( "[%s][Line:%04d]T4a_Param[%d]\n", __FUNCTION__,__LINE__ ,fuel_cons_s_mode);
printf( "[%s][Line:%04d]T4a_Param[%d]\n", __FUNCTION__,__LINE__ ,fuel_cons_e_mode);
printf( "[%s][Line:%04d]T4a_Param[%d]\n", __FUNCTION__,__LINE__ ,fuel_pon_h_mode);
printf( "[%s][Line:%04d]T4a_Param[%d]\n", __FUNCTION__,__LINE__ ,fuel_pon_s_mode);
printf( "[%s][Line:%04d]T4a_Param[%d]\n", __FUNCTION__,__LINE__ ,fuel_pon_e_mode);
printf( "[%s][Line:%04d]T4a_Param[%d]\n", __FUNCTION__,__LINE__ ,turning_h);
printf( "[%s][Line:%04d]DPF[%s]\n", __FUNCTION__,__LINE__ ,dpf_level.arr);
printf( "[%s][Line:%04d]TD[%s]\n", __FUNCTION__,__LINE__ ,td_value.arr);



printf( "[%s][Line:%04d]hozen_cnt[%d]\n", __FUNCTION__,__LINE__ ,hozen_cnt);
printf( "[%s][Line:%04d]hozen_cmd[i] = [%s]\n", __FUNCTION__,__LINE__ ,hozen_cmd[0]);
printf( "[%s][Line:%04d]hozen_p01[i] = [%s]\n", __FUNCTION__,__LINE__ ,hozen_p01[0]);
printf( "[%s][Line:%04d]hozen_p02[i] = [%s]\n", __FUNCTION__,__LINE__ ,hozen_p02[0]);
printf( "[%s][Line:%04d]hozen_p03[i] = [%s]\n", __FUNCTION__,__LINE__ ,hozen_p03[0]);
printf( "[%s][Line:%04d]hozen_p04[i] = [%s]\n", __FUNCTION__,__LINE__ ,hozen_p04[0]);



#endif

    /*  PL/SQL処理実行  */
    mail_date.len = 0;
    mail_date.arr[mail_date.len] = 0x00;
    mail_date.len = 0;
    mail_date.arr[mail_date.len] = 0x00;
    ind_mail_date = 0;
    EXEC SQL EXECUTE
        BEGIN
        
            ITC.UPD_NOW_TD(:itc_serial_no,:td_value);
        
            ITC.NIGHTTIME_OPE(:equip_no,:sysdate,:proc,:latitude,:longitude,
                :posdate,:date_t,:date_p,:idle_h,:running_h,:high_r_h,:nb_h,
                :hour_meter,:fuel_per,:e_temp_1,:e_temp_2,:e_temp_3,:e_temp_4,
                :pump_p1,:pump_p2,:pump_p3,:pump_p4,:ope_amount,:area_flg,:change_h_ec,
                :change_h_fc,:change_h_hc,:change_h_lc,:state_h,:fuel_tmp,:fuel_dt,
                :fuel_cons_amount,:power_on_h,:chuuki,:date_t_cnt,:date_p_cnt,:itc_serial_no
                
                ,:fuel_cons_h_mode,:fuel_cons_s_mode,:fuel_cons_e_mode
                ,:fuel_pon_h_mode,:fuel_pon_s_mode,:fuel_pon_e_mode
                ,:turning_h
                ,:dpf_level
                ,:hozen_cnt
                ,:hozen_cmd
                ,:hozen_p01
                ,:hozen_p02
                ,:hozen_p03
                ,:hozen_p04
                ,:hozen_p05
                ,:hozen_p06
                ,:hozen_p07
                ,:hozen_p08
                ,:hozen_p09
                ,:hozen_p10
                ,:hozen_p11
                ,:hozen_p12
                ,:hozen_p13
                ,:hozen_p14
                ,:hozen_p15
                ,:hozen_p16
                ,:hozen_p17
                ,:hozen_p18
                ,:hozen_p19
                ,:hozen_p20
                ,:hozen_p21
                ,:hozen_p22
                ,:hozen_p23
                ,:hozen_p24
                ,:hozen_p25
                ,:hozen_p26

                ,:hanyo_cnt
                ,:hanyo_p00
                ,:hanyo_p01
                ,:hanyo_p02
                ,:hanyo_p03
                ,:hanyo_p04
                ,:hanyo_p05
                ,:hanyo_p06
                ,:hanyo_p07
                ,:hanyo_p08
                ,:hanyo_p09

                ,:mail_date:ind_mail_date
            );

        END;
    END-EXEC;

    mail_date.arr[mail_date.len] = 0x00;
    strcpy( G_CMD_COM_PARAM.mail_date, mail_date.arr );

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [NIGHTTIME_OPE] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   nighttime_non_ope                                           */
/*  機能    :   メール種別「夜間バッチ(非稼働)」時のDB更新処理を行う        */
/*  関数型  :   int                                                         */
/*  呼出形式:   nighttime_non_ope()                                         */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2011.06.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int nighttime_non_ope(){
	#ifdef DEBUG
	printf( "[%s][Line:%04d]「nighttime_non_ope」START\n", __FUNCTION__,__LINE__ );
	#endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;
    int     i;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号                */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時        */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名              */
        varchar     latitude[LATITUDE_MAX_LEN + 1];     /*  緯度                    */
        varchar     longitude[LONGITUDE_MAX_LEN + 1];   /*  経度                    */
        varchar     posdate[TIME_MAX_LEN + 1];          /*  位置日時(年月日時分秒)  */
        int         area_flg;                           /*  エリア内外フラグ        */
        varchar     itc_serial_no[SERIAL_NO_MAX_LEN + 1];  /*  ITCシリアルNO      */
        varchar     mail_date[TIME_MAX_LEN + 1];        /*  メール日付               */
        short       ind_mail_date;
        varchar     td_value[5+1];                      /*  時差設定                  */

        int         hanyo_cnt;                          /*  拡張稼働情報件数 */
        char  hanyo_p00[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値０)          */
                 EXEC SQL VAR hanyo_p00 IS STRING;
        char  hanyo_p01[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値１)          */
                 EXEC SQL VAR hanyo_p01 IS STRING;
        char  hanyo_p02[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値２)          */
                 EXEC SQL VAR hanyo_p02 IS STRING;
        char  hanyo_p03[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値３)          */
                 EXEC SQL VAR hanyo_p03 IS STRING;
        char  hanyo_p04[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値４)          */
                 EXEC SQL VAR hanyo_p04 IS STRING;
        char  hanyo_p05[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値５)          */
                 EXEC SQL VAR hanyo_p05 IS STRING;
        char  hanyo_p06[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値６)          */
                 EXEC SQL VAR hanyo_p06 IS STRING;
        char  hanyo_p07[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値７)          */
                 EXEC SQL VAR hanyo_p07 IS STRING;
        char  hanyo_p08[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値８)          */
                 EXEC SQL VAR hanyo_p08 IS STRING;
        char  hanyo_p09[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値９)          */
                 EXEC SQL VAR hanyo_p09 IS STRING;

        int         hozen_cnt;                          /*  予防保全件数 */
        char  hozen_cmd[MAX_HOZEN_PARAM][CONST_C20 + 1];                  /*  予防保全(コマンド)      */
                 EXEC SQL VAR hozen_cmd IS STRING;
        char  hozen_p01[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１)          */
                 EXEC SQL VAR hozen_p01 IS STRING;
        char  hozen_p02[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２)          */
                 EXEC SQL VAR hozen_p02 IS STRING;
        char  hozen_p03[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値３)          */
                 EXEC SQL VAR hozen_p03 IS STRING;
        char  hozen_p04[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値４)          */
                 EXEC SQL VAR hozen_p04 IS STRING;
        char  hozen_p05[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値５)          */
                 EXEC SQL VAR hozen_p05 IS STRING;
        char  hozen_p06[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値６)          */
                 EXEC SQL VAR hozen_p06 IS STRING;
        char  hozen_p07[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値７)          */
                 EXEC SQL VAR hozen_p07 IS STRING;
        char  hozen_p08[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値８)          */
                 EXEC SQL VAR hozen_p08 IS STRING;
        char  hozen_p09[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値９)          */
                 EXEC SQL VAR hozen_p09 IS STRING;
        char  hozen_p10[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１０)          */
                 EXEC SQL VAR hozen_p10 IS STRING;
        char  hozen_p11[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１１)          */
                 EXEC SQL VAR hozen_p11 IS STRING;
        char  hozen_p12[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１２)          */
                 EXEC SQL VAR hozen_p12 IS STRING;
        char  hozen_p13[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１３)          */
                 EXEC SQL VAR hozen_p13 IS STRING;
        char  hozen_p14[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１４)          */
                 EXEC SQL VAR hozen_p14 IS STRING;
        char  hozen_p15[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１５)          */
                 EXEC SQL VAR hozen_p15 IS STRING;
        char  hozen_p16[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１６)          */
                 EXEC SQL VAR hozen_p16 IS STRING;
        char  hozen_p17[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１７)          */
                 EXEC SQL VAR hozen_p17 IS STRING;
        char  hozen_p18[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１８)          */
                 EXEC SQL VAR hozen_p18 IS STRING;
        char  hozen_p19[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１９)          */
                 EXEC SQL VAR hozen_p19 IS STRING;
        char  hozen_p20[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２０)          */
                 EXEC SQL VAR hozen_p20 IS STRING;
        char  hozen_p21[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２１)          */
                 EXEC SQL VAR hozen_p21 IS STRING;
        char  hozen_p22[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２２)          */
                 EXEC SQL VAR hozen_p22 IS STRING;
        char  hozen_p23[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２３)          */
                 EXEC SQL VAR hozen_p23 IS STRING;
        char  hozen_p24[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２４)          */
                 EXEC SQL VAR hozen_p24 IS STRING;
        char  hozen_p25[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２５)          */
                 EXEC SQL VAR hozen_p25 IS STRING;
        char  hozen_p26[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２６)          */
                 EXEC SQL VAR hozen_p26 IS STRING;

    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( latitude.arr, G_CMD_POS_PARAM.latitude);
    latitude.len = strlen(G_CMD_POS_PARAM.latitude);

    strcpy( longitude.arr, G_CMD_POS_PARAM.longitude);
    longitude.len = strlen(G_CMD_POS_PARAM.longitude);

    strcpy( posdate.arr, G_CMD_POS_PARAM.hh24middmm);
    posdate.len = strlen(G_CMD_POS_PARAM.hh24middmm);

    area_flg = G_CMD_A_PARAM.area_flg;
    /*  時差                      */
    vcstrncpy( &td_value, G_CMD_TD_PARAM.td_value,5);

    strcpy( itc_serial_no.arr, G_CMD_COM_PARAM.itc_serial_no);
    itc_serial_no.len = strlen(G_CMD_COM_PARAM.itc_serial_no);

    memset(hanyo_p00,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p01,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p02,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p03,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p04,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p05,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p06,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p07,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p08,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p09,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    hanyo_cnt = G_CMD_DAILY_EXT_PARAM[0].count;
    for(i=0;i<hanyo_cnt;i++){
        CMD_C20X5_PARAM *cur = &G_CMD_DAILY_EXT_PARAM[i];
        strcpy(hanyo_p00[i]  ,cur->value00);
        strcpy(hanyo_p01[i]  ,cur->value01);
        strcpy(hanyo_p02[i]  ,cur->value02);
        strcpy(hanyo_p03[i]  ,cur->value03);
        strcpy(hanyo_p04[i]  ,cur->value04);
        strcpy(hanyo_p05[i]  ,cur->value05);
        strcpy(hanyo_p06[i]  ,cur->value06);
        strcpy(hanyo_p07[i]  ,cur->value07);
        strcpy(hanyo_p08[i]  ,cur->value08);
        strcpy(hanyo_p09[i]  ,cur->value09);
    }

    memset(hozen_cmd,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p01,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p02,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p03,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p04,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p05,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p06,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p07,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p08,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p09,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p10,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p11,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p12,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p13,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p14,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p15,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p16,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p17,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p18,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p19,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p20,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p21,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p22,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p23,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p24,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p25,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p26,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    hozen_cnt = G_CMD_HOZEN_PARAM[0].count;
    for(i=0;i<hozen_cnt;i++){
        CMD_C20X5_PARAM *cur = &G_CMD_HOZEN_PARAM[i];
        strcpy(hozen_cmd[i]  ,cur->value00);
        strcpy(hozen_p01[i]  ,cur->value01);
        strcpy(hozen_p02[i]  ,cur->value02);
        strcpy(hozen_p03[i]  ,cur->value03);
        strcpy(hozen_p04[i]  ,cur->value04);
        strcpy(hozen_p05[i]  ,cur->value05);
        strcpy(hozen_p06[i]  ,cur->value06);
        strcpy(hozen_p07[i]  ,cur->value07);
        strcpy(hozen_p08[i]  ,cur->value08);
        strcpy(hozen_p09[i]  ,cur->value09);
        strcpy(hozen_p10[i]  ,cur->value10);
        strcpy(hozen_p11[i]  ,cur->value11);
        strcpy(hozen_p12[i]  ,cur->value12);
        strcpy(hozen_p13[i]  ,cur->value13);
        strcpy(hozen_p14[i]  ,cur->value14);
        strcpy(hozen_p15[i]  ,cur->value15);
        strcpy(hozen_p16[i]  ,cur->value16);
        strcpy(hozen_p17[i]  ,cur->value17);
        strcpy(hozen_p18[i]  ,cur->value18);
        strcpy(hozen_p19[i]  ,cur->value19);
        strcpy(hozen_p20[i]  ,cur->value20);
        strcpy(hozen_p21[i]  ,cur->value21);
        strcpy(hozen_p22[i]  ,cur->value22);
        strcpy(hozen_p23[i]  ,cur->value23);
        strcpy(hozen_p24[i]  ,cur->value24);
        strcpy(hozen_p25[i]  ,cur->value25);
        strcpy(hozen_p26[i]  ,cur->value26);
    }

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [NIGHTTIME_NON_OPE] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,equip_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,latitude.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,longitude.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,posdate.arr);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,area_flg);
printf( "[%s][Line:%04d]TD[%s]\n", __FUNCTION__,__LINE__ ,td_value.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,itc_serial_no.arr);
#endif

    mail_date.len = 0;
    mail_date.arr[mail_date.len] = 0x00;
    ind_mail_date = 0;
    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
        
            ITC.UPD_NOW_TD(:itc_serial_no,:td_value);

            ITC.NIGHTTIME_NON_OPE(:equip_no, :sysdate, :proc, 
                    :latitude, :longitude, :posdate, :area_flg, :itc_serial_no
                    
				,:hozen_cnt
				,:hozen_cmd
				,:hozen_p01
				,:hozen_p02
				,:hozen_p03
				,:hozen_p04
				,:hozen_p05
				,:hozen_p06
				,:hozen_p07
				,:hozen_p08
				,:hozen_p09
				,:hozen_p10
				,:hozen_p11
				,:hozen_p12
				,:hozen_p13
				,:hozen_p14
				,:hozen_p15
				,:hozen_p16
				,:hozen_p17
				,:hozen_p18
				,:hozen_p19
				,:hozen_p20
				,:hozen_p21
				,:hozen_p22
				,:hozen_p23
				,:hozen_p24
				,:hozen_p25
				,:hozen_p26

                  ,:hanyo_cnt
                  ,:hanyo_p00
                  ,:hanyo_p01
                  ,:hanyo_p02
                  ,:hanyo_p03
                  ,:hanyo_p04
                  ,:hanyo_p05
                  ,:hanyo_p06
                  ,:hanyo_p07
                  ,:hanyo_p08
                  ,:hanyo_p09
                  , :mail_date:ind_mail_date);
        END;
    END-EXEC;   

    mail_date.arr[mail_date.len] = 0x00;
    strcpy( G_CMD_COM_PARAM.mail_date, mail_date.arr );

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [NIGHTTIME_NON_OPE] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   nighttime_exception                                         */
/*  機能    :   メール種別「夜間バッチ(例外)」時のDB更新処理を行う          */
/*  関数型  :   int                                                         */
/*  呼出形式:   nighttime_exception()                                       */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2011.07.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int nighttime_exception(){
    #ifdef DEBUG
    printf( "[%s][Line:%04d]「nighttime_exception」START\n", __FUNCTION__,__LINE__ );
    #endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号                */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時        */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名              */
        varchar     latitude[LATITUDE_MAX_LEN + 1];     /*  緯度                    */
        varchar     longitude[LONGITUDE_MAX_LEN + 1];   /*  経度                    */
        varchar     posdate[TIME_MAX_LEN + 1];          /*  位置日時(年月日時分秒)  */
        char  date_t[ENGINE_ON_OF_MAX_COUNT][TIME_MAX_LEN + 1];           /*  ｴﾝｼﾞﾝ始動時間           */
                 EXEC SQL VAR date_t IS STRING;
        char  date_p[ENGINE_ON_OF_MAX_COUNT][TIME_MAX_LEN + 1];           /*  ｴﾝｼﾞﾝ停止時間           */
                 EXEC SQL VAR date_p IS STRING;
        int         date_t_cnt;                         /*  ｴﾝｼﾞﾝ始動時間件数 */
        int         date_p_cnt;                         /*  ｴﾝｼﾞﾝ停止時間件数 */
        int         i;
        varchar     itc_serial_no[SERIAL_NO_MAX_LEN + 1];  /*  ITCシリアルNO      */
        varchar     mail_date[TIME_MAX_LEN + 1];        /*  メール日付               */
        short       ind_mail_date;

        int         hanyo_cnt;                          /*  拡張稼働情報件数 */
        char  hanyo_p00[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値０)          */
                 EXEC SQL VAR hanyo_p00 IS STRING;
        char  hanyo_p01[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値１)          */
                 EXEC SQL VAR hanyo_p01 IS STRING;
        char  hanyo_p02[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値２)          */
                 EXEC SQL VAR hanyo_p02 IS STRING;
        char  hanyo_p03[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値３)          */
                 EXEC SQL VAR hanyo_p03 IS STRING;
        char  hanyo_p04[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値４)          */
                 EXEC SQL VAR hanyo_p04 IS STRING;
        char  hanyo_p05[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値５)          */
                 EXEC SQL VAR hanyo_p05 IS STRING;
        char  hanyo_p06[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値６)          */
                 EXEC SQL VAR hanyo_p06 IS STRING;
        char  hanyo_p07[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値７)          */
                 EXEC SQL VAR hanyo_p07 IS STRING;
        char  hanyo_p08[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値８)          */
                 EXEC SQL VAR hanyo_p08 IS STRING;
        char  hanyo_p09[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値９)          */
                 EXEC SQL VAR hanyo_p09 IS STRING;

    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( latitude.arr, G_CMD_POS_PARAM.latitude);
    latitude.len = strlen(G_CMD_POS_PARAM.latitude);

    strcpy( longitude.arr, G_CMD_POS_PARAM.longitude);
    longitude.len = strlen(G_CMD_POS_PARAM.longitude);

    strcpy( posdate.arr, G_CMD_POS_PARAM.hh24middmm);
    posdate.len = strlen(G_CMD_POS_PARAM.hh24middmm);

    memset(date_t,0x00,ENGINE_ON_OF_MAX_COUNT * (TIME_MAX_LEN + 1));
    date_t_cnt = 0;
    if(NULL != pG_CMD_T_PARAM){
        CMD_T_PARAM *cur = NULL;
        
        cur = pG_CMD_T_PARAM;
        for(;;){
            strcpy(date_t[date_t_cnt],cur->yymmddhh24mi);
            date_t_cnt ++;
            if(NULL == cur->next){
                break;
            }
            cur = cur->next;
        }
    }

    memset(date_p,0x00,ENGINE_ON_OF_MAX_COUNT * (TIME_MAX_LEN + 1));
    date_p_cnt = 0;
    if(NULL != pG_CMD_P_PARAM){
        CMD_P_PARAM *cur = NULL;
        
        cur = pG_CMD_P_PARAM;
        for(;;){
            strcpy(date_p[date_p_cnt],cur->yymmddhh24mi);
            date_p_cnt ++;
            if(NULL == cur->next){
                break;
            }
            cur = cur->next;
        }
    }

    strcpy( itc_serial_no.arr, G_CMD_COM_PARAM.itc_serial_no);
    itc_serial_no.len = strlen(G_CMD_COM_PARAM.itc_serial_no);


    memset(hanyo_p00,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p01,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p02,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p03,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p04,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p05,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p06,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p07,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p08,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p09,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    hanyo_cnt = G_CMD_DAILY_EXT_PARAM[0].count;
    for(i=0;i<hanyo_cnt;i++){
        CMD_C20X5_PARAM *cur = &G_CMD_DAILY_EXT_PARAM[i];
        strcpy(hanyo_p00[i]  ,cur->value00);
        strcpy(hanyo_p01[i]  ,cur->value01);
        strcpy(hanyo_p02[i]  ,cur->value02);
        strcpy(hanyo_p03[i]  ,cur->value03);
        strcpy(hanyo_p04[i]  ,cur->value04);
        strcpy(hanyo_p05[i]  ,cur->value05);
        strcpy(hanyo_p06[i]  ,cur->value06);
        strcpy(hanyo_p07[i]  ,cur->value07);
        strcpy(hanyo_p08[i]  ,cur->value08);
        strcpy(hanyo_p09[i]  ,cur->value09);
    }

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [NIGHTTIME_EXCEPTION] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,equip_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,latitude.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,longitude.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,posdate.arr);
for(i=0;i<date_t_cnt;i++){
    printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,date_t[i]);
}
for(i=0;i<date_p_cnt;i++){
    printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,date_p[i]);
}
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,date_t_cnt);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,date_p_cnt);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,itc_serial_no.arr);
#endif

    mail_date.len = 0;
    mail_date.arr[mail_date.len] = 0x00;
    ind_mail_date = 0;
    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
            ITC.NIGHTTIME_EXCEPTION(:equip_no,:sysdate,:proc,:latitude,:longitude,
                :posdate,:date_t,:date_p,:date_t_cnt,:date_p_cnt,:itc_serial_no
              ,:hanyo_cnt
              ,:hanyo_p00
              ,:hanyo_p01
              ,:hanyo_p02
              ,:hanyo_p03
              ,:hanyo_p04
              ,:hanyo_p05
              ,:hanyo_p06
              ,:hanyo_p07
              ,:hanyo_p08
              ,:hanyo_p09
              , :mail_date:ind_mail_date);

        END;
    END-EXEC;

    mail_date.arr[mail_date.len] = 0x00;
    strcpy( G_CMD_COM_PARAM.mail_date, mail_date.arr );

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [NIGHTTIME_EXCEPTION] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   daytime                                                     */
/*  機能    :   メール種別「昼バッチ」時のDB更新処理を行う                  */
/*  関数型  :   int                                                         */
/*  呼出形式:   daytime()                                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2011.06.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int daytime(){
    
    #ifdef DEBUG
    printf( "[%s][Line:%04d]「daytime」START\n", __FUNCTION__,__LINE__ );
    #endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;
    int     i;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号                */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時        */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名              */
        varchar     latitude[LATITUDE_MAX_LEN + 1];     /*  緯度                    */
        varchar     longitude[LONGITUDE_MAX_LEN + 1];   /*  経度                    */
        varchar     posdate[TIME_MAX_LEN + 1];          /*  位置日時(年月日時分秒)  */
        int         fuel_per;                           /*  燃料残量                */
        varchar     itc_serial_no[SERIAL_NO_MAX_LEN + 1];  /*  ITCシリアルNO      */
        varchar     mail_date[TIME_MAX_LEN + 1];        /*  メール日付               */
        short       ind_mail_date;

        int         hanyo_cnt;                          /*  拡張稼働情報件数 */
        char  hanyo_p00[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値０)          */
                 EXEC SQL VAR hanyo_p00 IS STRING;
        char  hanyo_p01[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値１)          */
                 EXEC SQL VAR hanyo_p01 IS STRING;
        char  hanyo_p02[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値２)          */
                 EXEC SQL VAR hanyo_p02 IS STRING;
        char  hanyo_p03[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値３)          */
                 EXEC SQL VAR hanyo_p03 IS STRING;
        char  hanyo_p04[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値４)          */
                 EXEC SQL VAR hanyo_p04 IS STRING;
        char  hanyo_p05[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値５)          */
                 EXEC SQL VAR hanyo_p05 IS STRING;
        char  hanyo_p06[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値６)          */
                 EXEC SQL VAR hanyo_p06 IS STRING;
        char  hanyo_p07[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値７)          */
                 EXEC SQL VAR hanyo_p07 IS STRING;
        char  hanyo_p08[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値８)          */
                 EXEC SQL VAR hanyo_p08 IS STRING;
        char  hanyo_p09[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値９)          */
                 EXEC SQL VAR hanyo_p09 IS STRING;


    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( latitude.arr, G_CMD_POS_PARAM.latitude);
    latitude.len = strlen(G_CMD_POS_PARAM.latitude);

    strcpy( longitude.arr, G_CMD_POS_PARAM.longitude);
    longitude.len = strlen(G_CMD_POS_PARAM.longitude);

    strcpy( posdate.arr, G_CMD_POS_PARAM.hh24middmm);
    posdate.len = strlen(G_CMD_POS_PARAM.hh24middmm);

    fuel_per = G_CMD_F_PARAM.fuel_per;

    strcpy( itc_serial_no.arr, G_CMD_COM_PARAM.itc_serial_no);
    itc_serial_no.len = strlen(G_CMD_COM_PARAM.itc_serial_no);

    memset(hanyo_p00,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p01,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p02,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p03,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p04,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p05,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p06,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p07,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p08,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p09,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    hanyo_cnt = G_CMD_DAILY_EXT_PARAM[0].count;
    for(i=0;i<hanyo_cnt;i++){
        CMD_C20X5_PARAM *cur = &G_CMD_DAILY_EXT_PARAM[i];
        strcpy(hanyo_p00[i]  ,cur->value00);
        strcpy(hanyo_p01[i]  ,cur->value01);
        strcpy(hanyo_p02[i]  ,cur->value02);
        strcpy(hanyo_p03[i]  ,cur->value03);
        strcpy(hanyo_p04[i]  ,cur->value04);
        strcpy(hanyo_p05[i]  ,cur->value05);
        strcpy(hanyo_p06[i]  ,cur->value06);
        strcpy(hanyo_p07[i]  ,cur->value07);
        strcpy(hanyo_p08[i]  ,cur->value08);
        strcpy(hanyo_p09[i]  ,cur->value09);
    }

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [DAYTIME] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,equip_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,latitude.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,longitude.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,posdate.arr);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,fuel_per);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,itc_serial_no.arr);
#endif

    mail_date.len = 0;
    mail_date.arr[mail_date.len] = 0x00;
    ind_mail_date = 0;
    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
            ITC.DAYTIME(:equip_no, :sysdate, :proc, 
                    :latitude, :longitude, :posdate, :fuel_per, :itc_serial_no
                   ,:hanyo_cnt
                   ,:hanyo_p00
                   ,:hanyo_p01
                   ,:hanyo_p02
                   ,:hanyo_p03
                   ,:hanyo_p04
                   ,:hanyo_p05
                   ,:hanyo_p06
                   ,:hanyo_p07
                   ,:hanyo_p08
                   ,:hanyo_p09
                   , :mail_date:ind_mail_date
            );
        END;
    END-EXEC;

    mail_date.arr[mail_date.len] = 0x00;
    strcpy( G_CMD_COM_PARAM.mail_date, mail_date.arr );

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [DAYTIME] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   res_machine_state                                           */
/*  機能    :   メール種別「機械状態問合せ(応答)」時のDB更新処理を行う      */
/*  関数型  :   int                                                         */
/*  呼出形式:   res_machine_state()                                         */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2011.06.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int res_machine_state(){
	
	#ifdef DEBUG
	printf( "[%s][Line:%04d]「res_machine_state」START\n", __FUNCTION__,__LINE__ );
	#endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号                */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時        */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名              */
        varchar     latitude[LATITUDE_MAX_LEN + 1];     /*  緯度                    */
        varchar     longitude[LONGITUDE_MAX_LEN + 1];   /*  経度                    */
        varchar     posdate[TIME_MAX_LEN + 1];          /*  位置日時(年月日時分秒)  */
        varchar     engine_state[EGN_STA_MAX_LEN + 1];  /*  エンジン状態            */
        int         fuel_per;                           /*  燃料残量                */
        int         fuel_tmp;                           /*  燃料温度                */
        int         fuel_dt;                            /*  燃料識別値(30℃換算値)  */
        varchar     itc_serial_no[SERIAL_NO_MAX_LEN + 1];  /*  ITCシリアルNO      */
        varchar     mail_date[TIME_MAX_LEN + 1];        /*  メール日付               */
        short       ind_mail_date;
    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( latitude.arr, G_CMD_POS_PARAM.latitude);
    latitude.len = strlen(G_CMD_POS_PARAM.latitude);

    strcpy( longitude.arr, G_CMD_POS_PARAM.longitude);
    longitude.len = strlen(G_CMD_POS_PARAM.longitude);

    strcpy( posdate.arr, G_CMD_POS_PARAM.hh24middmm);
    posdate.len = strlen(G_CMD_POS_PARAM.hh24middmm);

    strcpy( engine_state.arr, G_CMD_EG_PARAM.engine_state_flg);
    engine_state.len = strlen(G_CMD_EG_PARAM.engine_state_flg);

    fuel_per = G_CMD_F_PARAM.fuel_per;
    fuel_tmp = G_CMD_FT_PARAM.fuel_tmp;
    fuel_dt = G_CMD_FS_PARAM.fuel_dt;

    strcpy( itc_serial_no.arr, G_CMD_COM_PARAM.itc_serial_no);
    itc_serial_no.len = strlen(G_CMD_COM_PARAM.itc_serial_no);

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [RES_MACHINE_STATE] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,equip_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,latitude.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,longitude.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,posdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,engine_state.arr);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,fuel_per);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,fuel_tmp);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,fuel_dt);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,itc_serial_no.arr);
#endif

    mail_date.len = 0;
    mail_date.arr[mail_date.len] = 0x00;
    ind_mail_date = 0;
    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
            ITC.RES_MACHINE_STATE(:equip_no, :sysdate, :proc, :latitude, 
                    :longitude, :posdate, :engine_state, :fuel_per, :fuel_tmp, :fuel_dt, :itc_serial_no, :mail_date:ind_mail_date);
        END;
    END-EXEC;

    mail_date.arr[mail_date.len] = 0x00;
    strcpy( G_CMD_COM_PARAM.mail_date, mail_date.arr );

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [RES_MACHINE_STATE] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   res_service_check                                           */
/*  機能    :   メール種別「サービス診断(応答)」時のDB更新処理を行う        */
/*  関数型  :   int                                                         */
/*  呼出形式:   res_service_check()                                         */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2011.06.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int res_service_check(){

    #ifdef DEBUG
    printf( "[%s][Line:%04d]「res_service_check」START\n", __FUNCTION__,__LINE__ );
    #endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号            */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時    */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名          */
        varchar     sindan_no[DIAGNOSIS_NO_MAX_LEN+1];  /*  診断管理No          */
        varchar     group_cd_sd1[DATA_CD_MAX_LEN+1];    /*  グループコード(SD1) */
        varchar     sd_status[MAIL_STATUS_MAX_LEN+1];   /*  応答                */
        varchar     group_cd_sd3[DATA_CD_MAX_LEN+1];    /*  グループコード(SD3) */
        char  diagnoisi_data[SERVICE_DIAG_MAX_COUNT][DIAGNOSIS_DATA_MAX_LEN + 1];    /*  サービス診断情報    */
                 EXEC SQL VAR diagnoisi_data IS STRING;
        int         diagnoisi_data_cnt;                         /*  サービス診断情報件数 */
        int         i;
        
    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( group_cd_sd1.arr, G_CMD_SD1_PARAM.group_cd);
    group_cd_sd1.len = strlen(G_CMD_SD1_PARAM.group_cd);

    strcpy( sindan_no.arr, G_CMD_SD1_PARAM.sindan_no);
    sindan_no.len = strlen(G_CMD_SD1_PARAM.sindan_no);

    memset(diagnoisi_data,0x00,SERVICE_DIAG_MAX_COUNT * (DIAGNOSIS_DATA_MAX_LEN + 1));
    
    diagnoisi_data_cnt = 0;
    if(NULL != pG_CMD_SD2_PARAM){
        CMD_SD2_PARAM *cur = NULL;
        
        cur = pG_CMD_SD2_PARAM;
        for(;;){
            strcpy(diagnoisi_data[diagnoisi_data_cnt],cur->diagnoisi_data);
            diagnoisi_data_cnt ++;
            if(NULL == cur->next){
                break;
            }
            cur = cur->next;
        }
    }

    strcpy( group_cd_sd3.arr, G_CMD_SD3_PARAM.group_cd);
    group_cd_sd3.len = strlen(G_CMD_SD3_PARAM.group_cd);

    strcpy( sd_status.arr, G_CMD_SD3_PARAM.sd_status);
    sd_status.len = strlen(G_CMD_SD3_PARAM.sd_status);

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [SERVICE_CHECK] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,equip_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,group_cd_sd1.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sindan_no.arr);
for(i=0;i<diagnoisi_data_cnt;i++){
	printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,diagnoisi_data[i]);
}
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sd_status.arr);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,diagnoisi_data_cnt);
#endif

    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
            ITC.SERVICE_CHECK(:equip_no,:sysdate,:proc,:group_cd_sd1,:sindan_no,
                :diagnoisi_data,:sd_status,:diagnoisi_data_cnt
            );

        END;
    END-EXEC;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [SERVICE_CHECK] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   hourmeter_change                                            */
/*  機能    :   メール種別「アワメータ変更」時のDB更新処理を行う            */
/*  関数型  :   int                                                         */
/*  呼出形式:   hourmeter_change()                                          */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2011.06.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int hourmeter_change(){
	
	#ifdef DEBUG
	printf( "[%s][Line:%04d]「hourmeter_change」START\n", __FUNCTION__,__LINE__ );
	#endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号             */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時     */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名           */
        varchar     hs_r_cont[MAIL_CONT_MAX_LEN + 1];   /*  アワメータ変更要求値 */
        varchar     reply[MAIL_STATUS_MAX_LEN + 1];     /*  応答                 */

    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( hs_r_cont.arr, G_CMD_HS_PARAM.hs_r_cont);
    hs_r_cont.len = strlen(G_CMD_HS_PARAM.hs_r_cont);

    strcpy( reply.arr, G_CMD_HS_PARAM.reply);
    reply.len = strlen(G_CMD_HS_PARAM.reply);

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [HOURMETER_CHANGE] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,equip_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,hs_r_cont.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,reply.arr);
#endif

    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
            ITC.HOURMETER_CHANGE(:equip_no, :sysdate, :proc, :hs_r_cont, :reply);
        END;
    END-EXEC;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [HOURMETER_CHANGE] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   engine_o_change                                             */
/*  機能    :   メール種別「ｴﾝｼﾞﾝｵｲﾙ交換残時間変更」時のDB更新処理を行う    */
/*  関数型  :   int                                                         */
/*  呼出形式:   engine_o_change()                                           */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2011.06.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int engine_o_change(){
	
	#ifdef DEBUG
	printf( "[%s][Line:%04d]「engine_o_change」START\n", __FUNCTION__,__LINE__ );
	#endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号             */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時     */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名           */
        varchar     he_r_cont[MAIL_CONT_MAX_LEN + 1];   /*  交換時間             */
        varchar     reply[MAIL_STATUS_MAX_LEN + 1];     /*  応答                 */

    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( he_r_cont.arr, G_CMD_HE_PARAM.he_r_cont);
    he_r_cont.len = strlen(G_CMD_HE_PARAM.he_r_cont);

    strcpy( reply.arr, G_CMD_HE_PARAM.reply);
    reply.len = strlen(G_CMD_HE_PARAM.reply);

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [ENGINE_O_CHANGE] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,equip_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,he_r_cont.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,reply.arr);
#endif

    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
            ITC.ENGINE_O_CHANGE(:equip_no, :sysdate, :proc, :he_r_cont, :reply);
        END;
    END-EXEC;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [ENGINE_O_CHANGE] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   fuel_f_change                                               */
/*  機能    :   メール種別「燃料ﾌｨﾙﾀ交換残時間変更」時のDB更新処理を行う    */
/*  関数型  :   int                                                         */
/*  呼出形式:   fuel_f_change()                                             */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2011.06.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int fuel_f_change(){
	
	#ifdef DEBUG
	printf( "[%s][Line:%04d]「fuel_f_change」START\n", __FUNCTION__,__LINE__ );
	#endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号             */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時     */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名           */
        varchar     hf_r_cont[MAIL_CONT_MAX_LEN + 1];   /*  交換時間             */
        varchar     reply[MAIL_STATUS_MAX_LEN + 1];     /*  応答                 */

    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( hf_r_cont.arr, G_CMD_HF_PARAM.hf_r_cont);
    hf_r_cont.len = strlen(G_CMD_HF_PARAM.hf_r_cont);

    strcpy( reply.arr, G_CMD_HF_PARAM.reply);
    reply.len = strlen(G_CMD_HF_PARAM.reply);

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [FUEL_F_CHANGE] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,equip_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,hf_r_cont.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,reply.arr);
#endif

    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
            ITC.FUEL_F_CHANGE(:equip_no, :sysdate, :proc, :hf_r_cont, :reply);
        END;
    END-EXEC;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [FUEL_F_CHANGE] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   hydraulic_of_change                                         */
/*  機能    :   メール種別「作動油ﾌｨﾙﾀ交換残時間変更」時のDB更新処理を行う  */
/*  関数型  :   int                                                         */
/*  呼出形式:   hydraulic_of_change()                                       */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2011.06.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int hydraulic_of_change(){
	
	#ifdef DEBUG
	printf( "[%s][Line:%04d]「hydraulic_of_change」START\n", __FUNCTION__,__LINE__ );
	#endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号             */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時     */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名           */
        varchar     hh_r_cont[MAIL_CONT_MAX_LEN + 1];   /*  交換時間             */
        varchar     reply[MAIL_STATUS_MAX_LEN + 1];     /*  応答                 */

    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( hh_r_cont.arr, G_CMD_HH_PARAM.hh_r_cont);
    hh_r_cont.len = strlen(G_CMD_HH_PARAM.hh_r_cont);

    strcpy( reply.arr, G_CMD_HH_PARAM.reply);
    reply.len = strlen(G_CMD_HH_PARAM.reply);

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [HYDRAULIC_OF_CHANGE] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,equip_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,hh_r_cont.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,reply.arr);
#endif

    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
            ITC.HYDRAULIC_OF_CHANGE(:equip_no, :sysdate, :proc, :hh_r_cont, :reply);
        END;
    END-EXEC;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [HYDRAULIC_OF_CHANGE] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   hydraulic_o_change                                          */
/*  機能    :   メール種別「作動油交換残時間変更」時のDB更新処理を行う      */
/*  関数型  :   int                                                         */
/*  呼出形式:   hydraulic_o_change()                                        */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2011.06.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int hydraulic_o_change(){
	
	#ifdef DEBUG
	printf( "[%s][Line:%04d]「hydraulic_o_change」START\n", __FUNCTION__,__LINE__ );
	#endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号             */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時     */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名           */
        varchar     hl_r_cont[MAIL_CONT_MAX_LEN + 1];   /*  交換時間             */
        varchar     reply[MAIL_STATUS_MAX_LEN + 1];     /*  応答                 */

    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( hl_r_cont.arr, G_CMD_HL_PARAM.hl_r_cont);
    hl_r_cont.len = strlen(G_CMD_HL_PARAM.hl_r_cont);

    strcpy( reply.arr, G_CMD_HL_PARAM.reply);
    reply.len = strlen(G_CMD_HL_PARAM.reply);

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [HYDRAULIC_O_CHANGE] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,equip_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,hl_r_cont.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,reply.arr);
#endif

    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
            ITC.HYDRAULIC_O_CHANGE(:equip_no, :sysdate, :proc, :hl_r_cont, :reply);
        END;
    END-EXEC;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [HYDRAULIC_O_CHANGE] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   res_fail_hst                                                */
/*  機能    :   メール種別「故障来歴取得（応答）」時のDB更新処理を行う      */
/*  関数型  :   int                                                         */
/*  呼出形式:   res_fail_hst()                                              */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2011.06.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int res_fail_hst(){
	#ifdef DEBUG
	printf( "[%s][Line:%04d]「res_fail_hst」START\n", __FUNCTION__,__LINE__ );
	#endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号                */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時        */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名              */
        char  cmd_all[ALARM_INQUIRY_MAX_COUNT][BODY_LINE_MAX_LEN + 1];           /*  コマンド行全文      */
                 EXEC SQL VAR cmd_all IS STRING;
        char  raireki1[ALARM_INQUIRY_MAX_COUNT][RAIREKI_MAX_LEN+1];              /*  故障来歴1           */
                 EXEC SQL VAR raireki1 IS STRING;
        char  raireki2[ALARM_INQUIRY_MAX_COUNT][RAIREKI_MAX_LEN+1];              /*  故障来歴2           */
                 EXEC SQL VAR raireki2 IS STRING;
        char  raireki3[ALARM_INQUIRY_MAX_COUNT][RAIREKI_MAX_LEN+1];              /*  故障来歴3           */
                 EXEC SQL VAR raireki3 IS STRING;
        char  raireki4[ALARM_INQUIRY_MAX_COUNT][RAIREKI_MAX_LEN+1];              /*  故障来歴4           */
                 EXEC SQL VAR raireki4 IS STRING;
        char  raireki5[ALARM_INQUIRY_MAX_COUNT][RAIREKI_MAX_LEN+1];              /*  故障来歴5           */
                 EXEC SQL VAR raireki5 IS STRING;
        char  raireki6[ALARM_INQUIRY_MAX_COUNT][RAIREKI_MAX_LEN+1];              /*  故障来歴6           */
                 EXEC SQL VAR raireki6 IS STRING;
        char  raireki7[ALARM_INQUIRY_MAX_COUNT][RAIREKI_MAX_LEN+1];              /*  故障来歴7           */
                 EXEC SQL VAR raireki7 IS STRING;
        char  raireki8[ALARM_INQUIRY_MAX_COUNT][RAIREKI_MAX_LEN+1];              /*  故障来歴8           */
                 EXEC SQL VAR raireki8 IS STRING;
        char  raireki9[ALARM_INQUIRY_MAX_COUNT][RAIREKI_MAX_LEN+1];              /*  故障来歴9           */
                 EXEC SQL VAR raireki9 IS STRING;
        char  raireki10[ALARM_INQUIRY_MAX_COUNT][RAIREKI_MAX_LEN+1];             /*  故障来歴10          */
                 EXEC SQL VAR raireki10 IS STRING;
        char  raireki11[ALARM_INQUIRY_MAX_COUNT][RAIREKI_MAX_LEN+1];             /*  故障来歴11          */
                 EXEC SQL VAR raireki11 IS STRING;
        char  raireki12[ALARM_INQUIRY_MAX_COUNT][RAIREKI_MAX_LEN+1];             /*  故障来歴12          */
                 EXEC SQL VAR raireki12 IS STRING;
        char  raireki13[ALARM_INQUIRY_MAX_COUNT][RAIREKI_MAX_LEN+1];             /*  故障来歴13          */
                 EXEC SQL VAR raireki13 IS STRING;
        char  raireki14[ALARM_INQUIRY_MAX_COUNT][RAIREKI_MAX_LEN+1];             /*  故障来歴14          */
                 EXEC SQL VAR raireki14 IS STRING;
        int   hour_meter[ALARM_INQUIRY_MAX_COUNT];                               /*  アワメータ          */
                 EXEC SQL VAR hour_meter IS INTEGER;
        varchar     mc_pno[MC_PNO_MAX_LEN + 1];                                  /*  メカトロコントローラパーツNo */
        varchar     mc_ver[MC_VER_MAX_LEN + 1];                                  /*  メカトロコントローラソフトVer */
        int         raireki_cnt;
        int         i;
        varchar     err_msg[ERR_MSG_MAX_LEN + 1];       /*  エラーメッセージ  */
		short		ind_err_msg;
    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

	memset(cmd_all,0x00,ALARM_INQUIRY_MAX_COUNT * (BODY_LINE_MAX_LEN + 1));
	memset(raireki1,0x00,ALARM_INQUIRY_MAX_COUNT * (RAIREKI_MAX_LEN + 1));
	memset(raireki2,0x00,ALARM_INQUIRY_MAX_COUNT * (RAIREKI_MAX_LEN + 1));
	memset(raireki3,0x00,ALARM_INQUIRY_MAX_COUNT * (RAIREKI_MAX_LEN + 1));
	memset(raireki4,0x00,ALARM_INQUIRY_MAX_COUNT * (RAIREKI_MAX_LEN + 1));
	memset(raireki5,0x00,ALARM_INQUIRY_MAX_COUNT * (RAIREKI_MAX_LEN + 1));
	memset(raireki6,0x00,ALARM_INQUIRY_MAX_COUNT * (RAIREKI_MAX_LEN + 1));
	memset(raireki7,0x00,ALARM_INQUIRY_MAX_COUNT * (RAIREKI_MAX_LEN + 1));
	memset(raireki8,0x00,ALARM_INQUIRY_MAX_COUNT * (RAIREKI_MAX_LEN + 1));
	memset(raireki9,0x00,ALARM_INQUIRY_MAX_COUNT * (RAIREKI_MAX_LEN + 1));
	memset(raireki10,0x00,ALARM_INQUIRY_MAX_COUNT * (RAIREKI_MAX_LEN + 1));
	memset(raireki11,0x00,ALARM_INQUIRY_MAX_COUNT * (RAIREKI_MAX_LEN + 1));
	memset(raireki12,0x00,ALARM_INQUIRY_MAX_COUNT * (RAIREKI_MAX_LEN + 1));
	memset(raireki13,0x00,ALARM_INQUIRY_MAX_COUNT * (RAIREKI_MAX_LEN + 1));
	memset(raireki14,0x00,ALARM_INQUIRY_MAX_COUNT * (RAIREKI_MAX_LEN + 1));
	memset(hour_meter,0x00,ALARM_INQUIRY_MAX_COUNT * (HOUR_METER_MAX_LEN + 1));
    
    raireki_cnt = 0;
    if(NULL != pG_CMD_AH_PARAM){
        CMD_AH_PARAM *cur = NULL;
        
        cur = pG_CMD_AH_PARAM;
        for(;;){
            strcpy(cmd_all[raireki_cnt],cur->cmd_all);
            strcpy(raireki1[raireki_cnt],cur->raireki1);
            strcpy(raireki2[raireki_cnt],cur->raireki2);
            strcpy(raireki3[raireki_cnt],cur->raireki3);
            strcpy(raireki4[raireki_cnt],cur->raireki4);
            strcpy(raireki5[raireki_cnt],cur->raireki5);
            strcpy(raireki6[raireki_cnt],cur->raireki6);
            strcpy(raireki7[raireki_cnt],cur->raireki7);
            strcpy(raireki8[raireki_cnt],cur->raireki8);
            strcpy(raireki9[raireki_cnt],cur->raireki9);
            strcpy(raireki10[raireki_cnt],cur->raireki10);
            strcpy(raireki11[raireki_cnt],cur->raireki11);
            strcpy(raireki12[raireki_cnt],cur->raireki12);
            strcpy(raireki13[raireki_cnt],cur->raireki13);
            strcpy(raireki14[raireki_cnt],cur->raireki14);
            hour_meter[raireki_cnt] = cur->hour_meter;;

            raireki_cnt ++;
            if(NULL == cur->next){
                break;
            }
            cur = cur->next;
        }
    }

    strcpy( mc_pno.arr, G_CMD_PN_PARAM.mc_pno);
    mc_pno.len = strlen(G_CMD_PN_PARAM.mc_pno);

    strcpy( mc_ver.arr, G_CMD_VR_PARAM.mc_ver);
    mc_ver.len = strlen(G_CMD_VR_PARAM.mc_ver);

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [ALARM_INQUIRY] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,equip_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
for(i=0;i<raireki_cnt;i++){
	printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,cmd_all[i]);
}
for(i=0;i<raireki_cnt;i++){
	printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,raireki1[i]);
}
for(i=0;i<raireki_cnt;i++){
	printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,raireki2[i]);
}
for(i=0;i<raireki_cnt;i++){
	printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,raireki3[i]);
}
for(i=0;i<raireki_cnt;i++){
	printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,raireki4[i]);
}
for(i=0;i<raireki_cnt;i++){
	printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,raireki5[i]);
}
for(i=0;i<raireki_cnt;i++){
	printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,raireki6[i]);
}
for(i=0;i<raireki_cnt;i++){
	printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,raireki7[i]);
}
for(i=0;i<raireki_cnt;i++){
	printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,raireki8[i]);
}
for(i=0;i<raireki_cnt;i++){
	printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,raireki9[i]);
}
for(i=0;i<raireki_cnt;i++){
	printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,raireki10[i]);
}
for(i=0;i<raireki_cnt;i++){
	printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,raireki11[i]);
}
for(i=0;i<raireki_cnt;i++){
	printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,raireki12[i]);
}
for(i=0;i<raireki_cnt;i++){
	printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,raireki13[i]);
}
for(i=0;i<raireki_cnt;i++){
	printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,raireki14[i]);
}
for(i=0;i<raireki_cnt;i++){
	printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,hour_meter[i]);
}
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,mc_pno.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,mc_ver.arr);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,raireki_cnt);
#endif

    /*  PL/SQL処理実行  */
    err_msg.len = 0;
    err_msg.arr[err_msg.len] = 0x00;
    ind_err_msg = 0;
    EXEC SQL EXECUTE
        BEGIN
            ITC.ALARM_INQUIRY(:equip_no, :sysdate, :proc, :cmd_all, :raireki1, :raireki2, :raireki3,
                    :raireki4, :raireki5, :raireki6, :raireki7, :raireki8, :raireki9,:raireki10, :raireki11,
                    :raireki12, :raireki13, :raireki14, :hour_meter, :mc_pno, :mc_ver, :raireki_cnt, :err_msg:ind_err_msg);
        END;
    END-EXEC;
    
    err_msg.arr[err_msg.len] = 0x00;

    /* 変換異常チェック */
	if( strcmp(err_msg.arr,"OK") != 0 ){
	    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,err_msg.arr);

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%s]\n", __FUNCTION__,__LINE__ ,err_msg.arr);
#endif

		return( 1 );
	}

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [ALARM_INQUIRY] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   res_invasion_warn_time                                      */
/*  機能    :   メール種別「侵入警報有効時間設定(応答)」時のDB更新処理を行う*/
/*  関数型  :   int                                                         */
/*  呼出形式:   res_invasion_warn_time()                                    */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2011.06.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int res_invasion_warn_time(){

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];       /*  設備番号              */
        varchar     sysdate[TIME_MAX_LEN + 1];            /*  共通システム日時      */
        varchar     proc[PROC_NAME_MAX_LEN + 1];          /*  プロセス名            */
        varchar     amof_cmd_all[BODY_LINE_MAX_LEN + 1];  /*  コマンド行全文(AMOF)  */
        varchar     amof_hh24mi[TIME_MAX_LEN + 1];        /*  時分(AMOF)            */
        varchar     amof_r_status[MAIL_STATUS_MAX_LEN+1]; /*  応答(AMOF)            */
        varchar     amon_cmd_all[BODY_LINE_MAX_LEN + 1];  /*  コマンド行全文(AMON)  */
        varchar     amon_hh24mi[TIME_MAX_LEN + 1];        /*  時分(AMON)            */
        varchar     amon_r_status[MAIL_STATUS_MAX_LEN+1]; /*  応答(AMON)            */
        varchar     am_cmd_all[BODY_LINE_MAX_LEN + 1];    /*  コマンド行全文(AM)    */
        varchar     am_hold_al[TIME_MAX_LEN + 1];         /*  曜日毎有効指定(AM)    */
        varchar     am_r_status[MAIL_STATUS_MAX_LEN+1];   /*  応答(AM)              */
    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( amof_cmd_all.arr, G_CMD_AMOF_PARAM.cmd_all);
    amof_cmd_all.len = strlen(G_CMD_AMOF_PARAM.cmd_all);

    strcpy( amof_hh24mi.arr, G_CMD_AMOF_PARAM.hh24mi);
    amof_hh24mi.len = strlen(G_CMD_AMOF_PARAM.hh24mi);

    strcpy( amof_r_status.arr, G_CMD_AMOF_PARAM.am_r_status);
    amof_r_status.len = strlen(G_CMD_AMOF_PARAM.am_r_status);

    strcpy( amon_cmd_all.arr, G_CMD_AMON_PARAM.cmd_all);
    amon_cmd_all.len = strlen(G_CMD_AMON_PARAM.cmd_all);

    strcpy( amon_hh24mi.arr, G_CMD_AMON_PARAM.hh24mi);
    amon_hh24mi.len = strlen(G_CMD_AMON_PARAM.hh24mi);

    strcpy( amon_r_status.arr, G_CMD_AMOF_PARAM.am_r_status);
    amon_r_status.len = strlen(G_CMD_AMOF_PARAM.am_r_status);

    strcpy( am_cmd_all.arr, G_CMD_AM_PARAM.cmd_all);
    am_cmd_all.len = strlen(G_CMD_AM_PARAM.cmd_all);

    strcpy( am_hold_al.arr, G_CMD_AM_PARAM.hold_al);
    am_hold_al.len = strlen(G_CMD_AM_PARAM.hold_al);

    strcpy( am_r_status.arr, G_CMD_AM_PARAM.am_r_status);
    am_r_status.len = strlen(G_CMD_AM_PARAM.am_r_status);

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [RES_INVASION_WARN_TIME] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,equip_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,amof_cmd_all.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,amof_hh24mi.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,amof_r_status.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,amon_cmd_all.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,amon_hh24mi.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,amon_r_status.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,am_cmd_all.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,am_hold_al.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,am_r_status.arr);
#endif

    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
            ITC.RES_INVASION_WARN_TIME(:equip_no, :sysdate, :proc, 
                    :amof_cmd_all, :amof_hh24mi, :amof_r_status, 
                    :amon_cmd_all, :amon_hh24mi, :amon_r_status, 
                    :am_cmd_all, :am_hold_al, :am_r_status);
        END;
    END-EXEC;   

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [RES_INVASION_WARN_TIME] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   res_area_set                                                */
/*  機能    :   メール種別「エリア設定(応答)」時のDB更新処理を行う          */
/*  関数型  :   int                                                         */
/*  呼出形式:   res_area_set()                                              */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2011.06.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int res_area_set(){

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];        /*  設備番号                */
        varchar     sysdate[TIME_MAX_LEN + 1];             /*  共通システム日時        */
        varchar     proc[PROC_NAME_MAX_LEN + 1];           /*  プロセス名              */
        varchar     cmd_all[BODY_LINE_MAX_LEN+1];          /*  コマンド行全文          */
        varchar     latitude1[LATITUDE_MAX_LEN + 1];       /*  緯度1                   */
        varchar     longitude1[LONGITUDE_MAX_LEN + 1];     /*  経度1                   */
        varchar     latitude2[LATITUDE_MAX_LEN + 1];       /*  緯度2                   */
        varchar     longitude2[LONGITUDE_MAX_LEN + 1];     /*  経度2                   */
        varchar     cl_r_status[MAIL_STATUS_MAX_LEN + 1];  /*  応答                    */
    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( cmd_all.arr, G_CMD_CL_PARAM.cmd_all);
    cmd_all.len = strlen(G_CMD_CL_PARAM.cmd_all);

    strcpy( latitude1.arr, G_CMD_CL_PARAM.latitude1);
    latitude1.len = strlen(G_CMD_CL_PARAM.latitude1);

    strcpy( longitude1.arr, G_CMD_CL_PARAM.longitude1);
    longitude1.len = strlen(G_CMD_CL_PARAM.longitude1);

    strcpy( latitude2.arr, G_CMD_CL_PARAM.latitude2);
    latitude2.len = strlen(G_CMD_CL_PARAM.latitude2);

    strcpy( longitude2.arr, G_CMD_CL_PARAM.longitude2);
    longitude2.len = strlen(G_CMD_CL_PARAM.longitude2);

    strcpy( cl_r_status.arr, G_CMD_CL_PARAM.cl_r_status);
    cl_r_status.len = strlen(G_CMD_CL_PARAM.cl_r_status);

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [RES_AREA_SET] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,equip_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,cmd_all.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,latitude1.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,longitude1.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,latitude2.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,longitude2.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,cl_r_status.arr);
#endif

    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
            ITC.RES_AREA_SET(:equip_no, :sysdate, :proc, 
                    :cmd_all, :latitude1, :longitude1, 
                    :latitude2, :longitude2, :cl_r_status);
        END;
    END-EXEC;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [RES_AREA_SET] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   res_com_stop                                                */
/*  機能    :   メール種別「通信停止(応答)」時のDB更新処理を行う            */
/*  関数型  :   int                                                         */
/*  呼出形式:   res_com_stop()                                              */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2011.06.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int res_com_stop(){
	
	#ifdef DEBUG
	printf( "[%s][Line:%04d]「res_com_stop」START\n", __FUNCTION__,__LINE__ );
	#endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     itc_serial_no[SERIAL_NO_MAX_LEN + 1];  /*  ITCシリアルNO      */
        varchar     sysdate[TIME_MAX_LEN + 1];             /*  共通システム日時   */
        varchar     proc[PROC_NAME_MAX_LEN + 1];           /*  プロセス名         */
        varchar     cmd_all[BODY_LINE_MAX_LEN+1];          /*  コマンド行全文     */
        varchar     cm0_r_status[MAIL_STATUS_MAX_LEN+1];   /*  メール状態         */

    EXEC SQL END DECLARE SECTION;

    strcpy( itc_serial_no.arr, G_CMD_COM_PARAM.itc_serial_no);
    itc_serial_no.len = strlen(G_CMD_COM_PARAM.itc_serial_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( cmd_all.arr, G_CMD_CM0_PARAM.cmd_all);
    cmd_all.len = strlen(G_CMD_CM0_PARAM.cmd_all);

    strcpy( cm0_r_status.arr, G_CMD_CM0_PARAM.cm0_r_status);
    cm0_r_status.len = strlen(G_CMD_CM0_PARAM.cm0_r_status);

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [RES_COM_STOP] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,itc_serial_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,cmd_all.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,cm0_r_status.arr);
#endif

    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
            ITC.RES_COM_STOP(:itc_serial_no, :sysdate, :proc, 
                    :cmd_all, :cm0_r_status);
        END;
    END-EXEC;   

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [RES_COM_STOP] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   res_com_restart                                             */
/*  機能    :   メール種別「通信再開(応答)」時のDB更新処理を行う            */
/*  関数型  :   int                                                         */
/*  呼出形式:   res_com_restart()                                           */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2011.06.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int res_com_restart(){
	
	#ifdef DEBUG
	printf( "[%s][Line:%04d]「res_com_restart」START\n", __FUNCTION__,__LINE__ );
	#endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     itc_serial_no[SERIAL_NO_MAX_LEN + 1];  /*  ITCシリアルNO      */
        varchar     sysdate[TIME_MAX_LEN + 1];             /*  共通システム日時   */
        varchar     proc[PROC_NAME_MAX_LEN + 1];           /*  プロセス名         */
        varchar     cmd_all[BODY_LINE_MAX_LEN+1];          /*  コマンド行全文     */
        varchar     cm1_r_status[MAIL_STATUS_MAX_LEN+1];   /*  メール状態         */

    EXEC SQL END DECLARE SECTION;

    strcpy( itc_serial_no.arr, G_CMD_COM_PARAM.itc_serial_no);
    itc_serial_no.len = strlen(G_CMD_COM_PARAM.itc_serial_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( cmd_all.arr, G_CMD_CM1_PARAM.cmd_all);
    cmd_all.len = strlen(G_CMD_CM1_PARAM.cmd_all);

    strcpy( cm1_r_status.arr, G_CMD_CM1_PARAM.cm1_r_status);
    cm1_r_status.len = strlen(G_CMD_CM1_PARAM.cm1_r_status);

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [RES_COM_RESTART] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,itc_serial_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,cmd_all.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,cm1_r_status.arr);
#endif

    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
            ITC.RES_COM_RESTART(:itc_serial_no, :sysdate, :proc, 
                    :cmd_all, :cm1_r_status);
        END;
    END-EXEC;   

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [RES_COM_RESTART] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   res_com_test                                                */
/*  機能    :   メール種別「通信テスト(応答)」時のDB更新処理を行う          */
/*  関数型  :   int                                                         */
/*  呼出形式:   res_com_test()                                              */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2011.06.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int res_com_test(){
	
	#ifdef DEBUG
	printf( "[%s][Line:%04d]「res_com_test」START\n", __FUNCTION__,__LINE__ );
	#endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     itc_serial_no[SERIAL_NO_MAX_LEN + 1];  /*  ITCシリアルNO            */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時            */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名                  */
        varchar     latitude[LATITUDE_MAX_LEN + 1];     /*  緯度                        */
        varchar     longitude[LONGITUDE_MAX_LEN + 1];   /*  経度                        */
        varchar     posdate[TIME_MAX_LEN + 1];          /*  位置日時(年月日時分秒)      */
        varchar     tel_no_data[TEL_NO_MAX_LEN + 1];    /*  電話番号                    */
        varchar     ip_address[IP_ADDRESS_MAX_LEN + 1]; /*  IPアドレス                  */
        varchar     sei_y[TIME_MAX_LEN + 1];            /*  西暦日付                    */
        int         mechatro;                           /*  メカトロ有無                */
        int         fuel_per;                           /*  燃料残量                    */
        varchar     mail_date[TIME_MAX_LEN + 1];        /*  メール日付               */
        short       ind_mail_date;
    EXEC SQL END DECLARE SECTION;

    strcpy( itc_serial_no.arr, G_CMD_COM_PARAM.itc_serial_no);
    itc_serial_no.len = strlen(G_CMD_COM_PARAM.itc_serial_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( latitude.arr, G_CMD_POS_PARAM.latitude);
    latitude.len = strlen(G_CMD_POS_PARAM.latitude);

    strcpy( longitude.arr, G_CMD_POS_PARAM.longitude);
    longitude.len = strlen(G_CMD_POS_PARAM.longitude);

    strcpy( posdate.arr, G_CMD_POS_PARAM.hh24middmm);
    posdate.len = strlen(G_CMD_POS_PARAM.hh24middmm);

    strcpy( tel_no_data.arr, G_CMD_D0_PARAM.ct0_tel_no);
    tel_no_data.len = strlen(G_CMD_D0_PARAM.ct0_tel_no);

    strcpy( ip_address.arr, G_CMD_D1_PARAM.ct0_ip_address);
    ip_address.len = strlen(G_CMD_D1_PARAM.ct0_ip_address);

    strcpy( sei_y.arr, G_CMD_D2_PARAM.ct0_sei_y);
    sei_y.len = strlen(G_CMD_D2_PARAM.ct0_sei_y);

    mechatro = G_CMD_D3_PARAM.ct0_mechatro;

    fuel_per = G_CMD_F_PARAM.fuel_per;

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [RES_COM_TEST] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,itc_serial_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,latitude.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,longitude.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,posdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,tel_no_data.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,ip_address.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sei_y.arr);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,mechatro);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,fuel_per);
#endif

    mail_date.len = 0;
    mail_date.arr[mail_date.len] = 0x00;
    ind_mail_date = 0;
    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
            ITC.RES_COM_TEST(:itc_serial_no, :sysdate, :proc, 
                    :latitude, :longitude, :posdate, 
                    :tel_no_data, :ip_address, :sei_y, :mechatro, :fuel_per, :mail_date:ind_mail_date);
        END;
    END-EXEC;   

    mail_date.arr[mail_date.len] = 0x00;
    strcpy( G_CMD_COM_PARAM.mail_date, mail_date.arr );

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [RES_COM_TEST] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   res_com_vol                                                 */
/*  機能    :   メール種別「通信量確認(応答)」時のDB更新処理を行う          */
/*  関数型  :   int                                                         */
/*  呼出形式:   res_com_vol()                                               */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2011.06.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int res_com_vol(){
	
	#ifdef DEBUG
	printf( "[%s][Line:%04d]「res_com_vol」START\n", __FUNCTION__,__LINE__ );
	#endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     itc_serial_no[SERIAL_NO_MAX_LEN + 1];  /*  ITCシリアルNO            */
        varchar     sysdate[TIME_MAX_LEN + 1];      /*  共通システム日時  */
        varchar     proc[PROC_NAME_MAX_LEN + 1];    /*  プロセス名        */
        int         receive_byte;                   /*  受信メール総容量  */
        int         send_byte;                      /*  送信メール総容量  */
        int         receive_mail;                   /*  受信メール数      */
        int         send_mail;                      /*  送信メール数      */
        int         retry ;                         /*  リトライ回数      */
        int         reserve1;                       /*  予備１            */
        int         reserve2;                       /*  予備２            */
        int         reserve3;                       /*  予備３            */
        int         reserve4;                       /*  予備４            */
    EXEC SQL END DECLARE SECTION;

    strcpy( itc_serial_no.arr, G_CMD_COM_PARAM.itc_serial_no);
    itc_serial_no.len = strlen(G_CMD_COM_PARAM.itc_serial_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    receive_byte  = G_CMD_M0_PARAM.ct1_receive_byte;
    send_byte     = G_CMD_M1_PARAM.ct1_send_byte;
    receive_mail  = G_CMD_M2_PARAM.ct1_receive_mail;
    send_mail     = G_CMD_M3_PARAM.ct1_send_mail;
    retry         = G_CMD_M4_PARAM.ct1_retry;
    reserve1      = G_CMD_M5_PARAM.ct1_reserve1;
    reserve2      = G_CMD_M6_PARAM.ct1_reserve2;
    reserve3      = G_CMD_M7_PARAM.ct1_reserve3;
    reserve4      = G_CMD_M8_PARAM.ct1_reserve4;

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [RES_COM_VOL] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,itc_serial_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,receive_byte);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,send_byte);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,receive_mail);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,send_mail);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,retry);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,reserve1);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,reserve2);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,reserve3);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,reserve4);
#endif

    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
            ITC.RES_COM_VOL(:itc_serial_no, :sysdate, :proc, :receive_byte, :send_byte, 
                     :receive_mail,:send_mail, :retry, :reserve1, :reserve2, :reserve3, :reserve4);
        END;
    END-EXEC;   

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [RES_COM_VOL] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   warn_invasion                                               */
/*  機能    :   メール種別「侵入警報」時のDB更新処理を行う                  */
/*  関数型  :   int                                                         */
/*  呼出形式:   warn_invasion()                                             */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2011.06.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int warn_invasion(){
	
	#ifdef DEBUG
	printf( "[%s][Line:%04d]「warn_invasion」START\n", __FUNCTION__,__LINE__ );
	#endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号          */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時  */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名        */
        varchar     yymmddhh24mi[TIME_MAX_LEN + 1];     /*  年月日時分        */
        varchar     itc_serial_no[SERIAL_NO_MAX_LEN + 1];  /*  ITCシリアルNO  */
        varchar     err_msg[ERR_MSG_MAX_LEN + 1];       /*  エラーメッセージ  */
        short       ind_err_msg;
        varchar     mail_date[TIME_MAX_LEN + 1];        /*  メール日付        */
        short       ind_mail_date;
        int         stop_send;
    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( yymmddhh24mi.arr, G_CMD_SC_PARAM.yymmddhh24mi);
    yymmddhh24mi.len = strlen(G_CMD_SC_PARAM.yymmddhh24mi);

    strcpy( itc_serial_no.arr, G_CMD_COM_PARAM.itc_serial_no);
    itc_serial_no.len = strlen(G_CMD_COM_PARAM.itc_serial_no);

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [WARN_INVASION] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,equip_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,yymmddhh24mi.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,itc_serial_no.arr);
#endif

    mail_date.len = 0;
    mail_date.arr[mail_date.len] = 0x00;

    /*  PL/SQL処理実行  */
    err_msg.len = 0;
    err_msg.arr[err_msg.len] = 0x00;
    ind_err_msg = 0;
    ind_mail_date = 0;
    stop_send = 0;

    EXEC SQL EXECUTE
        BEGIN
            :stop_send := ITC.IS_WARN_INVASION_STOP_SEND(:equip_no, :yymmddhh24mi,:itc_serial_no);
            IF :stop_send = 0 THEN
                ITC.WARN_INVASION(:equip_no, :sysdate, :proc, :yymmddhh24mi,:itc_serial_no, :mail_date:ind_mail_date, :err_msg:ind_err_msg);
            ELSE
                :err_msg := 'OK';
            END IF;
        END;
    END-EXEC;

    G_CMD_COM_PARAM.keiho_stop = stop_send;

    mail_date.arr[mail_date.len] = 0x00;
    strcpy( G_CMD_COM_PARAM.mail_date, mail_date.arr );

    err_msg.arr[err_msg.len] = 0x00;

    /* 例外チェック */
	if( strcmp(err_msg.arr,"OK") != 0 ){
	    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,err_msg.arr);

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%s]\n", __FUNCTION__,__LINE__ ,err_msg.arr);
#endif

		return( 1 );
	}

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [WARN_INVASION] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   warn_out_area                                               */
/*  機能    :   メール種別「エリア外警報」時のDB更新処理を行う              */
/*  関数型  :   int                                                         */
/*  呼出形式:   warn_out_area()                                             */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2011.06.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int warn_out_area(){
	
	#ifdef DEBUG
	printf( "[%s][Line:%04d]「warn_out_area」START\n", __FUNCTION__,__LINE__ );
	#endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号                */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時        */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名              */
        varchar     latitude[LATITUDE_MAX_LEN + 1];     /*  緯度                    */
        varchar     longitude[LONGITUDE_MAX_LEN + 1];   /*  経度                    */
        varchar     posdate[TIME_MAX_LEN + 1];          /*  位置日時(年月日時分秒)  */
        int         abnormal_flg;                       /*  異常フラグ              */
        varchar     itc_serial_no[SERIAL_NO_MAX_LEN + 1];  /*  ITCシリアルNO        */
        varchar     mail_date[TIME_MAX_LEN + 1];        /*  メール日付               */
        short       ind_mail_date;
    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( latitude.arr, G_CMD_POS_PARAM.latitude);
    latitude.len = strlen(G_CMD_POS_PARAM.latitude);

    strcpy( longitude.arr, G_CMD_POS_PARAM.longitude);
    longitude.len = strlen(G_CMD_POS_PARAM.longitude);

    strcpy( posdate.arr, G_CMD_POS_PARAM.hh24middmm);
    posdate.len = strlen(G_CMD_POS_PARAM.hh24middmm);

    abnormal_flg = G_CMD_SA_PARAM.abnormal_flg;

    strcpy( itc_serial_no.arr, G_CMD_COM_PARAM.itc_serial_no);
    itc_serial_no.len = strlen(G_CMD_COM_PARAM.itc_serial_no);

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [WARN_OUT_AREA] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,equip_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,latitude.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,longitude.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,posdate.arr);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,abnormal_flg);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,itc_serial_no.arr);
#endif

    mail_date.len = 0;
    mail_date.arr[mail_date.len] = 0x00;
    ind_mail_date = 0;
    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
            ITC.WARN_OUT_AREA(:equip_no, :sysdate, :proc, 
                    :latitude, :longitude, :posdate, :abnormal_flg, :itc_serial_no, :mail_date:ind_mail_date);
        END;
    END-EXEC;   

    mail_date.arr[mail_date.len] = 0x00;
    strcpy( G_CMD_COM_PARAM.mail_date, mail_date.arr );

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [WARN_OUT_AREA] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );

}


/* ------------------------------------------------------------------------ */
/*  関数名  :   warn_battery_rm                                             */
/*  機能    :   メール種別「バッテリ外し警報」時のDB更新処理を行う          */
/*  関数型  :   int                                                         */
/*  呼出形式:   warn_battery_rm()                                           */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2011.06.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int warn_battery_rm(){
	
	#ifdef DEBUG
	printf( "[%s][Line:%04d]「warn_battery_rm」START\n", __FUNCTION__,__LINE__ );
	#endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号                */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時        */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名              */
        varchar     latitude[LATITUDE_MAX_LEN + 1];     /*  緯度                    */
        varchar     longitude[LONGITUDE_MAX_LEN + 1];   /*  経度                    */
        varchar     posdate[TIME_MAX_LEN + 1];          /*  位置日時(年月日時分秒)  */
        int         abnormal_flg;                       /*  異常フラグ              */
        varchar     itc_serial_no[SERIAL_NO_MAX_LEN + 1];  /*  ITCシリアルNO        */
        varchar     mail_date[TIME_MAX_LEN + 1];        /*  メール日付               */
        short       ind_mail_date;
    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( latitude.arr, G_CMD_POS_PARAM.latitude);
    latitude.len = strlen(G_CMD_POS_PARAM.latitude);

    strcpy( longitude.arr, G_CMD_POS_PARAM.longitude);
    longitude.len = strlen(G_CMD_POS_PARAM.longitude);

    strcpy( posdate.arr, G_CMD_POS_PARAM.hh24middmm);
    posdate.len = strlen(G_CMD_POS_PARAM.hh24middmm);

    abnormal_flg = G_CMD_BT_PARAM.abnormal_flg;

    strcpy( itc_serial_no.arr, G_CMD_COM_PARAM.itc_serial_no);
    itc_serial_no.len = strlen(G_CMD_COM_PARAM.itc_serial_no);

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [WARN_BATTERY_RM] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,equip_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,latitude.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,longitude.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,posdate.arr);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,abnormal_flg);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,itc_serial_no.arr);
#endif

    mail_date.len = 0;
    mail_date.arr[mail_date.len] = 0x00;
    ind_mail_date = 0;
    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
            ITC.WARN_BATTERY_RM(:equip_no, :sysdate, :proc, 
                    :latitude, :longitude, :posdate, :abnormal_flg, :itc_serial_no, :mail_date:ind_mail_date);
        END;
    END-EXEC;

    mail_date.arr[mail_date.len] = 0x00;
    strcpy( G_CMD_COM_PARAM.mail_date, mail_date.arr );

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [WARN_BATTERY_RM] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   warn_self_diag                                              */
/*  機能    :   メール種別「警報、自己診断」時のDB更新処理を行う            */
/*  関数型  :   int                                                         */
/*  呼出形式:   warn_self_diag()                                            */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2011.06.05                                              */
/*  更新    KSC     2012.05.17 Tier4a対応(エラーコード追加)
/* ------------------------------------------------------------------------ */
int warn_self_diag(){

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号           */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時   */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名         */
        varchar     alarm_cd[CMD_MAX_LEN + 1];          /*  警報コード         */
        varchar     error_cd[ERROR_CD_LEN + 1];         /*  エラーコード       */
        varchar     cnv_alarm_cd[CMD_MAX_LEN + 1];      /*  変換後_警報コード  */
		short		ind_cnv_alarm_cd;
        varchar     cnv_error_cd[ERROR_CD_LEN + 1];     /*  変換後_エラーコード*/
		short		ind_cnv_error_cd;
        int         alarm_status;                       /*  異常フラグ         */
        varchar     yymmddhh24mi[TIME_MAX_LEN + 1];     /*  年月日時分         */
        varchar         eg_status[2];                          /*  E/G稼動状態        */
        varchar     err_msg[ERR_MSG_MAX_LEN + 1];       /*  エラーメッセージ   */
		short		ind_err_msg;
        varchar     itc_serial_no[SERIAL_NO_MAX_LEN + 1];  /*  ITCシリアルNO   */
        varchar     mail_date[TIME_MAX_LEN + 1];        /*  メール日付         */
		short		ind_mail_date;
    EXEC SQL END DECLARE SECTION;

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;
	
	#ifdef DEBUG
	printf( "[%s][Line:%04d]「warn_self_diag」START\n", __FUNCTION__,__LINE__ );
	#endif

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( alarm_cd.arr, G_CMD_XX_PARAM.alarm_cd);
    alarm_cd.len = strlen(G_CMD_XX_PARAM.alarm_cd);

    strcpy( error_cd.arr, G_CMD_XX_PARAM.error_cd);
    error_cd.len = strlen(G_CMD_XX_PARAM.error_cd);

    alarm_status = G_CMD_XX_PARAM.alarm_status;

    strcpy( yymmddhh24mi.arr, G_CMD_XX_PARAM.yymmddhh24mi);
    yymmddhh24mi.len = strlen(G_CMD_XX_PARAM.yymmddhh24mi);

    strcpy( eg_status.arr, G_CMD_XX_PARAM.eg_status);
    eg_status.len = strlen(G_CMD_XX_PARAM.eg_status);

    strcpy( itc_serial_no.arr, G_CMD_COM_PARAM.itc_serial_no);
    itc_serial_no.len = strlen(G_CMD_COM_PARAM.itc_serial_no);

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [WARN_SELF_DIAG] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,equip_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,alarm_cd.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,error_cd.arr);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,alarm_status);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,yymmddhh24mi.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,eg_status.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,itc_serial_no.arr);
#endif

    /*  PL/SQL処理実行  */
    err_msg.len = 0;
    err_msg.arr[err_msg.len] = 0x00;
    mail_date.len = 0;
    mail_date.arr[mail_date.len] = 0x00;
    ind_mail_date = 0;
    ind_err_msg = 0;
    cnv_alarm_cd.len = 0;
    cnv_alarm_cd.arr[cnv_alarm_cd.len] = 0x00;
    cnv_error_cd.len = 0;
    cnv_error_cd.arr[cnv_error_cd.len] = 0x00;
/*    eg_status.len = 0; */
/*    eg_status.arr[eg_status.len] = 0x00;  */
    ind_cnv_alarm_cd = 0;
    ind_cnv_error_cd = 0;
    EXEC SQL EXECUTE
        BEGIN
            ITC.CNV_ALARM(:equip_no, :alarm_cd, :error_cd, :cnv_alarm_cd:ind_cnv_alarm_cd, :cnv_error_cd:ind_cnv_error_cd);
            ITC.WARN_SELF_DIAG(:equip_no, :sysdate, :proc, :cnv_alarm_cd, :cnv_error_cd, :alarm_status, :yymmddhh24mi, :eg_status, :itc_serial_no, :mail_date:ind_mail_date, :err_msg);
        END;
    END-EXEC;

	/* 警報読み替え後の値をコマンド構造体に設定(戻す) */
	cnv_alarm_cd.arr[cnv_alarm_cd.len] = 0x00;
    strcpy( G_CMD_XX_PARAM.alarm_cd, cnv_alarm_cd.arr);
	cnv_error_cd.arr[cnv_error_cd.len] = 0x00;
    strcpy( G_CMD_XX_PARAM.error_cd, cnv_error_cd.arr);

    mail_date.arr[mail_date.len] = 0x00;
    strcpy( G_CMD_COM_PARAM.mail_date, mail_date.arr );

    err_msg.arr[err_msg.len] = 0x00;

    /* 例外チェック */
	if( strcmp(err_msg.arr,"OK") != 0 ){
	    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,err_msg.arr);

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%s]\n", __FUNCTION__,__LINE__ ,err_msg.arr);
#endif

		return( 1 );
	}

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [WARN_SELF_DIAG] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   ng_mail                                                     */
/*  機能    :   メール種別「NGメール」時のDB更新処理を行う                  */
/*  関数型  :   int                                                         */
/*  呼出形式:   ng_mail()                                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2011.06.05                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int ng_mail(){

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号          */
        varchar     itc_serial_no[SERIAL_NO_MAX_LEN + 1];  /*  ITCシリアルNO  */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時  */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名        */
    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( itc_serial_no.arr, G_CMD_COM_PARAM.itc_serial_no);
    itc_serial_no.len = strlen(G_CMD_COM_PARAM.itc_serial_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [NG_MAIL] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,equip_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
#endif

        /*  PL/SQL処理実行  */
        EXEC SQL EXECUTE
            BEGIN
                ITC.NG_MAIL(:equip_no, :sysdate, :proc);
            END;
        END-EXEC;   

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [NG_MAIL] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [NG_MAIL_MT] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,itc_serial_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
#endif

        /*  PL/SQL処理実行  */
        EXEC SQL EXECUTE
            BEGIN
                ITC.NG_MAIL_MT(:itc_serial_no, :sysdate, :proc);
            END;
        END-EXEC;   

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [NG_MAIL_MT] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}

int not_suport(){
	return 0;
}

int res_mecha_state(){

    #ifdef DEBUG
    printf( "[%s][Line:%04d]「res_mecha_state」START\n", __FUNCTION__,__LINE__ );
    #endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];       /*  設備番号              */
        varchar     sysdate[TIME_MAX_LEN + 1];            /*  共通システム日時      */
        varchar     proc[PROC_NAME_MAX_LEN + 1];          /*  プロセス名            */
        
        varchar     mc_pno[MC_PNO_MAX_LEN + 1];           /*  メカトロコントローラパーツNo */
        varchar     mc_ver[MC_VER_MAX_LEN + 1];           /*  メカトロコントローラソフトVer */
        int         eg_adjust;
        int         pomp_adjust_pa;
        int         pomp_adjust_pb;
        int         pomp_adjust_pc;
        int         pomp_adjust_ua;
        int         pomp_adjust_ub;
        int         eg_st_count;
    
	    varchar     err_msg[ERR_MSG_MAX_LEN + 1];       /*  エラーメッセージ  */
		short		ind_err_msg;
    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( mc_pno.arr, G_CMD_PN_PARAM.mc_pno);
    mc_pno.len = strlen(G_CMD_PN_PARAM.mc_pno);

    strcpy( mc_ver.arr, G_CMD_VR_PARAM.mc_ver);
    mc_ver.len = strlen(G_CMD_VR_PARAM.mc_ver);
    
    
    eg_adjust  = G_CMD_EA_PARAM.adjust;
    pomp_adjust_pa  = G_CMD_PA_PARAM.adjust;
    pomp_adjust_pb  = G_CMD_PB_PARAM.adjust;
    pomp_adjust_pc  = G_CMD_PC_PARAM.adjust;
    pomp_adjust_ua  = G_CMD_UA_PARAM.adjust;
    pomp_adjust_ub  = G_CMD_UB_PARAM.adjust;
    eg_st_count  = G_CMD_ST_PARAM.eg_st_count;

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [RES_MECHA_STATE] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,equip_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);

printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,mc_pno.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,mc_ver.arr);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,eg_adjust);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,pomp_adjust_pa);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,pomp_adjust_pb);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,pomp_adjust_pc);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,pomp_adjust_ua);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,pomp_adjust_ub);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,eg_st_count);
#endif

    /*  PL/SQL処理実行  */
    err_msg.len = 0;
    err_msg.arr[err_msg.len] = 0x00;
    ind_err_msg = 0;
    EXEC SQL EXECUTE
        BEGIN
            ITC.RES_MECHA_STATE(:equip_no, :sysdate, :proc, 
                    :mc_pno, :mc_ver, :eg_adjust, 
                    :pomp_adjust_pa, :pomp_adjust_pb, :pomp_adjust_pc, 
                    :pomp_adjust_ua, :pomp_adjust_ub, 
                    :eg_st_count,
                    :err_msg:ind_err_msg);
        END;
    END-EXEC;   

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [RES_MECHA_STATE] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   res_time_difference                                         */
/*  機能    :   メール種別「時差設定(応答)」時のDB更新処理を行う            */
/*  呼出形式:   res_time_difference()                                       */
/*                                                                          */
/*  関数型  :   int                                                         */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2013.03.26                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int res_time_difference(){
	
	#ifdef DEBUG
	printf( "[%s][Line:%04d]「res_time_difference」START\n", __FUNCTION__,__LINE__ );
	#endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     itc_serial_no[SERIAL_NO_MAX_LEN + 1];  /*  ITCシリアルNO      */
        varchar     sysdate[TIME_MAX_LEN + 1];             /*  共通システム日時   */
        varchar     proc[PROC_NAME_MAX_LEN + 1];           /*  プロセス名         */
        varchar     cmd_all[BODY_LINE_MAX_LEN+1];          /*  コマンド行全文     */
        varchar     td_r_value[MAIL_STATUS_MAX_LEN+1];     /*  メール状態         */
        varchar     td_r_status[MAIL_STATUS_MAX_LEN+1];    /*  メール状態         */
    EXEC SQL END DECLARE SECTION;

    strcpy( itc_serial_no.arr, G_CMD_COM_PARAM.itc_serial_no);
    itc_serial_no.len = strlen(G_CMD_COM_PARAM.itc_serial_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( cmd_all.arr, G_CMD_TD_PARAM.cmd_all);
    cmd_all.len = strlen(G_CMD_TD_PARAM.cmd_all);

    strcpy( td_r_value.arr, G_CMD_TD_PARAM.td_value);
    td_r_value.len = strlen(G_CMD_TD_PARAM.td_value);

    strcpy( td_r_status.arr, G_CMD_TD_PARAM.td_status);
    td_r_status.len = strlen(G_CMD_TD_PARAM.td_status);

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [RES_TIME_DIFFERENCE] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,itc_serial_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,cmd_all.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,td_r_value.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,td_r_status.arr);
#endif

    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
            ITC.RES_TIME_DIFFERENCE(:itc_serial_no, :sysdate, :proc, 
                    :cmd_all, :td_r_value, :td_r_status);
        END;
    END-EXEC;   

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [RES_TIME_DIFFERENCE] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   daily_ope                                             
/*  機能    :   メール種別「バッチ(稼働)」時のDB更新処理を行う        
/*  関数型  :   int                                                   
/*  呼出形式:   daily_ope()                                           
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2014.10.31                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int daily_ope(){
    #ifdef DEBUG
    printf( "[%s][Line:%04d]「daily_ope」START\n", __FUNCTION__,__LINE__ );
    #endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号                */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時        */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名              */
        varchar     latitude[LATITUDE_MAX_LEN + 1];     /*  緯度                    */
        varchar     longitude[LONGITUDE_MAX_LEN + 1];   /*  経度                    */
        varchar     posdate[TIME_MAX_LEN + 1];          /*  位置日時(年月日時分秒)  */
        int         idle_h;                             /*  無操作時間              */
        int         running_h;                          /*  走行時間                */
        int         high_r_h;                           /*  ハイリーチ使用時間      */
        int         nb_h;                               /*  N&B使用時間             */
        int         hour_meter;                         /*  受信アワメータ          */
        int         fuel_per;                           /*  燃料残量                */
        int         e_temp_1;                           /*  水温1                   */
        int         e_temp_2;                           /*  水温2                   */
        int         e_temp_3;                           /*  水温3                   */
        int         e_temp_4;                           /*  水温4                   */
        int         pump_p1;                            /*  圧力1                   */
        int         pump_p2;                            /*  圧力2                   */
        int         pump_p3;                            /*  圧力3                   */
        int         pump_p4;                            /*  圧力4                   */
        int         ope_amount;                         /*  ポンプ稼動量             */
        int         area_flg;                           /*  エリア内外フラグ         */
        int         change_h_ec;                        /*  ｴﾝｼﾞﾝｵｲﾙ交換残時間       */
        int         change_h_fc;                        /*  燃料フィルタ交換残時間   */
        int         change_h_hc;                        /*  作動油フィルタ交換残時間 */
        int         change_h_lc;                        /*  作動油交換残時間         */
        int         state_h;                            /*  ｵｰﾊﾞｰﾛｰﾄﾞ状態時間        */
        int         fuel_tmp;                           /*  燃料温度                 */
        int         fuel_dt;                            /*  燃料識別値(30℃換算値)   */
        int         fuel_cons_amount;                   /*  燃料消費量               */
        int         power_on_h;                         /*  稼働時間                 */
        int         chuuki;                             /*  駐機状態                 */
        int         i;
        varchar     itc_serial_no[SERIAL_NO_MAX_LEN + 1];  /*  ITCシリアルNO      */
        varchar     mail_date[TIME_MAX_LEN + 1];        /*  メール日付               */
        short       ind_mail_date;
        int         fuel_cons_h_mode;                   /*  Tier4a:燃料消費量_Hモード */
        int         fuel_cons_s_mode;                   /*  Tier4a:燃料消費量_Sモード */
        int         fuel_cons_e_mode;                   /*  Tier4a:燃料消費量_Eモード */
        int         fuel_pon_h_mode;                    /*  Tier4a:稼働時間_Hモード   */
        int         fuel_pon_s_mode;                    /*  Tier4a:稼働時間_Sモード   */
        int         fuel_pon_e_mode;                    /*  Tier4a:稼働時間_Eモード   */
        int         turning_h;                          /*  旋回操作時間              */
        varchar     dpf_level[2+1];                     /*  DPF目詰まりレベル         */
        varchar     td_value[5+1];                      /*  時差設定                  */


        varchar     ha_info_m[10+1];
        varchar     lock_info[10+1];
        varchar     date_yd[10+1];
        varchar     opetime_ot[24+1];
        varchar     xxxx_meter[10+1];
        varchar     loading_da[10+1];
        varchar     pump_work_h_mode[10+1];
        varchar     pump_work_s_mode[10+1];
        varchar     pump_work_e_mode[10+1];
        varchar     urea_level[10+1];

        int         hozen_cnt;                          /*  予防保全件数 */
        char  hozen_cmd[MAX_HOZEN_PARAM][CONST_C20 + 1];                  /*  予防保全(コマンド)      */
                 EXEC SQL VAR hozen_cmd IS STRING;
        char  hozen_p01[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１)          */
                 EXEC SQL VAR hozen_p01 IS STRING;
        char  hozen_p02[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２)          */
                 EXEC SQL VAR hozen_p02 IS STRING;
        char  hozen_p03[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値３)          */
                 EXEC SQL VAR hozen_p03 IS STRING;
        char  hozen_p04[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値４)          */
                 EXEC SQL VAR hozen_p04 IS STRING;
        char  hozen_p05[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値５)          */
                 EXEC SQL VAR hozen_p05 IS STRING;
        char  hozen_p06[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値６)          */
                 EXEC SQL VAR hozen_p06 IS STRING;
        char  hozen_p07[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値７)          */
                 EXEC SQL VAR hozen_p07 IS STRING;
        char  hozen_p08[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値８)          */
                 EXEC SQL VAR hozen_p08 IS STRING;
        char  hozen_p09[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値９)          */
                 EXEC SQL VAR hozen_p09 IS STRING;
        char  hozen_p10[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１０)          */
                 EXEC SQL VAR hozen_p10 IS STRING;
        char  hozen_p11[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１１)          */
                 EXEC SQL VAR hozen_p11 IS STRING;
        char  hozen_p12[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１２)          */
                 EXEC SQL VAR hozen_p12 IS STRING;
        char  hozen_p13[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１３)          */
                 EXEC SQL VAR hozen_p13 IS STRING;
        char  hozen_p14[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１４)          */
                 EXEC SQL VAR hozen_p14 IS STRING;
        char  hozen_p15[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１５)          */
                 EXEC SQL VAR hozen_p15 IS STRING;
        char  hozen_p16[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１６)          */
                 EXEC SQL VAR hozen_p16 IS STRING;
        char  hozen_p17[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１７)          */
                 EXEC SQL VAR hozen_p17 IS STRING;
        char  hozen_p18[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１８)          */
                 EXEC SQL VAR hozen_p18 IS STRING;
        char  hozen_p19[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１９)          */
                 EXEC SQL VAR hozen_p19 IS STRING;
        char  hozen_p20[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２０)          */
                 EXEC SQL VAR hozen_p20 IS STRING;
        char  hozen_p21[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２１)          */
                 EXEC SQL VAR hozen_p21 IS STRING;
        char  hozen_p22[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２２)          */
                 EXEC SQL VAR hozen_p22 IS STRING;
        char  hozen_p23[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２３)          */
                 EXEC SQL VAR hozen_p23 IS STRING;
        char  hozen_p24[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２４)          */
                 EXEC SQL VAR hozen_p24 IS STRING;
        char  hozen_p25[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２５)          */
                 EXEC SQL VAR hozen_p25 IS STRING;
        char  hozen_p26[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２６)          */
                 EXEC SQL VAR hozen_p26 IS STRING;

        int         hanyo_cnt;                                             /*  拡張稼働情報件数 */
        char  hanyo_p00[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値０)          */
                 EXEC SQL VAR hanyo_p00 IS STRING;
        char  hanyo_p01[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値１)          */
                 EXEC SQL VAR hanyo_p01 IS STRING;
        char  hanyo_p02[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値２)          */
                 EXEC SQL VAR hanyo_p02 IS STRING;
        char  hanyo_p03[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値３)          */
                 EXEC SQL VAR hanyo_p03 IS STRING;
        char  hanyo_p04[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値４)          */
                 EXEC SQL VAR hanyo_p04 IS STRING;
        char  hanyo_p05[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値５)          */
                 EXEC SQL VAR hanyo_p05 IS STRING;
        char  hanyo_p06[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値６)          */
                 EXEC SQL VAR hanyo_p06 IS STRING;
        char  hanyo_p07[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値７)          */
                 EXEC SQL VAR hanyo_p07 IS STRING;
        char  hanyo_p08[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値８)          */
                 EXEC SQL VAR hanyo_p08 IS STRING;
        char  hanyo_p09[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値９)          */
                 EXEC SQL VAR hanyo_p09 IS STRING;

    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( latitude.arr, G_CMD_POS_PARAM.latitude);
    latitude.len = strlen(G_CMD_POS_PARAM.latitude);

    strcpy( longitude.arr, G_CMD_POS_PARAM.longitude);
    longitude.len = strlen(G_CMD_POS_PARAM.longitude);

    strcpy( posdate.arr, G_CMD_POS_PARAM.hh24middmm);
    posdate.len = strlen(G_CMD_POS_PARAM.hh24middmm);
    


    strcpy( ha_info_m.arr, G_CMD_HA_PARAM.value01);
    ha_info_m.len = strlen(G_CMD_HA_PARAM.value01);

    strcpy( lock_info.arr, G_CMD_LK_PARAM.value01);
    lock_info.len = strlen(G_CMD_LK_PARAM.value01);

    strcpy( date_yd.arr, G_CMD_YD_PARAM.value01);
    date_yd.len = strlen(G_CMD_YD_PARAM.value01);

    strcpy( opetime_ot.arr, G_CMD_OT_PARAM.value01);
    opetime_ot.len = strlen(G_CMD_OT_PARAM.value01);

    strcpy( xxxx_meter.arr, G_CMD_M_PARAM.value01);
    xxxx_meter.len = strlen(G_CMD_M_PARAM.value01);

    strcpy( loading_da.arr, G_CMD_DA_PARAM.value01);
    loading_da.len = strlen(G_CMD_DA_PARAM.value01);

    strcpy( pump_work_h_mode.arr, G_CMD_JH_PARAM.value01);
    pump_work_h_mode.len = strlen(G_CMD_JH_PARAM.value01);

    strcpy( pump_work_s_mode.arr, G_CMD_JS_PARAM.value01);
    pump_work_s_mode.len = strlen(G_CMD_JS_PARAM.value01);

    strcpy( pump_work_e_mode.arr, G_CMD_JE_PARAM.value01);
    pump_work_e_mode.len = strlen(G_CMD_JE_PARAM.value01);

    strcpy( urea_level.arr, G_CMD_AB_PARAM.value01);
    urea_level.len = strlen(G_CMD_AB_PARAM.value01);

    idle_h = G_CMD_I_PARAM.idle_h;
    running_h = G_CMD_R_PARAM.running_h;
    high_r_h = G_CMD_C_PARAM.high_r_h;
    nb_h = G_CMD_N_PARAM.nb_h;
    hour_meter = G_CMD_H_PARAM.power_on_h;
    fuel_per = G_CMD_F_PARAM.fuel_per;
    e_temp_1 = G_CMD_W_PARAM.e_temp_1;
    e_temp_2 = G_CMD_W_PARAM.e_temp_2;
    e_temp_3 = G_CMD_W_PARAM.e_temp_3;
    e_temp_4 = G_CMD_W_PARAM.e_temp_4;
    pump_p1 = G_CMD_U_PARAM.pump_p1;
    pump_p2 = G_CMD_U_PARAM.pump_p2;
    pump_p3 = G_CMD_U_PARAM.pump_p3;
    pump_p4 = G_CMD_U_PARAM.pump_p4;
    ope_amount = G_CMD_J_PARAM.ope_amount;
    area_flg = G_CMD_A_PARAM.area_flg;
    change_h_ec = G_CMD_EC_PARAM.change_h;
    change_h_fc = G_CMD_FC_PARAM.change_h;
    change_h_hc = G_CMD_HC_PARAM.change_h;
    change_h_lc = G_CMD_LC_PARAM.change_h;
    state_h = G_CMD_OV_PARAM.state_h;
    fuel_tmp = G_CMD_FT_PARAM.fuel_tmp;
    fuel_dt = G_CMD_FS_PARAM.fuel_dt;
    fuel_cons_amount = G_CMD_NP_PARAM.fuel_cons_amount;
    power_on_h = G_CMD_NP_PARAM.power_on_h;
    chuuki = G_CMD_POS_PARAM.chuuki;


    /*  Tier4a:燃料消費量_Hモード */
    fuel_cons_h_mode = G_CMD_MC_PARAM.fuel_cons_h_mode;
    /*  Tier4a:燃料消費量_Sモード */
    fuel_cons_s_mode = G_CMD_MC_PARAM.fuel_cons_s_mode;
    /*  Tier4a:燃料消費量_Eモード */
    fuel_cons_e_mode = G_CMD_MC_PARAM.fuel_cons_e_mode;
    /*  Tier4a:稼働時間_Hモード   */
    fuel_pon_h_mode = G_CMD_MT_PARAM.fuel_pon_h_mode;
    /*  Tier4a:稼働時間_Sモード   */
    fuel_pon_s_mode = G_CMD_MT_PARAM.fuel_pon_s_mode;
    /*  Tier4a:稼働時間_Eモード   */
    fuel_pon_e_mode = G_CMD_MT_PARAM.fuel_pon_e_mode;
    /*  旋回操作時間              */
    turning_h = G_CMD_SW_PARAM.turning_h;
    /*  DPF目詰まりレベル         */
    vcstrncpy( &dpf_level, G_CMD_SL_PARAM.dpf_level,2);
    /*  時差                      */
    vcstrncpy( &td_value, G_CMD_TD_PARAM.td_value,5);

    strcpy( itc_serial_no.arr, G_CMD_COM_PARAM.itc_serial_no);
    itc_serial_no.len = strlen(G_CMD_COM_PARAM.itc_serial_no);


    memset(hozen_cmd,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p01,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p02,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p03,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p04,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p05,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p06,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p07,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p08,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p09,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p10,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p11,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p12,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p13,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p14,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p15,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p16,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p17,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p18,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p19,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p20,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p21,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p22,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p23,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p24,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p25,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p26,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    hozen_cnt = G_CMD_HOZEN_PARAM[0].count;
    for(i=0;i<hozen_cnt;i++){
        CMD_C20X5_PARAM *cur = &G_CMD_HOZEN_PARAM[i];
        strcpy(hozen_cmd[i]  ,cur->value00);
        strcpy(hozen_p01[i]  ,cur->value01);
        strcpy(hozen_p02[i]  ,cur->value02);
        strcpy(hozen_p03[i]  ,cur->value03);
        strcpy(hozen_p04[i]  ,cur->value04);
        strcpy(hozen_p05[i]  ,cur->value05);
        strcpy(hozen_p06[i]  ,cur->value06);
        strcpy(hozen_p07[i]  ,cur->value07);
        strcpy(hozen_p08[i]  ,cur->value08);
        strcpy(hozen_p09[i]  ,cur->value09);
        strcpy(hozen_p10[i]  ,cur->value10);
        strcpy(hozen_p11[i]  ,cur->value11);
        strcpy(hozen_p12[i]  ,cur->value12);
        strcpy(hozen_p13[i]  ,cur->value13);
        strcpy(hozen_p14[i]  ,cur->value14);
        strcpy(hozen_p15[i]  ,cur->value15);
        strcpy(hozen_p16[i]  ,cur->value16);
        strcpy(hozen_p17[i]  ,cur->value17);
        strcpy(hozen_p18[i]  ,cur->value18);
        strcpy(hozen_p19[i]  ,cur->value19);
        strcpy(hozen_p20[i]  ,cur->value20);
        strcpy(hozen_p21[i]  ,cur->value21);
        strcpy(hozen_p22[i]  ,cur->value22);
        strcpy(hozen_p23[i]  ,cur->value23);
        strcpy(hozen_p24[i]  ,cur->value24);
        strcpy(hozen_p25[i]  ,cur->value25);
        strcpy(hozen_p26[i]  ,cur->value26);
    }


    memset(hanyo_p00,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p01,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p02,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p03,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p04,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p05,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p06,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p07,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p08,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p09,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    hanyo_cnt = G_CMD_DAILY_EXT_PARAM[0].count;
    for(i=0;i<hanyo_cnt;i++){
        CMD_C20X5_PARAM *cur = &G_CMD_DAILY_EXT_PARAM[i];
        strcpy(hanyo_p00[i]  ,cur->value00);
        strcpy(hanyo_p01[i]  ,cur->value01);
        strcpy(hanyo_p02[i]  ,cur->value02);
        strcpy(hanyo_p03[i]  ,cur->value03);
        strcpy(hanyo_p04[i]  ,cur->value04);
        strcpy(hanyo_p05[i]  ,cur->value05);
        strcpy(hanyo_p06[i]  ,cur->value06);
        strcpy(hanyo_p07[i]  ,cur->value07);
        strcpy(hanyo_p08[i]  ,cur->value08);
        strcpy(hanyo_p09[i]  ,cur->value09);
    }


    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

    strcpy( ha_info_m.arr, G_CMD_HA_PARAM.value01);
    ha_info_m.len = strlen(G_CMD_HA_PARAM.value01);

    strcpy( lock_info.arr, G_CMD_LK_PARAM.value01);
    lock_info.len = strlen(G_CMD_LK_PARAM.value01);

    strcpy( date_yd.arr, G_CMD_YD_PARAM.value01);
    date_yd.len = strlen(G_CMD_YD_PARAM.value01);

    strcpy( opetime_ot.arr, G_CMD_OT_PARAM.value01);
    opetime_ot.len = strlen(G_CMD_OT_PARAM.value01);

    strcpy( xxxx_meter.arr, G_CMD_M_PARAM.value01);
    xxxx_meter.len = strlen(G_CMD_M_PARAM.value01);

    strcpy( loading_da.arr, G_CMD_DA_PARAM.value01);
    loading_da.len = strlen(G_CMD_DA_PARAM.value01);

    strcpy( pump_work_h_mode.arr, G_CMD_JH_PARAM.value01);
    pump_work_h_mode.len = strlen(G_CMD_JH_PARAM.value01);

    strcpy( pump_work_s_mode.arr, G_CMD_JS_PARAM.value01);
    pump_work_s_mode.len = strlen(G_CMD_JS_PARAM.value01);

    strcpy( pump_work_e_mode.arr, G_CMD_JE_PARAM.value01);
    pump_work_e_mode.len = strlen(G_CMD_JE_PARAM.value01);

    strcpy( urea_level.arr, G_CMD_AB_PARAM.value01);
    urea_level.len = strlen(G_CMD_AB_PARAM.value01);

#ifdef DEBUG

printf( "[%s][Line:%04d]プロシジャ [DAILY_OPE] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"equip_no.arr",equip_no.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"sysdate.arr",sysdate.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"proc.arr",proc.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"latitude.arr",latitude.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"longitude.arr",longitude.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"posdate.arr",posdate.arr);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"ha_info_m.arr",ha_info_m.arr);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"area_flg",area_flg);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"lock_info.arr",lock_info.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"td_value.arr",td_value.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"date_yd.arr",date_yd.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"opetime_ot.arr",opetime_ot.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"xxxx_meter.arr",xxxx_meter.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"loading_da.arr",loading_da.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"pump_work_h_mode.arr",pump_work_h_mode.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"pump_work_s_mode.arr",pump_work_s_mode.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"pump_work_e_mode.arr",pump_work_e_mode.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"urea_level.arr",urea_level.arr);


printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"idle_h",idle_h);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"running_h",running_h);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"high_r_h",high_r_h);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"nb_h",nb_h);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"hour_meter",hour_meter);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"fuel_per",fuel_per);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"e_temp_1",e_temp_1);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"e_temp_2",e_temp_2);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"e_temp_3",e_temp_3);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"e_temp_4",e_temp_4);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"pump_p1",pump_p1);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"pump_p2",pump_p2);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"pump_p3",pump_p3);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"pump_p4",pump_p4);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"ope_amount",ope_amount);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"change_h_ec",change_h_ec);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"change_h_fc",change_h_fc);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"change_h_hc",change_h_hc);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"change_h_lc",change_h_lc);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"state_h",state_h);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"fuel_tmp",fuel_tmp);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"fuel_dt",fuel_dt);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"fuel_cons_amount",fuel_cons_amount);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"power_on_h",power_on_h);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"chuuki",chuuki);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"itc_serial_no.arr",itc_serial_no.arr);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"fuel_cons_h_mode",fuel_cons_h_mode);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"fuel_cons_s_mode",fuel_cons_s_mode);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"fuel_cons_e_mode",fuel_cons_e_mode);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"fuel_pon_h_mode",fuel_pon_h_mode);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"fuel_pon_s_mode",fuel_pon_s_mode);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"fuel_pon_e_mode",fuel_pon_e_mode);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"turning_h",turning_h);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"dpf_level.arr",dpf_level.arr);


printf( "[%s][Line:%04d]hozen_cnt[%d]\n", __FUNCTION__,__LINE__ ,hozen_cnt);
printf( "[%s][Line:%04d]hozen_cmd[i] = [%s]\n", __FUNCTION__,__LINE__ ,hozen_cmd[0]);
printf( "[%s][Line:%04d]hozen_p01[i] = [%s]\n", __FUNCTION__,__LINE__ ,hozen_p01[0]);
printf( "[%s][Line:%04d]hozen_p02[i] = [%s]\n", __FUNCTION__,__LINE__ ,hozen_p02[0]);
printf( "[%s][Line:%04d]hozen_p03[i] = [%s]\n", __FUNCTION__,__LINE__ ,hozen_p03[0]);
printf( "[%s][Line:%04d]hozen_p04[i] = [%s]\n", __FUNCTION__,__LINE__ ,hozen_p04[0]);


#endif

    /*  PL/SQL処理実行  */
    mail_date.len = 0;
    mail_date.arr[mail_date.len] = 0x00;
    mail_date.len = 0;
    mail_date.arr[mail_date.len] = 0x00;
    ind_mail_date = 0;
    EXEC SQL EXECUTE
        BEGIN
        
            ITC.UPD_NOW_TD(:itc_serial_no,:td_value);
        
            ITC.TIME_OPE_NEW(
                 :equip_no
                ,:sysdate
                ,:proc
                ,:latitude
                ,:longitude
                ,:posdate
                ,:ha_info_m
                ,:area_flg
                ,:lock_info
                ,:td_value
                ,:date_yd
                ,:opetime_ot
                ,:xxxx_meter
                ,:hour_meter
                ,:change_h_ec
                ,:change_h_fc
                ,:change_h_hc
                ,:change_h_lc
                ,:fuel_per
                ,:fuel_tmp
                ,:fuel_dt
                ,:dpf_level
                ,:idle_h
                ,:running_h
                ,:nb_h
                ,:high_r_h
                ,:state_h
                ,:turning_h
                ,:e_temp_1
                ,:e_temp_2
                ,:e_temp_3
                ,:e_temp_4
                ,:pump_p1
                ,:pump_p2
                ,:pump_p3
                ,:pump_p4
                ,:loading_da
                ,:itc_serial_no
                ,:fuel_cons_h_mode
                ,:fuel_cons_s_mode
                ,:fuel_cons_e_mode
                ,:fuel_pon_h_mode
                ,:fuel_pon_s_mode
                ,:fuel_pon_e_mode
                ,:pump_work_h_mode
                ,:pump_work_s_mode
                ,:pump_work_e_mode
                ,:urea_level
                ,:hozen_cnt
                ,:hozen_cmd
                ,:hozen_p01
                ,:hozen_p02
                ,:hozen_p03
                ,:hozen_p04
                ,:hozen_p05
                ,:hozen_p06
                ,:hozen_p07
                ,:hozen_p08
                ,:hozen_p09
                ,:hozen_p10
                ,:hozen_p11
                ,:hozen_p12
                ,:hozen_p13
                ,:hozen_p14
                ,:hozen_p15
                ,:hozen_p16
                ,:hozen_p17
                ,:hozen_p18
                ,:hozen_p19
                ,:hozen_p20
                ,:hozen_p21
                ,:hozen_p22
                ,:hozen_p23
                ,:hozen_p24
                ,:hozen_p25
                ,:hozen_p26
                ,:hanyo_cnt
                ,:hanyo_p00
                ,:hanyo_p01
                ,:hanyo_p02
                ,:hanyo_p03
                ,:hanyo_p04
                ,:hanyo_p05
                ,:hanyo_p06
                ,:hanyo_p07
                ,:hanyo_p08
                ,:hanyo_p09

                ,:mail_date:ind_mail_date
            );

        END;
    END-EXEC;

    mail_date.arr[mail_date.len] = 0x00;
    strcpy( G_CMD_COM_PARAM.mail_date, mail_date.arr );

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [NIGHTTIME_OPE] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}



/* ------------------------------------------------------------------------ */
/*  関数名  :   daily_ope                                             
/*  機能    :   メール種別「バッチ(稼働)」時のDB更新処理を行う        
/*  関数型  :   int                                                   
/*  呼出形式:   daily_ope()                                           
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2014.10.31                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int daily_non_ope(){
    #ifdef DEBUG
    printf( "[%s][Line:%04d]「daily_non_ope」START\n", __FUNCTION__,__LINE__ );
    #endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号                */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時        */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名              */
        varchar     latitude[LATITUDE_MAX_LEN + 1];     /*  緯度                    */
        varchar     longitude[LONGITUDE_MAX_LEN + 1];   /*  経度                    */
        varchar     posdate[TIME_MAX_LEN + 1];          /*  位置日時(年月日時分秒)  */
        int         area_flg;                           /*  エリア内外フラグ         */
        int         i;
        varchar     itc_serial_no[SERIAL_NO_MAX_LEN + 1];  /*  ITCシリアルNO      */
        varchar     mail_date[TIME_MAX_LEN + 1];        /*  メール日付               */
        short       ind_mail_date;
        varchar     td_value[5+1];                      /*  時差設定                  */


        varchar     ha_info_m[10+1];
        varchar     lock_info[10+1];
        varchar     date_yd[10+1];

        int         hanyo_cnt;                          /*  拡張稼働情報件数 */
        char  hanyo_p00[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値０)          */
                 EXEC SQL VAR hanyo_p00 IS STRING;
        char  hanyo_p01[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値１)          */
                 EXEC SQL VAR hanyo_p01 IS STRING;
        char  hanyo_p02[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値２)          */
                 EXEC SQL VAR hanyo_p02 IS STRING;
        char  hanyo_p03[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値３)          */
                 EXEC SQL VAR hanyo_p03 IS STRING;
        char  hanyo_p04[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値４)          */
                 EXEC SQL VAR hanyo_p04 IS STRING;
        char  hanyo_p05[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値５)          */
                 EXEC SQL VAR hanyo_p05 IS STRING;
        char  hanyo_p06[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値６)          */
                 EXEC SQL VAR hanyo_p06 IS STRING;
        char  hanyo_p07[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値７)          */
                 EXEC SQL VAR hanyo_p07 IS STRING;
        char  hanyo_p08[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値８)          */
                 EXEC SQL VAR hanyo_p08 IS STRING;
        char  hanyo_p09[MAX_HANYO_PARAM][CONST_C20 + 1];                   /*  拡張稼働情報(値９)          */
                 EXEC SQL VAR hanyo_p09 IS STRING;

        int         hozen_cnt;                          /*  予防保全件数 */
        char  hozen_cmd[MAX_HOZEN_PARAM][CONST_C20 + 1];                  /*  予防保全(コマンド)      */
                 EXEC SQL VAR hozen_cmd IS STRING;
        char  hozen_p01[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１)          */
                 EXEC SQL VAR hozen_p01 IS STRING;
        char  hozen_p02[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２)          */
                 EXEC SQL VAR hozen_p02 IS STRING;
        char  hozen_p03[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値３)          */
                 EXEC SQL VAR hozen_p03 IS STRING;
        char  hozen_p04[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値４)          */
                 EXEC SQL VAR hozen_p04 IS STRING;
        char  hozen_p05[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値５)          */
                 EXEC SQL VAR hozen_p05 IS STRING;
        char  hozen_p06[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値６)          */
                 EXEC SQL VAR hozen_p06 IS STRING;
        char  hozen_p07[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値７)          */
                 EXEC SQL VAR hozen_p07 IS STRING;
        char  hozen_p08[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値８)          */
                 EXEC SQL VAR hozen_p08 IS STRING;
        char  hozen_p09[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値９)          */
                 EXEC SQL VAR hozen_p09 IS STRING;
        char  hozen_p10[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１０)          */
                 EXEC SQL VAR hozen_p10 IS STRING;
        char  hozen_p11[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１１)          */
                 EXEC SQL VAR hozen_p11 IS STRING;
        char  hozen_p12[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１２)          */
                 EXEC SQL VAR hozen_p12 IS STRING;
        char  hozen_p13[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１３)          */
                 EXEC SQL VAR hozen_p13 IS STRING;
        char  hozen_p14[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１４)          */
                 EXEC SQL VAR hozen_p14 IS STRING;
        char  hozen_p15[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１５)          */
                 EXEC SQL VAR hozen_p15 IS STRING;
        char  hozen_p16[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１６)          */
                 EXEC SQL VAR hozen_p16 IS STRING;
        char  hozen_p17[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１７)          */
                 EXEC SQL VAR hozen_p17 IS STRING;
        char  hozen_p18[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１８)          */
                 EXEC SQL VAR hozen_p18 IS STRING;
        char  hozen_p19[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値１９)          */
                 EXEC SQL VAR hozen_p19 IS STRING;
        char  hozen_p20[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２０)          */
                 EXEC SQL VAR hozen_p20 IS STRING;
        char  hozen_p21[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２１)          */
                 EXEC SQL VAR hozen_p21 IS STRING;
        char  hozen_p22[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２２)          */
                 EXEC SQL VAR hozen_p22 IS STRING;
        char  hozen_p23[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２３)          */
                 EXEC SQL VAR hozen_p23 IS STRING;
        char  hozen_p24[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２４)          */
                 EXEC SQL VAR hozen_p24 IS STRING;
        char  hozen_p25[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２５)          */
                 EXEC SQL VAR hozen_p25 IS STRING;
        char  hozen_p26[MAX_HOZEN_PARAM][CONST_C20 + 1];                   /*  予防保全(値２６)          */
                 EXEC SQL VAR hozen_p26 IS STRING;

    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( latitude.arr, G_CMD_POS_PARAM.latitude);
    latitude.len = strlen(G_CMD_POS_PARAM.latitude);

    strcpy( longitude.arr, G_CMD_POS_PARAM.longitude);
    longitude.len = strlen(G_CMD_POS_PARAM.longitude);

    strcpy( posdate.arr, G_CMD_POS_PARAM.hh24middmm);
    posdate.len = strlen(G_CMD_POS_PARAM.hh24middmm);
    
    area_flg = G_CMD_A_PARAM.area_flg;

    /*  時差                      */
    vcstrncpy( &td_value, G_CMD_TD_PARAM.td_value,5);

    strcpy( date_yd.arr, G_CMD_YD_PARAM.value01);
    date_yd.len = strlen(G_CMD_YD_PARAM.value01);

    strcpy( ha_info_m.arr, G_CMD_HA_PARAM.value01);
    ha_info_m.len = strlen(G_CMD_HA_PARAM.value01);

    strcpy( itc_serial_no.arr, G_CMD_COM_PARAM.itc_serial_no);
    itc_serial_no.len = strlen(G_CMD_COM_PARAM.itc_serial_no);

    memset(hanyo_p00,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p01,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p02,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p03,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p04,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p05,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p06,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p07,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p08,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    memset(hanyo_p09,0x00,MAX_HANYO_PARAM  * (CONST_C20 + 1));
    hanyo_cnt = G_CMD_DAILY_EXT_PARAM[0].count;
    for(i=0;i<hanyo_cnt;i++){
        CMD_C20X5_PARAM *cur = &G_CMD_DAILY_EXT_PARAM[i];
        strcpy(hanyo_p00[i]  ,cur->value00);
        strcpy(hanyo_p01[i]  ,cur->value01);
        strcpy(hanyo_p02[i]  ,cur->value02);
        strcpy(hanyo_p03[i]  ,cur->value03);
        strcpy(hanyo_p04[i]  ,cur->value04);
        strcpy(hanyo_p05[i]  ,cur->value05);
        strcpy(hanyo_p06[i]  ,cur->value06);
        strcpy(hanyo_p07[i]  ,cur->value07);
        strcpy(hanyo_p08[i]  ,cur->value08);
        strcpy(hanyo_p09[i]  ,cur->value09);
    }


    memset(hozen_cmd,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p01,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p02,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p03,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p04,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p05,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p06,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p07,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p08,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p09,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p10,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p11,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p12,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p13,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p14,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p15,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p16,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p17,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p18,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p19,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p20,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p21,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p22,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p23,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p24,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p25,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    memset(hozen_p26,0x00,MAX_HOZEN_PARAM  * (CONST_C20 + 1));
    hozen_cnt = G_CMD_HOZEN_PARAM[0].count;
    for(i=0;i<hozen_cnt;i++){
        CMD_C20X5_PARAM *cur = &G_CMD_HOZEN_PARAM[i];
        strcpy(hozen_cmd[i]  ,cur->value00);
        strcpy(hozen_p01[i]  ,cur->value01);
        strcpy(hozen_p02[i]  ,cur->value02);
        strcpy(hozen_p03[i]  ,cur->value03);
        strcpy(hozen_p04[i]  ,cur->value04);
        strcpy(hozen_p05[i]  ,cur->value05);
        strcpy(hozen_p06[i]  ,cur->value06);
        strcpy(hozen_p07[i]  ,cur->value07);
        strcpy(hozen_p08[i]  ,cur->value08);
        strcpy(hozen_p09[i]  ,cur->value09);
        strcpy(hozen_p10[i]  ,cur->value10);
        strcpy(hozen_p11[i]  ,cur->value11);
        strcpy(hozen_p12[i]  ,cur->value12);
        strcpy(hozen_p13[i]  ,cur->value13);
        strcpy(hozen_p14[i]  ,cur->value14);
        strcpy(hozen_p15[i]  ,cur->value15);
        strcpy(hozen_p16[i]  ,cur->value16);
        strcpy(hozen_p17[i]  ,cur->value17);
        strcpy(hozen_p18[i]  ,cur->value18);
        strcpy(hozen_p19[i]  ,cur->value19);
        strcpy(hozen_p20[i]  ,cur->value20);
        strcpy(hozen_p21[i]  ,cur->value21);
        strcpy(hozen_p22[i]  ,cur->value22);
        strcpy(hozen_p23[i]  ,cur->value23);
        strcpy(hozen_p24[i]  ,cur->value24);
        strcpy(hozen_p25[i]  ,cur->value25);
        strcpy(hozen_p26[i]  ,cur->value26);
    }

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [DAILY_OPE] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,equip_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,itc_serial_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,latitude.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,longitude.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,posdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,ha_info_m.arr);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,area_flg);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,td_value.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,date_yd.arr);


#endif

    /*  PL/SQL処理実行  */
    mail_date.len = 0;
    mail_date.arr[mail_date.len] = 0x00;
    mail_date.len = 0;
    mail_date.arr[mail_date.len] = 0x00;
    ind_mail_date = 0;
    EXEC SQL EXECUTE
        BEGIN
            ITC.TIME_NON_OPE_NEW(
                 :equip_no
                ,:itc_serial_no
               	,:sysdate
         		,:proc
				,:latitude
				,:longitude
				,:posdate
				,:ha_info_m
				,:area_flg
				,:td_value
				,:date_yd

				,:hozen_cnt
				,:hozen_cmd
				,:hozen_p01
				,:hozen_p02
				,:hozen_p03
				,:hozen_p04
				,:hozen_p05
				,:hozen_p06
				,:hozen_p07
				,:hozen_p08
				,:hozen_p09
				,:hozen_p10
				,:hozen_p11
				,:hozen_p12
				,:hozen_p13
				,:hozen_p14
				,:hozen_p15
				,:hozen_p16
				,:hozen_p17
				,:hozen_p18
				,:hozen_p19
				,:hozen_p20
				,:hozen_p21
				,:hozen_p22
				,:hozen_p23
				,:hozen_p24
				,:hozen_p25
				,:hozen_p26

				,:hanyo_cnt
				,:hanyo_p00
				,:hanyo_p01
				,:hanyo_p02
				,:hanyo_p03
				,:hanyo_p04
				,:hanyo_p05
				,:hanyo_p06
				,:hanyo_p07
				,:hanyo_p08
				,:hanyo_p09
				,:mail_date:ind_mail_date
            );

        END;
    END-EXEC;

    mail_date.arr[mail_date.len] = 0x00;
    strcpy( G_CMD_COM_PARAM.mail_date, mail_date.arr );

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [daily_non_ope] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   warn_model                              
/*  機能    :   メール種別「共通パターン」時のDB更新処理を行う 
/*  関数型  :   int                                  
/*  呼出形式:   warn_model()                    
/*                                                   
/*  戻り値  :   0：正常  0以外：異常                 
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2014.10.31                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int warn_model(char *p_alarm_cd,char *p_abnormal_flg){
	
	#ifdef DEBUG
	printf( "[%s][Line:%04d]「warn_model」START\n", __FUNCTION__,__LINE__ );
	printf( "[%s][Line:%04d]「p_alarm_cd」[%s]\n", __FUNCTION__,__LINE__ ,p_alarm_cd);
	#endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号                */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時        */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名              */
        varchar     alarm_cd[ALARM_CD_MAX_LEN + 1];     /*  警報コード              */
        varchar     latitude[LATITUDE_MAX_LEN + 1];     /*  緯度                    */
        varchar     longitude[LONGITUDE_MAX_LEN + 1];   /*  経度                    */
        varchar     posdate[TIME_MAX_LEN + 1];          /*  位置日時(年月日時分秒)  */
        int         abnormal_flg;                       /*  異常フラグ              */
        varchar     itc_serial_no[SERIAL_NO_MAX_LEN + 1];  /*  ITCシリアルNO        */
        varchar     mail_date[TIME_MAX_LEN + 1];        /*  メール日付               */
        short       ind_mail_date;
    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( latitude.arr, G_CMD_POS_PARAM.latitude);
    latitude.len = strlen(G_CMD_POS_PARAM.latitude);

    strcpy( longitude.arr, G_CMD_POS_PARAM.longitude);
    longitude.len = strlen(G_CMD_POS_PARAM.longitude);

    strcpy( posdate.arr, G_CMD_POS_PARAM.hh24middmm);
    posdate.len = strlen(G_CMD_POS_PARAM.hh24middmm);

    strcpy( alarm_cd.arr,p_alarm_cd);
    alarm_cd.len = strlen(p_alarm_cd);

	if(!strcmp(p_abnormal_flg,"1")){
	    abnormal_flg = 1;
	}else{
	    abnormal_flg = 0;
	}

    strcpy( itc_serial_no.arr, G_CMD_COM_PARAM.itc_serial_no);
    itc_serial_no.len = strlen(G_CMD_COM_PARAM.itc_serial_no);

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [warn_model] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,equip_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,alarm_cd.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,latitude.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,longitude.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,posdate.arr);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,abnormal_flg);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,itc_serial_no.arr);
#endif

    mail_date.len = 0;
    mail_date.arr[mail_date.len] = 0x00;
    ind_mail_date = 0;
    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
            ITC.WARN_MODEL(:equip_no, :sysdate, :proc, :alarm_cd,
                    :latitude, :longitude, :posdate, :abnormal_flg, :itc_serial_no, :mail_date:ind_mail_date);
        END;
    END-EXEC;

    mail_date.arr[mail_date.len] = 0x00;
    strcpy( G_CMD_COM_PARAM.mail_date, mail_date.arr );

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [warn_model] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   vcu_com_fail_alarm
/*  機能    :   メール種別「VCU通信不能警報」時のDB更新処理を行う
/*  関数型  :   int
/*  呼出形式:   vcu_com_fail_alarm()
/*
/*  戻り値  :   0：正常  0以外：異常
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2021.04.02                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int vcu_com_fail_alarm(char *p_alarm_cd, char *p_status){
	
	#ifdef DEBUG
	printf( "[%s][Line:%04d]「vcu_com_fail_alarm」START\n", __FUNCTION__,__LINE__ );
	printf( "[%s][Line:%04d]「p_alarm_cd」[%s]\n", __FUNCTION__,__LINE__ ,p_alarm_cd);
	#endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号                */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時        */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名              */

        varchar     latitude[LATITUDE_MAX_LEN + 1];     /*  緯度                    */
        varchar     longitude[LONGITUDE_MAX_LEN + 1];   /*  経度                    */
        varchar     posdate[TIME_MAX_LEN + 1];          /*  位置日時(年月日時分秒)  */

        varchar     alarm_cd[CMD_MAX_LEN + 1];          /*  データ区分              */
        int         status;                             /*  状態                    */

        varchar     itc_serial_no[SERIAL_NO_MAX_LEN + 1];  /*  ITCシリアルNO        */
        varchar     mail_date[TIME_MAX_LEN + 1];        /*  メール日付               */
        short       ind_mail_date;
    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( latitude.arr, G_CMD_POS_PARAM.latitude);
    latitude.len = strlen(G_CMD_POS_PARAM.latitude);

    strcpy( longitude.arr, G_CMD_POS_PARAM.longitude);
    longitude.len = strlen(G_CMD_POS_PARAM.longitude);

    strcpy( posdate.arr, G_CMD_POS_PARAM.hh24middmm);
    posdate.len = strlen(G_CMD_POS_PARAM.hh24middmm);

    strcpy( alarm_cd.arr, p_alarm_cd);
    alarm_cd.len = strlen(p_alarm_cd);

	if(!strcmp(p_status,"1")){
	    status = 1;
	}else{
	    status = 0;
	}

    strcpy( itc_serial_no.arr, G_CMD_COM_PARAM.itc_serial_no);
    itc_serial_no.len = strlen(G_CMD_COM_PARAM.itc_serial_no);

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [vcu_com_fail_alarm] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,equip_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,alarm_cd.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,latitude.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,longitude.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,posdate.arr);
printf( "[%s][Line:%04d]Param[%d]\n", __FUNCTION__,__LINE__ ,status);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,itc_serial_no.arr);
#endif

    mail_date.len = 0;
    mail_date.arr[mail_date.len] = 0x00;
    ind_mail_date = 0;
    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
            ITC.VCU_COM_FAIL_ALARM(:equip_no, :sysdate, :proc,
                    :latitude, :longitude, :posdate, :status, :itc_serial_no, :mail_date:ind_mail_date);
        END;
    END-EXEC;

    mail_date.arr[mail_date.len] = 0x00;
    strcpy( G_CMD_COM_PARAM.mail_date, mail_date.arr );

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [vcu_com_fail_alarm] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   res_remote_dl                                 
/*  機能    :   メール種別「遠隔DL応答」時のDB更新処理を行う 
/*  呼出形式:   res_remote_dl()                                  
/*                                                                          */
/*  関数型  :   int                                                         */
/*  戻り値  :   0：正常  0以外：異常                                        */
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2014.11.06                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int res_remote_dl(){
	
	#ifdef DEBUG
	printf( "[%s][Line:%04d]「res_remote_dl」START\n", __FUNCTION__,__LINE__ );
	#endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号                */
        varchar     itc_serial_no[SERIAL_NO_MAX_LEN + 1];  /*  ITCシリアルNO      */
        varchar     sysdate[TIME_MAX_LEN + 1];             /*  共通システム日時   */
        varchar     proc[PROC_NAME_MAX_LEN + 1];           /*  プロセス名         */
        varchar     r_cmd[MAIL_STATUS_MAX_LEN+1];          /*  メール種類         */
        varchar     r_value01[10+1];    /*  受信値01(OK/NG)         */
        varchar     r_value02[200+1];   /*  受信値02(URL)           */
        varchar     r_value03[10+1];    /*  受信値02(DT)            */
    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( itc_serial_no.arr, G_CMD_COM_PARAM.itc_serial_no);
    itc_serial_no.len = strlen(G_CMD_COM_PARAM.itc_serial_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( r_cmd.arr, G_CMD_DG_PARAM.value00);
    r_cmd.len = strlen(G_CMD_DG_PARAM.value00);

    strcpy( r_value01.arr, G_CMD_DG_PARAM.value01);
    r_value01.len = strlen(G_CMD_DG_PARAM.value01);

    strcpy( r_value02.arr, G_CMD_DG_PARAM.value02);
    r_value02.len = strlen(G_CMD_DG_PARAM.value02);

    strcpy( r_value03.arr, G_CMD_DG_PARAM.value03);
    r_value03.len = strlen(G_CMD_DG_PARAM.value03);

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [res_remote_dl] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,equip_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,itc_serial_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,r_cmd.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,r_value01.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,r_value02.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,r_value03.arr);
#endif

    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
            ITC.RES_REMOTE_DL(:equip_no,:itc_serial_no, :sysdate, :proc, 
                    :r_cmd, :r_value01, :r_value02, :r_value03);
        END;
    END-EXEC;   

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [res_remote_dl] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}



/* ------------------------------------------------------------------------ */
/*  関数名  :   hanyo_mail                                             
/*  機能    :   メール種別「汎用メール」時のDB更新処理を行う        
/*  関数型  :   int                                                   
/*  呼出形式:   hanyo_mail()                                           
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2015.03.18                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int hanyo_mail(){
    #ifdef DEBUG
    printf( "[%s][Line:%04d]「hanyo_mail」START\n", __FUNCTION__,__LINE__ );
    #endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号                */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時        */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名              */
        int         i;
        varchar     itc_serial_no[SERIAL_NO_MAX_LEN + 1];  /*  ITCシリアルNO      */

		/* ※MAX_HANYO_REC＝Key行数＋データ行数なので・・・データ行としては１行分多いが、MAX_HANYO_RECとする。 */

        int         hanyo_cnt;                                             /*  拡張稼働情報件数 */

        char  hanyo_key1[MAX_HANYO_REC][CONST_HANYO_KEY + 1];              /*  汎用Key1                    */
                 EXEC SQL VAR hanyo_key1 IS STRING;
        char  hanyo_key2[MAX_HANYO_REC][CONST_HANYO_KEY + 1];              /*  汎用Key2                    */
                 EXEC SQL VAR hanyo_key2 IS STRING;
        char  hanyo_key3[MAX_HANYO_REC][CONST_HANYO_KEY + 1];              /*  汎用Key3                    */
                 EXEC SQL VAR hanyo_key3 IS STRING;
        char  hanyo_key4[MAX_HANYO_REC][CONST_HANYO_KEY + 1];              /*  汎用Key4                    */
                 EXEC SQL VAR hanyo_key4 IS STRING;
        char  hanyo_key5[MAX_HANYO_REC][CONST_HANYO_KEY + 1];              /*  汎用Key5                    */
                 EXEC SQL VAR hanyo_key5 IS STRING;
        char  hanyo_rec_key[MAX_HANYO_REC][CONST_HANYO_KEY + 1];           /*  レコードKey                 */
                 EXEC SQL VAR hanyo_rec_key IS STRING;
        char  hanyo_rec_data[MAX_HANYO_REC][CONST_HANYO_DATA + 1];         /*  レコードData                */
                 EXEC SQL VAR hanyo_rec_data IS STRING;

    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( itc_serial_no.arr, G_CMD_COM_PARAM.itc_serial_no);
    itc_serial_no.len = strlen(G_CMD_COM_PARAM.itc_serial_no);

    memset(hanyo_key1,0x00,MAX_HANYO_REC  * (CONST_HANYO_KEY + 1));
    memset(hanyo_key2,0x00,MAX_HANYO_REC  * (CONST_HANYO_KEY + 1));
    memset(hanyo_key3,0x00,MAX_HANYO_REC  * (CONST_HANYO_KEY + 1));
    memset(hanyo_key4,0x00,MAX_HANYO_REC  * (CONST_HANYO_KEY + 1));
    memset(hanyo_key5,0x00,MAX_HANYO_REC  * (CONST_HANYO_KEY + 1));
    memset(hanyo_rec_key,0x00,MAX_HANYO_REC  * (CONST_HANYO_KEY + 1));
    memset(hanyo_rec_data,0x00,MAX_HANYO_REC  * (CONST_HANYO_DATA + 1));


#ifdef DEBUG

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"G_CMD_HANYO_REC[0].key1",G_CMD_HANYO_REC[0].key1);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"G_CMD_HANYO_REC[0].count",G_CMD_HANYO_REC[0].count);


#endif



    hanyo_cnt = G_CMD_HANYO_REC[0].count - 1;  /* ヘッダ行分を引く */
    for(i=0;i<hanyo_cnt;i++){
        CMD_HANYO_PARAM *cur = &G_CMD_HANYO_REC[i + 1]; /* ヘッダ行飛ばした所から開始 */
        strcpy(hanyo_key1[i]  ,G_CMD_HANYO_REC[0].key1);
        strcpy(hanyo_key2[i]  ,G_CMD_HANYO_REC[0].key2);
        strcpy(hanyo_key3[i]  ,G_CMD_HANYO_REC[0].key3);
        strcpy(hanyo_key4[i]  ,G_CMD_HANYO_REC[0].key4);
        strcpy(hanyo_key5[i]  ,G_CMD_HANYO_REC[0].key5);
        strcpy(hanyo_rec_key[i]  ,cur->reckey1);
        strcpy(hanyo_rec_data[i]  ,cur->value01);
    }


    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG

printf( "[%s][Line:%04d]プロシジャ [hanyo_mail] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"equip_no.arr",equip_no.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"sysdate.arr",sysdate.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"proc.arr",proc.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"itc_serial_no.arr",itc_serial_no.arr);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"hanyo_cnt",hanyo_cnt);


#endif

    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
        
            ITC.ADD_ITL_ITC_GE_PURPOSE(
                 :equip_no
                ,:itc_serial_no
                ,:sysdate
                ,:proc
                ,:hanyo_cnt
                ,:hanyo_key1
                ,:hanyo_key2
                ,:hanyo_key3
                ,:hanyo_key4
                ,:hanyo_key5
                ,:hanyo_rec_key
                ,:hanyo_rec_data
            );

        END;
    END-EXEC;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [HANYO_MAIL] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   hdhqhp_mail                                                
/*  機能    :   メール種別「健康診断メール」時のDB更新処理を行う           
/*  関数型  :   int                                                        
/*  呼出形式:   hdhqhp_mail()                                              
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    KSS    2016.01.28                                               */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int hdhqhp_mail(){

    int ret;                                             /* 復帰値          */

    /* 共通処理(関数内で呼び出すPL/SQL関数を分岐する) */
    /* もし改修が必要な場合は、fdfr_mailから処理を本関数に複写してカスタマイズ */
#ifdef DEBUG
    printf( "[%s][Line:%04d]START(--->call fdfr function)\n", __FUNCTION__,__LINE__ );
#endif

    ret = 0;
    ret = fdfr_mail();

#ifdef DEBUG
    printf( "[%s][Line:%04d]END(<---call fdfr function)\n", __FUNCTION__,__LINE__ );
#endif

    return( ret );
}


/* ------------------------------------------------------------------------ */
/*  関数名  :   fdfr_mail                                             
/*  機能    :   メール種別「故障診断メール」時のDB更新処理を行う        
/*  関数型  :   int                                                   
/*  呼出形式:   fdfr_mail()                                           
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2016.12                                                 */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int fdfr_mail(){
    #ifdef DEBUG
    printf( "[%s][Line:%04d]START\n", __FUNCTION__,__LINE__ );
    #endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号                */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時        */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名              */
        int         i;
        varchar     itc_serial_no[SERIAL_NO_MAX_LEN + 1];  /*  ITCシリアルNO      */

        int         rec_cnt;                                             /*  故障診断／健康診断件数 */
        int         hanyo_cnt;                                           /*  拡張稼働情報件数 */


        varchar     cmd[10 + 1];        /*  メール種別(FD,FR)      */
        varchar     r_status[10 + 1];   /*  ステータス      */
        varchar     key1[10 + 1];       /*  KEY1      */



        int   failure_cnt[CONST_FDFR_DATA + 1];                  /*  引数の件数          */

        EXEC SQL VAR failure_cnt IS INTEGER;

        char  rec_data00[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data00 IS STRING;
        char  rec_data01[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data01 IS STRING;
        char  rec_data02[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data02 IS STRING;
        char  rec_data03[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data03 IS STRING;
        char  rec_data04[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data04 IS STRING;
        char  rec_data05[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data05 IS STRING;
        char  rec_data06[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data06 IS STRING;
        char  rec_data07[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data07 IS STRING;
        char  rec_data08[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data08 IS STRING;
        char  rec_data09[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data09 IS STRING;
        char  rec_data10[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data10 IS STRING;

        char  rec_data11[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data11 IS STRING;
        char  rec_data12[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data12 IS STRING;
        char  rec_data13[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data13 IS STRING;
        char  rec_data14[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data14 IS STRING;
        char  rec_data15[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data15 IS STRING;
        char  rec_data16[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data16 IS STRING;
        char  rec_data17[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data17 IS STRING;
        char  rec_data18[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data18 IS STRING;
        char  rec_data19[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data19 IS STRING;
        char  rec_data20[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data20 IS STRING;

        char  rec_data21[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data21 IS STRING;
        char  rec_data22[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data22 IS STRING;
        char  rec_data23[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data23 IS STRING;
        char  rec_data24[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data24 IS STRING;
        char  rec_data25[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data25 IS STRING;
        char  rec_data26[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data26 IS STRING;
        char  rec_data27[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data27 IS STRING;
        char  rec_data28[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data28 IS STRING;
        char  rec_data29[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data29 IS STRING;
        char  rec_data30[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data30 IS STRING;

        char  rec_data31[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data31 IS STRING;
        char  rec_data32[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data32 IS STRING;
        char  rec_data33[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data33 IS STRING;
        char  rec_data34[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data34 IS STRING;
        char  rec_data35[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data35 IS STRING;
        char  rec_data36[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data36 IS STRING;
        char  rec_data37[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data37 IS STRING;
        char  rec_data38[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data38 IS STRING;
        char  rec_data39[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data39 IS STRING;
        char  rec_data40[MAX_FDFR_REC][CONST_FDFR_DATA + 1];         /*  データ                */
        EXEC SQL VAR rec_data40 IS STRING;

    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( itc_serial_no.arr, G_CMD_COM_PARAM.itc_serial_no);
    itc_serial_no.len = strlen(G_CMD_COM_PARAM.itc_serial_no);

	/* 許容行数×値バイト数で初期化 */
    memset(rec_data00,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data01,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data02,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data03,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data04,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data05,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data06,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data07,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data08,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data09,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data10,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data11,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data12,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data13,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data14,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data15,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data16,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data17,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data18,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data19,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data20,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data21,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data22,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data23,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data24,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data25,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data26,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data27,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data28,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data29,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data30,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data31,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data32,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data33,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data34,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data35,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data36,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data37,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data38,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data39,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(rec_data40,0x00,(MAX_FDFR_REC)  * (CONST_FDFR_DATA + 1));
    memset(failure_cnt,0x00,sizeof(int)  * (CONST_FDFR_DATA + 1));


#ifdef DEBUG
/*
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"G_CMD_FDFR_REC[0].key1",G_CMD_FDFR_REC[0].key1);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"G_CMD_FDFR_REC[0].count",G_CMD_FDFR_REC[0].count);
*/
#endif

    strcpy( cmd.arr, G_CMD_FDFR_REC[0].value00);
    cmd.len = strlen(G_CMD_FDFR_REC[0].value00);
    strcpy( r_status.arr, G_CMD_FDFR_REC[0].value01);
    r_status.len = strlen(G_CMD_FDFR_REC[0].value01);
    strcpy( key1.arr, G_CMD_FDFR_REC[0].value02);
    key1.len = strlen(G_CMD_FDFR_REC[0].value02);

    rec_cnt = G_CMD_FDFR_REC[0].count;
    for(i=0;i<rec_cnt;i++){
        CMD_HANYO06_PARAM *cur = &G_CMD_FDFR_REC[i];
        failure_cnt[i] = cur->value_count + 1;  /* コマンド識別子の数も含む為＋１する */
        strcpy(rec_data00[i]  ,cur->value00);
        strcpy(rec_data01[i]  ,cur->value01);
        strcpy(rec_data02[i]  ,cur->value02);
        strcpy(rec_data03[i]  ,cur->value03);
        strcpy(rec_data04[i]  ,cur->value04);
        strcpy(rec_data05[i]  ,cur->value05);
        strcpy(rec_data06[i]  ,cur->value06);
        strcpy(rec_data07[i]  ,cur->value07);
        strcpy(rec_data08[i]  ,cur->value08);
        strcpy(rec_data09[i]  ,cur->value09);
        strcpy(rec_data10[i]  ,cur->value10);
        strcpy(rec_data11[i]  ,cur->value11);
        strcpy(rec_data12[i]  ,cur->value12);
        strcpy(rec_data13[i]  ,cur->value13);
        strcpy(rec_data14[i]  ,cur->value14);
        strcpy(rec_data15[i]  ,cur->value15);
        strcpy(rec_data16[i]  ,cur->value16);
        strcpy(rec_data17[i]  ,cur->value17);
        strcpy(rec_data18[i]  ,cur->value18);
        strcpy(rec_data19[i]  ,cur->value19);
        strcpy(rec_data20[i]  ,cur->value20);
        strcpy(rec_data21[i]  ,cur->value21);
        strcpy(rec_data22[i]  ,cur->value22);
        strcpy(rec_data23[i]  ,cur->value23);
        strcpy(rec_data24[i]  ,cur->value24);
        strcpy(rec_data25[i]  ,cur->value25);
        strcpy(rec_data26[i]  ,cur->value26);
        strcpy(rec_data27[i]  ,cur->value27);
        strcpy(rec_data28[i]  ,cur->value28);
        strcpy(rec_data29[i]  ,cur->value29);
        strcpy(rec_data30[i]  ,cur->value30);
        strcpy(rec_data31[i]  ,cur->value31);
        strcpy(rec_data32[i]  ,cur->value32);
        strcpy(rec_data33[i]  ,cur->value33);
        strcpy(rec_data34[i]  ,cur->value34);
        strcpy(rec_data35[i]  ,cur->value35);
        strcpy(rec_data36[i]  ,cur->value36);
        strcpy(rec_data37[i]  ,cur->value37);
        strcpy(rec_data38[i]  ,cur->value38);
        strcpy(rec_data39[i]  ,cur->value39);
        strcpy(rec_data40[i]  ,cur->value40);
    }
    
    hanyo_cnt = G_CMD_DAILY_EXT_PARAM[0].count;
    for(i=0;i<hanyo_cnt;i++){
        CMD_C20X5_PARAM *cur = &G_CMD_DAILY_EXT_PARAM[i];

        failure_cnt[rec_cnt + i] = -1;  /* 拡張情報の場合は列数は不要(NULL検出または最大まで登録) */
        strcpy(rec_data00[rec_cnt + i]  ,"EX");
        sprintf(rec_data01[rec_cnt + i] ,"%d" ,i + 1);
        strcpy(rec_data02[rec_cnt + i]  ,cur->value00);
        strcpy(rec_data03[rec_cnt + i]  ,cur->value01);
        strcpy(rec_data04[rec_cnt + i]  ,cur->value02);
        strcpy(rec_data05[rec_cnt + i]  ,cur->value03);
        strcpy(rec_data06[rec_cnt + i]  ,cur->value04);
        strcpy(rec_data07[rec_cnt + i]  ,cur->value05);
        strcpy(rec_data08[rec_cnt + i]  ,cur->value06);
        strcpy(rec_data09[rec_cnt + i]  ,cur->value07);
        strcpy(rec_data10[rec_cnt + i]  ,cur->value08);
        strcpy(rec_data11[rec_cnt + i]  ,cur->value09);
        strcpy(rec_data12[rec_cnt + i]  ,"");
        strcpy(rec_data13[rec_cnt + i]  ,"");
        strcpy(rec_data14[rec_cnt + i]  ,"");
        strcpy(rec_data15[rec_cnt + i]  ,"");
        strcpy(rec_data16[rec_cnt + i]  ,"");
        strcpy(rec_data17[rec_cnt + i]  ,"");
        strcpy(rec_data18[rec_cnt + i]  ,"");
        strcpy(rec_data19[rec_cnt + i]  ,"");
        strcpy(rec_data20[rec_cnt + i]  ,"");
        strcpy(rec_data21[rec_cnt + i]  ,"");
        strcpy(rec_data22[rec_cnt + i]  ,"");
        strcpy(rec_data23[rec_cnt + i]  ,"");
        strcpy(rec_data24[rec_cnt + i]  ,"");
        strcpy(rec_data25[rec_cnt + i]  ,"");
        strcpy(rec_data26[rec_cnt + i]  ,"");
        strcpy(rec_data27[rec_cnt + i]  ,"");
        strcpy(rec_data28[rec_cnt + i]  ,"");
        strcpy(rec_data29[rec_cnt + i]  ,"");
        strcpy(rec_data30[rec_cnt + i]  ,"");
        strcpy(rec_data31[rec_cnt + i]  ,"");
        strcpy(rec_data32[rec_cnt + i]  ,"");
        strcpy(rec_data33[rec_cnt + i]  ,"");
        strcpy(rec_data34[rec_cnt + i]  ,"");
        strcpy(rec_data35[rec_cnt + i]  ,"");
        strcpy(rec_data36[rec_cnt + i]  ,"");
        strcpy(rec_data37[rec_cnt + i]  ,"");
        strcpy(rec_data38[rec_cnt + i]  ,"");
        strcpy(rec_data39[rec_cnt + i]  ,"");
        strcpy(rec_data40[rec_cnt + i]  ,"");
        
    }
    rec_cnt = rec_cnt + hanyo_cnt;
    
    
    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG

printf( "[%s][Line:%04d]プロシジャ [hanyo_mail] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"equip_no.arr",equip_no.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"sysdate.arr",sysdate.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"proc.arr",proc.arr);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"rec_cnt",rec_cnt);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[0]",failure_cnt[0]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[1]",failure_cnt[1]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[2]",failure_cnt[2]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[3]",failure_cnt[3]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[4]",failure_cnt[4]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[5]",failure_cnt[5]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[6]",failure_cnt[6]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[7]",failure_cnt[7]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[8]",failure_cnt[8]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[9]",failure_cnt[9]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[10]",failure_cnt[10]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[11]",failure_cnt[11]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[12]",failure_cnt[12]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[13]",failure_cnt[13]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[14]",failure_cnt[14]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[15]",failure_cnt[15]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[16]",failure_cnt[16]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[17]",failure_cnt[17]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[18]",failure_cnt[18]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[19]",failure_cnt[19]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[20]",failure_cnt[20]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[21]",failure_cnt[21]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[22]",failure_cnt[22]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[23]",failure_cnt[23]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[24]",failure_cnt[24]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[25]",failure_cnt[25]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[26]",failure_cnt[26]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[27]",failure_cnt[27]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[28]",failure_cnt[28]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[29]",failure_cnt[29]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[30]",failure_cnt[30]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[31]",failure_cnt[31]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[32]",failure_cnt[32]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[33]",failure_cnt[33]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[34]",failure_cnt[34]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[35]",failure_cnt[35]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[36]",failure_cnt[36]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[37]",failure_cnt[37]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[38]",failure_cnt[38]);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"failure_cnt[39]",failure_cnt[39]);


printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"key1",key1.arr);
printf( "[%s][Line:%04d]Param[%s][%d]\n", __FUNCTION__,__LINE__ ,"rec_cnt",rec_cnt);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"r_status",r_status.arr);


printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data00[00]",rec_data00[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data00[01]",rec_data00[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data00[02]",rec_data00[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data00[03]",rec_data00[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data00[04]",rec_data00[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data00[05]",rec_data00[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data00[06]",rec_data00[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data00[07]",rec_data00[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data00[08]",rec_data00[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data00[09]",rec_data00[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data01[00]",rec_data01[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data01[01]",rec_data01[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data01[02]",rec_data01[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data01[03]",rec_data01[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data01[04]",rec_data01[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data01[05]",rec_data01[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data01[06]",rec_data01[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data01[07]",rec_data01[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data01[08]",rec_data01[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data01[09]",rec_data01[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data02[00]",rec_data02[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data02[01]",rec_data02[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data02[02]",rec_data02[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data02[03]",rec_data02[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data02[04]",rec_data02[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data02[05]",rec_data02[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data02[06]",rec_data02[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data02[07]",rec_data02[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data02[08]",rec_data02[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data02[09]",rec_data02[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data03[00]",rec_data03[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data03[01]",rec_data03[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data03[02]",rec_data03[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data03[03]",rec_data03[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data03[04]",rec_data03[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data03[05]",rec_data03[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data03[06]",rec_data03[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data03[07]",rec_data03[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data03[08]",rec_data03[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data03[09]",rec_data03[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data04[00]",rec_data04[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data04[01]",rec_data04[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data04[02]",rec_data04[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data04[03]",rec_data04[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data04[04]",rec_data04[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data04[05]",rec_data04[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data04[06]",rec_data04[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data04[07]",rec_data04[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data04[08]",rec_data04[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data04[09]",rec_data04[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data05[00]",rec_data05[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data05[01]",rec_data05[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data05[02]",rec_data05[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data05[03]",rec_data05[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data05[04]",rec_data05[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data05[05]",rec_data05[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data05[06]",rec_data05[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data05[07]",rec_data05[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data05[08]",rec_data05[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data05[09]",rec_data05[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data06[00]",rec_data06[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data06[01]",rec_data06[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data06[02]",rec_data06[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data06[03]",rec_data06[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data06[04]",rec_data06[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data06[05]",rec_data06[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data06[06]",rec_data06[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data06[07]",rec_data06[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data06[08]",rec_data06[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data06[09]",rec_data06[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data07[00]",rec_data07[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data07[01]",rec_data07[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data07[02]",rec_data07[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data07[03]",rec_data07[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data07[04]",rec_data07[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data07[05]",rec_data07[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data07[06]",rec_data07[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data07[07]",rec_data07[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data07[08]",rec_data07[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data07[09]",rec_data07[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data08[00]",rec_data08[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data08[01]",rec_data08[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data08[02]",rec_data08[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data08[03]",rec_data08[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data08[04]",rec_data08[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data08[05]",rec_data08[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data08[06]",rec_data08[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data08[07]",rec_data08[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data08[08]",rec_data08[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data08[09]",rec_data08[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data09[00]",rec_data09[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data09[01]",rec_data09[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data09[02]",rec_data09[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data09[03]",rec_data09[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data09[04]",rec_data09[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data09[05]",rec_data09[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data09[06]",rec_data09[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data09[07]",rec_data09[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data09[08]",rec_data09[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data09[09]",rec_data09[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data10[00]",rec_data10[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data10[01]",rec_data10[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data10[02]",rec_data10[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data10[03]",rec_data10[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data10[04]",rec_data10[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data10[05]",rec_data10[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data10[06]",rec_data10[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data10[07]",rec_data10[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data10[08]",rec_data10[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data10[09]",rec_data10[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data11[00]",rec_data11[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data11[01]",rec_data11[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data11[02]",rec_data11[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data11[03]",rec_data11[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data11[04]",rec_data11[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data11[05]",rec_data11[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data11[06]",rec_data11[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data11[07]",rec_data11[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data11[08]",rec_data11[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data11[09]",rec_data11[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data12[00]",rec_data12[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data12[01]",rec_data12[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data12[02]",rec_data12[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data12[03]",rec_data12[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data12[04]",rec_data12[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data12[05]",rec_data12[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data12[06]",rec_data12[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data12[07]",rec_data12[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data12[08]",rec_data12[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data12[09]",rec_data12[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data13[00]",rec_data13[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data13[01]",rec_data13[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data13[02]",rec_data13[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data13[03]",rec_data13[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data13[04]",rec_data13[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data13[05]",rec_data13[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data13[06]",rec_data13[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data13[07]",rec_data13[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data13[08]",rec_data13[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data13[09]",rec_data13[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data14[00]",rec_data14[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data14[01]",rec_data14[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data14[02]",rec_data14[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data14[03]",rec_data14[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data14[04]",rec_data14[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data14[05]",rec_data14[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data14[06]",rec_data14[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data14[07]",rec_data14[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data14[08]",rec_data14[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data14[09]",rec_data14[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data15[00]",rec_data15[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data15[01]",rec_data15[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data15[02]",rec_data15[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data15[03]",rec_data15[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data15[04]",rec_data15[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data15[05]",rec_data15[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data15[06]",rec_data15[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data15[07]",rec_data15[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data15[08]",rec_data15[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data15[09]",rec_data15[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data16[00]",rec_data16[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data16[01]",rec_data16[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data16[02]",rec_data16[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data16[03]",rec_data16[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data16[04]",rec_data16[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data16[05]",rec_data16[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data16[06]",rec_data16[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data16[07]",rec_data16[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data16[08]",rec_data16[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data16[09]",rec_data16[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data17[00]",rec_data17[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data17[01]",rec_data17[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data17[02]",rec_data17[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data17[03]",rec_data17[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data17[04]",rec_data17[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data17[05]",rec_data17[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data17[06]",rec_data17[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data17[07]",rec_data17[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data17[08]",rec_data17[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data17[09]",rec_data17[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data18[00]",rec_data18[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data18[01]",rec_data18[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data18[02]",rec_data18[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data18[03]",rec_data18[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data18[04]",rec_data18[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data18[05]",rec_data18[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data18[06]",rec_data18[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data18[07]",rec_data18[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data18[08]",rec_data18[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data18[09]",rec_data18[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data19[00]",rec_data19[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data19[01]",rec_data19[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data19[02]",rec_data19[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data19[03]",rec_data19[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data19[04]",rec_data19[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data19[05]",rec_data19[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data19[06]",rec_data19[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data19[07]",rec_data19[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data19[08]",rec_data19[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data19[09]",rec_data19[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data20[00]",rec_data20[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data20[01]",rec_data20[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data20[02]",rec_data20[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data20[03]",rec_data20[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data20[04]",rec_data20[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data20[05]",rec_data20[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data20[06]",rec_data20[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data20[07]",rec_data20[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data20[08]",rec_data20[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data20[09]",rec_data20[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data21[00]",rec_data21[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data21[01]",rec_data21[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data21[02]",rec_data21[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data21[03]",rec_data21[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data21[04]",rec_data21[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data21[05]",rec_data21[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data21[06]",rec_data21[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data21[07]",rec_data21[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data21[08]",rec_data21[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data21[09]",rec_data21[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data22[00]",rec_data22[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data22[01]",rec_data22[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data22[02]",rec_data22[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data22[03]",rec_data22[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data22[04]",rec_data22[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data22[05]",rec_data22[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data22[06]",rec_data22[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data22[07]",rec_data22[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data22[08]",rec_data22[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data22[09]",rec_data22[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data23[00]",rec_data23[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data23[01]",rec_data23[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data23[02]",rec_data23[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data23[03]",rec_data23[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data23[04]",rec_data23[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data23[05]",rec_data23[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data23[06]",rec_data23[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data23[07]",rec_data23[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data23[08]",rec_data23[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data23[09]",rec_data23[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data24[00]",rec_data24[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data24[01]",rec_data24[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data24[02]",rec_data24[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data24[03]",rec_data24[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data24[04]",rec_data24[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data24[05]",rec_data24[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data24[06]",rec_data24[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data24[07]",rec_data24[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data24[08]",rec_data24[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data24[09]",rec_data24[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data25[00]",rec_data25[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data25[01]",rec_data25[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data25[02]",rec_data25[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data25[03]",rec_data25[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data25[04]",rec_data25[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data25[05]",rec_data25[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data25[06]",rec_data25[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data25[07]",rec_data25[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data25[08]",rec_data25[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data25[09]",rec_data25[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data26[00]",rec_data26[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data26[01]",rec_data26[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data26[02]",rec_data26[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data26[03]",rec_data26[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data26[04]",rec_data26[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data26[05]",rec_data26[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data26[06]",rec_data26[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data26[07]",rec_data26[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data26[08]",rec_data26[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data26[09]",rec_data26[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data27[00]",rec_data27[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data27[01]",rec_data27[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data27[02]",rec_data27[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data27[03]",rec_data27[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data27[04]",rec_data27[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data27[05]",rec_data27[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data27[06]",rec_data27[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data27[07]",rec_data27[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data27[08]",rec_data27[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data27[09]",rec_data27[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data28[00]",rec_data28[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data28[01]",rec_data28[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data28[02]",rec_data28[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data28[03]",rec_data28[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data28[04]",rec_data28[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data28[05]",rec_data28[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data28[06]",rec_data28[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data28[07]",rec_data28[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data28[08]",rec_data28[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data28[09]",rec_data28[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data29[00]",rec_data29[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data29[01]",rec_data29[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data29[02]",rec_data29[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data29[03]",rec_data29[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data29[04]",rec_data29[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data29[05]",rec_data29[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data29[06]",rec_data29[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data29[07]",rec_data29[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data29[08]",rec_data29[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data29[09]",rec_data29[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data30[00]",rec_data30[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data30[01]",rec_data30[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data30[02]",rec_data30[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data30[03]",rec_data30[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data30[04]",rec_data30[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data30[05]",rec_data30[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data30[06]",rec_data30[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data30[07]",rec_data30[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data30[08]",rec_data30[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data30[09]",rec_data30[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data31[00]",rec_data31[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data31[01]",rec_data31[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data31[02]",rec_data31[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data31[03]",rec_data31[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data31[04]",rec_data31[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data31[05]",rec_data31[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data31[06]",rec_data31[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data31[07]",rec_data31[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data31[08]",rec_data31[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data31[09]",rec_data31[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data32[00]",rec_data32[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data32[01]",rec_data32[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data32[02]",rec_data32[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data32[03]",rec_data32[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data32[04]",rec_data32[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data32[05]",rec_data32[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data32[06]",rec_data32[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data32[07]",rec_data32[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data32[08]",rec_data32[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data32[09]",rec_data32[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data33[00]",rec_data33[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data33[01]",rec_data33[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data33[02]",rec_data33[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data33[03]",rec_data33[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data33[04]",rec_data33[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data33[05]",rec_data33[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data33[06]",rec_data33[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data33[07]",rec_data33[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data33[08]",rec_data33[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data33[09]",rec_data33[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data34[00]",rec_data34[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data34[01]",rec_data34[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data34[02]",rec_data34[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data34[03]",rec_data34[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data34[04]",rec_data34[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data34[05]",rec_data34[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data34[06]",rec_data34[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data34[07]",rec_data34[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data34[08]",rec_data34[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data34[09]",rec_data34[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data35[00]",rec_data35[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data35[01]",rec_data35[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data35[02]",rec_data35[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data35[03]",rec_data35[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data35[04]",rec_data35[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data35[05]",rec_data35[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data35[06]",rec_data35[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data35[07]",rec_data35[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data35[08]",rec_data35[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data35[09]",rec_data35[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data36[00]",rec_data36[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data36[01]",rec_data36[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data36[02]",rec_data36[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data36[03]",rec_data36[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data36[04]",rec_data36[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data36[05]",rec_data36[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data36[06]",rec_data36[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data36[07]",rec_data36[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data36[08]",rec_data36[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data36[09]",rec_data36[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data37[00]",rec_data37[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data37[01]",rec_data37[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data37[02]",rec_data37[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data37[03]",rec_data37[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data37[04]",rec_data37[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data37[05]",rec_data37[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data37[06]",rec_data37[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data37[07]",rec_data37[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data37[08]",rec_data37[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data37[09]",rec_data37[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data38[00]",rec_data38[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data38[01]",rec_data38[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data38[02]",rec_data38[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data38[03]",rec_data38[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data38[04]",rec_data38[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data38[05]",rec_data38[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data38[06]",rec_data38[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data38[07]",rec_data38[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data38[08]",rec_data38[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data38[09]",rec_data38[9]);

printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data39[00]",rec_data39[0]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data39[01]",rec_data39[1]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data39[02]",rec_data39[2]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data39[03]",rec_data39[3]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data39[04]",rec_data39[4]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data39[05]",rec_data39[5]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data39[06]",rec_data39[6]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data39[07]",rec_data39[7]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data39[08]",rec_data39[8]);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"rec_data39[09]",rec_data39[9]);

#endif




    if(0 == strcmp(G_CMD_COM_PARAM.mail_type_forlog,"HD")){

	    /*  PL/SQL処理実行  */
	    EXEC SQL EXECUTE
	        BEGIN
	        
	            ITC.GET_HEALTH_DIAGNOSIS(
	                 :equip_no
	                ,:sysdate
	                ,:proc
	                ,:rec_cnt
	                ,:failure_cnt
	                ,:rec_data00
	                ,:rec_data01
	                ,:rec_data02
	                ,:rec_data03
	                ,:rec_data04
	                ,:rec_data05
	                ,:rec_data06
	                ,:rec_data07
	                ,:rec_data08
	                ,:rec_data09
	                ,:rec_data10
	                ,:rec_data11
	                ,:rec_data12
	                ,:rec_data13
	                ,:rec_data14
	                ,:rec_data15
	                ,:rec_data16
	                ,:rec_data17
	                ,:rec_data18
	                ,:rec_data19
	                ,:rec_data20
	                ,:rec_data21
	                ,:rec_data22
	                ,:rec_data23
	                ,:rec_data24
	                ,:rec_data25
	                ,:rec_data26
	                ,:rec_data27
	                ,:rec_data28
	                ,:rec_data29
	                ,:rec_data30
	                ,:rec_data31
	                ,:rec_data32
	                ,:rec_data33
	                ,:rec_data34
	                ,:rec_data35
	                ,:rec_data36
	                ,:rec_data37
	                ,:rec_data38
	                ,:rec_data39
	                ,:rec_data40
	            );

	        END;
	    END-EXEC;
	}else if(0 == strcmp(G_CMD_COM_PARAM.mail_type_forlog,"FD")){

	    /*  PL/SQL処理実行  */
	    EXEC SQL EXECUTE
	        BEGIN
	        
	            ITC.GET_FAULT_DIAGNOSIS(
	                 :equip_no
	                ,:sysdate
	                ,:proc
	                ,:rec_cnt
	                ,:failure_cnt
	                ,:rec_data00
	                ,:rec_data01
	                ,:rec_data02
	                ,:rec_data03
	                ,:rec_data04
	                ,:rec_data05
	                ,:rec_data06
	                ,:rec_data07
	                ,:rec_data08
	                ,:rec_data09
	                ,:rec_data10
	                ,:rec_data11
	                ,:rec_data12
	                ,:rec_data13
	                ,:rec_data14
	                ,:rec_data15
	                ,:rec_data16
	                ,:rec_data17
	                ,:rec_data18
	                ,:rec_data19
	                ,:rec_data20
	                ,:rec_data21
	                ,:rec_data22
	                ,:rec_data23
	                ,:rec_data24
	                ,:rec_data25
	                ,:rec_data26
	                ,:rec_data27
	                ,:rec_data28
	                ,:rec_data29
	                ,:rec_data30
	                ,:rec_data31
	                ,:rec_data32
	                ,:rec_data33
	                ,:rec_data34
	                ,:rec_data35
	                ,:rec_data36
	                ,:rec_data37
	                ,:rec_data38
	                ,:rec_data39
	                ,:rec_data40
	            );

	        END;
	    END-EXEC;

	}


#ifdef DEBUG
printf( "[%s][Line:%04d] end \n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"mailtype[%s] sql_error[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]error[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}




/* ------------------------------------------------------------------------ */
/*  関数名  :   lkok_mail                              
/*  機能    :   メール種別「LKOK(遠隔ロック設定応答)」時のDB更新処理を行う 
/*  関数型  :   int                                  
/*  呼出形式:   lkok_mail()                    
/*                                                   
/*  戻り値  :   0：正常  0以外：異常                 
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2016.10.27                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int lkok_mail(){
	
	#ifdef DEBUG
	printf( "[%s][Line:%04d]「lkok_mail」START\n", __FUNCTION__,__LINE__ );
	#endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号                */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時        */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名              */
        varchar     itc_serial_no[SERIAL_NO_MAX_LEN + 1];  /*  ITCシリアルNO        */
        varchar     cmd_cd[CONST_C30 + 1];              /*  コマンドコード          */
        varchar     cmd_kbn[CONST_C30 + 1];             /*  コマンド区分            */
        varchar     cmd_val[CONST_C30 + 1];             /*  コマンド値              */
    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( itc_serial_no.arr, G_CMD_COM_PARAM.itc_serial_no);
    itc_serial_no.len = strlen(G_CMD_COM_PARAM.itc_serial_no);

    strcpy( cmd_cd.arr, G_CMD_LKOK_PARAM.value00);
    cmd_cd.len = strlen(G_CMD_LKOK_PARAM.value00);

    strcpy( cmd_kbn.arr, G_CMD_LKOK_PARAM.value01);
    cmd_kbn.len = strlen(G_CMD_LKOK_PARAM.value01);

    strcpy( cmd_val.arr, G_CMD_LKOK_PARAM.value02);
    cmd_val.len = strlen(G_CMD_LKOK_PARAM.value02);

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [REMOTE_LOCK] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,equip_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,itc_serial_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,cmd_cd.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,cmd_kbn.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,cmd_val.arr);
#endif

    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
            ITC.REMOTE_LOCK(:equip_no, :itc_serial_no, :sysdate, :proc
                    ,:cmd_cd, :cmd_kbn, :cmd_val);
        END;
    END-EXEC;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [REMOTE_LOCK] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}




/* ------------------------------------------------------------------------ */
/*  関数名  :   ae_mail                                             
/*  機能    :   メール種別「衝突軽減切り換え」時のDB更新処理を行う        
/*  関数型  :   int                                                   
/*  呼出形式:   ae_mail()                                           
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2017.08                                                 */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int ae_mail(){
    #ifdef DEBUG
    printf( "[%s][Line:%04d]START\n", __FUNCTION__,__LINE__ );
    #endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号                */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時        */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名              */
        int         i;
        varchar     itc_serial_no[SERIAL_NO_MAX_LEN + 1];  /*  ITCシリアルNO      */

        int         rec_cnt;

        char  rec_data00[MAX_AE_REC][CONST_C20 + 1];         /*  AEに続く数値(0 or 1)  */
        EXEC SQL VAR rec_data00 IS STRING;
        char  rec_data01[MAX_AE_REC][CONST_C20 + 1];         /*  引数１（日付）                */
        EXEC SQL VAR rec_data01 IS STRING;

    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( itc_serial_no.arr, G_CMD_COM_PARAM.itc_serial_no);
    itc_serial_no.len = strlen(G_CMD_COM_PARAM.itc_serial_no);

	/* 許容行数×値バイト数で初期化 */
    memset(rec_data00,0x00,(MAX_AE_REC)  * (CONST_C20 + 1));
    memset(rec_data01,0x00,(MAX_AE_REC)  * (CONST_C20 + 1));

    rec_cnt = G_CMD_AE_REC[0].count;
    for(i=0;i<rec_cnt;i++){
        CMD_C30X1_PARAM *cur = &G_CMD_AE_REC[i];
        strcpy(rec_data00[i]  ,cur->value00);
        strcpy(rec_data01[i]  ,cur->value01);
    }
    
    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG

printf( "[%s][Line:%04d]プロシジャの処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"equip_no.arr",equip_no.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"sysdate.arr",sysdate.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"proc.arr",proc.arr);

printf( "[%s][Line:%04d]Param[AE_CNT][%d]\n", __FUNCTION__,__LINE__ ,"AE_CNT",rec_cnt);
for(i=0;i<rec_cnt;i++){
printf( "[%s][Line:%04d]Param[CMD][%d][%s]\n", __FUNCTION__,__LINE__  ,i,rec_data00[i]);
printf( "[%s][Line:%04d]Param[DATA01][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data01[i]);
}

#endif



    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
        
            ITC.GET_AE_DATA(
                 :equip_no
                ,:itc_serial_no
                ,:sysdate
                ,:proc
                ,:rec_cnt
                ,:rec_data00
                ,:rec_data01
            );

        END;
    END-EXEC;

#ifdef DEBUG
printf( "[%s][Line:%04d] end \n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"mailtype[%s] sql_error[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]error[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}




/* ------------------------------------------------------------------------ */
/*  関数名  :   ar_mail                                             
/*  機能    :   メール種別「衝突軽減レポート」時のDB更新処理を行う        
/*  関数型  :   int                                                   
/*  呼出形式:   ar_mail()                                           
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    SKCS    2017.08                                                 */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int ar_mail(){
    #ifdef DEBUG
    printf( "[%s][Line:%04d]START\n", __FUNCTION__,__LINE__ );
    printf( "[%s][Line:%04d]Param[AR_CNT][%d]\n", __FUNCTION__,__LINE__ ,G_CMD_AR_REC[0].count);

    #endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号                */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時        */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名              */
        int         i;
        varchar     itc_serial_no[SERIAL_NO_MAX_LEN + 1];  /*  ITCシリアルNO      */

        int         rec_cnt;

        char  rec_data00[MAX_AR_REC][CONST_C20 + 1];          /*  ARに続く数値(0〜25)  */
        EXEC SQL VAR rec_data00 IS STRING;
        char  rec_data01[MAX_AR_REC][CONST_C20 + 1];          /*  00時                */
        EXEC SQL VAR rec_data01 IS STRING;
        char  rec_data02[MAX_AR_REC][CONST_C20 + 1];          /*  01時                */
        EXEC SQL VAR rec_data02 IS STRING;
        char  rec_data03 [MAX_AR_REC][CONST_C20 + 1];         /*  02時                */
        EXEC SQL VAR rec_data03 IS STRING;
        char  rec_data04 [MAX_AR_REC][CONST_C20 + 1];         /*  03時                */
        EXEC SQL VAR rec_data04 IS STRING;
        char  rec_data05 [MAX_AR_REC][CONST_C20 + 1];         /*  04時                */
        EXEC SQL VAR rec_data05 IS STRING;
        char  rec_data06 [MAX_AR_REC][CONST_C20 + 1];         /*  05時                */
        EXEC SQL VAR rec_data06 IS STRING;
        char  rec_data07 [MAX_AR_REC][CONST_C20 + 1];         /*  06時                */
        EXEC SQL VAR rec_data07 IS STRING;
        char  rec_data08 [MAX_AR_REC][CONST_C20 + 1];         /*  07時                */
        EXEC SQL VAR rec_data08 IS STRING;
        char  rec_data09 [MAX_AR_REC][CONST_C20 + 1];         /*  08時                */
        EXEC SQL VAR rec_data09 IS STRING;
        char  rec_data10 [MAX_AR_REC][CONST_C20 + 1];         /*  09時                */
        EXEC SQL VAR rec_data10 IS STRING;
        char  rec_data11 [MAX_AR_REC][CONST_C20 + 1];         /*  10時                */
        EXEC SQL VAR rec_data11 IS STRING;
        char  rec_data12 [MAX_AR_REC][CONST_C20 + 1];         /*  11時                */
        EXEC SQL VAR rec_data12 IS STRING;
        char  rec_data13 [MAX_AR_REC][CONST_C20 + 1];         /*  12時                */
        EXEC SQL VAR rec_data13 IS STRING;
        char  rec_data14 [MAX_AR_REC][CONST_C20 + 1];         /*  13時                */
        EXEC SQL VAR rec_data14 IS STRING;
        char  rec_data15 [MAX_AR_REC][CONST_C20 + 1];         /*  14時                */
        EXEC SQL VAR rec_data15 IS STRING;
        char  rec_data16 [MAX_AR_REC][CONST_C20 + 1];         /*  15時                */
        EXEC SQL VAR rec_data16 IS STRING;
        char  rec_data17 [MAX_AR_REC][CONST_C20 + 1];         /*  16時                */
        EXEC SQL VAR rec_data17 IS STRING;
        char  rec_data18 [MAX_AR_REC][CONST_C20 + 1];         /*  17時                */
        EXEC SQL VAR rec_data18 IS STRING;
        char  rec_data19 [MAX_AR_REC][CONST_C20 + 1];         /*  18時                */
        EXEC SQL VAR rec_data19 IS STRING;
        char  rec_data20 [MAX_AR_REC][CONST_C20 + 1];         /*  19時                */
        EXEC SQL VAR rec_data20 IS STRING;
        char  rec_data21 [MAX_AR_REC][CONST_C20 + 1];         /*  20時                */
        EXEC SQL VAR rec_data21 IS STRING;
        char  rec_data22 [MAX_AR_REC][CONST_C20 + 1];         /*  21時                */
        EXEC SQL VAR rec_data22 IS STRING;
        char  rec_data23 [MAX_AR_REC][CONST_C20 + 1];         /*  22時                */
        EXEC SQL VAR rec_data23 IS STRING;
        char  rec_data24 [MAX_AR_REC][CONST_C20 + 1];         /*  23時                */
        EXEC SQL VAR rec_data24 IS STRING;

    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( itc_serial_no.arr, G_CMD_COM_PARAM.itc_serial_no);
    itc_serial_no.len = strlen(G_CMD_COM_PARAM.itc_serial_no);

	/* 許容行数×値バイト数で初期化 */
    memset(rec_data00,0x00,(MAX_AR_REC)  * (CONST_C20 + 1));
    memset(rec_data01,0x00,(MAX_AR_REC)  * (CONST_C20 + 1));
    memset(rec_data02,0x00,(MAX_AR_REC)  * (CONST_C20 + 1));
    memset(rec_data03,0x00,(MAX_AR_REC)  * (CONST_C20 + 1));
    memset(rec_data04,0x00,(MAX_AR_REC)  * (CONST_C20 + 1));
    memset(rec_data05,0x00,(MAX_AR_REC)  * (CONST_C20 + 1));
    memset(rec_data06,0x00,(MAX_AR_REC)  * (CONST_C20 + 1));
    memset(rec_data07,0x00,(MAX_AR_REC)  * (CONST_C20 + 1));
    memset(rec_data08,0x00,(MAX_AR_REC)  * (CONST_C20 + 1));
    memset(rec_data09,0x00,(MAX_AR_REC)  * (CONST_C20 + 1));
    memset(rec_data10,0x00,(MAX_AR_REC)  * (CONST_C20 + 1));
    memset(rec_data11,0x00,(MAX_AR_REC)  * (CONST_C20 + 1));
    memset(rec_data12,0x00,(MAX_AR_REC)  * (CONST_C20 + 1));
    memset(rec_data13,0x00,(MAX_AR_REC)  * (CONST_C20 + 1));
    memset(rec_data14,0x00,(MAX_AR_REC)  * (CONST_C20 + 1));
    memset(rec_data15,0x00,(MAX_AR_REC)  * (CONST_C20 + 1));
    memset(rec_data16,0x00,(MAX_AR_REC)  * (CONST_C20 + 1));
    memset(rec_data17,0x00,(MAX_AR_REC)  * (CONST_C20 + 1));
    memset(rec_data18,0x00,(MAX_AR_REC)  * (CONST_C20 + 1));
    memset(rec_data19,0x00,(MAX_AR_REC)  * (CONST_C20 + 1));
    memset(rec_data20,0x00,(MAX_AR_REC)  * (CONST_C20 + 1));
    memset(rec_data21,0x00,(MAX_AR_REC)  * (CONST_C20 + 1));
    memset(rec_data22,0x00,(MAX_AR_REC)  * (CONST_C20 + 1));
    memset(rec_data23,0x00,(MAX_AR_REC)  * (CONST_C20 + 1));
    memset(rec_data24,0x00,(MAX_AR_REC)  * (CONST_C20 + 1));

    rec_cnt = G_CMD_AR_REC[0].count;
    for(i=0;i<rec_cnt;i++){
        CMD_HANYO06_PARAM *cur = &G_CMD_AR_REC[i];
        strcpy(rec_data00[i]  ,cur->value00);
        strcpy(rec_data01[i]  ,cur->value01);
        strcpy(rec_data02[i]  ,cur->value02);
        strcpy(rec_data03[i]  ,cur->value03);
        strcpy(rec_data04[i]  ,cur->value04);
        strcpy(rec_data05[i]  ,cur->value05);
        strcpy(rec_data06[i]  ,cur->value06);
        strcpy(rec_data07[i]  ,cur->value07);
        strcpy(rec_data08[i]  ,cur->value08);
        strcpy(rec_data09[i]  ,cur->value09);
        strcpy(rec_data10[i]  ,cur->value10);
        strcpy(rec_data11[i]  ,cur->value11);
        strcpy(rec_data12[i]  ,cur->value12);
        strcpy(rec_data13[i]  ,cur->value13);
        strcpy(rec_data14[i]  ,cur->value14);
        strcpy(rec_data15[i]  ,cur->value15);
        strcpy(rec_data16[i]  ,cur->value16);
        strcpy(rec_data17[i]  ,cur->value17);
        strcpy(rec_data18[i]  ,cur->value18);
        strcpy(rec_data19[i]  ,cur->value19);
        strcpy(rec_data20[i]  ,cur->value20);
        strcpy(rec_data21[i]  ,cur->value21);
        strcpy(rec_data22[i]  ,cur->value22);
        strcpy(rec_data23[i]  ,cur->value23);
        strcpy(rec_data24[i]  ,cur->value24);
    }
    
    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG

printf( "[%s][Line:%04d]プロシジャ処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"equip_no.arr",equip_no.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"sysdate.arr",sysdate.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"proc.arr",proc.arr);

printf( "[%s][Line:%04d]Param[AR_CNT][%d]\n", __FUNCTION__,__LINE__ ,rec_cnt);
for(i=0;i<rec_cnt;i++){
printf( "[%s][Line:%04d]Param[CMD][%d][%s]\n", __FUNCTION__,__LINE__    ,i,rec_data00[i]);
printf( "[%s][Line:%04d]Param[DATA01][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data01[i]);
printf( "[%s][Line:%04d]Param[DATA02][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data02[i]);
printf( "[%s][Line:%04d]Param[DATA03][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data03[i]);
printf( "[%s][Line:%04d]Param[DATA04][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data04[i]);
printf( "[%s][Line:%04d]Param[DATA05][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data05[i]);
printf( "[%s][Line:%04d]Param[DATA06][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data06[i]);
printf( "[%s][Line:%04d]Param[DATA07][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data07[i]);
printf( "[%s][Line:%04d]Param[DATA08][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data08[i]);
printf( "[%s][Line:%04d]Param[DATA09][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data09[i]);
printf( "[%s][Line:%04d]Param[DATA10][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data10[i]);
printf( "[%s][Line:%04d]Param[DATA11][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data11[i]);
printf( "[%s][Line:%04d]Param[DATA12][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data12[i]);
printf( "[%s][Line:%04d]Param[DATA13][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data13[i]);
printf( "[%s][Line:%04d]Param[DATA14][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data14[i]);
printf( "[%s][Line:%04d]Param[DATA15][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data15[i]);
printf( "[%s][Line:%04d]Param[DATA16][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data16[i]);
printf( "[%s][Line:%04d]Param[DATA17][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data17[i]);
printf( "[%s][Line:%04d]Param[DATA18][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data18[i]);
printf( "[%s][Line:%04d]Param[DATA19][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data19[i]);
printf( "[%s][Line:%04d]Param[DATA20][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data20[i]);
printf( "[%s][Line:%04d]Param[DATA21][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data21[i]);
printf( "[%s][Line:%04d]Param[DATA22][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data22[i]);
printf( "[%s][Line:%04d]Param[DATA23][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data23[i]);
printf( "[%s][Line:%04d]Param[DATA24][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data24[i]);
}

#endif



    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
        
            ITC.GET_AR_DATA(
                 :equip_no
                ,:itc_serial_no
                ,:sysdate
                ,:proc
                ,:rec_cnt
                ,:rec_data00
                ,:rec_data01
                ,:rec_data02
                ,:rec_data03
                ,:rec_data04
                ,:rec_data05
                ,:rec_data06
                ,:rec_data07
                ,:rec_data08
                ,:rec_data09
                ,:rec_data10
                ,:rec_data11
                ,:rec_data12
                ,:rec_data13
                ,:rec_data14
                ,:rec_data15
                ,:rec_data16
                ,:rec_data17
                ,:rec_data18
                ,:rec_data19
                ,:rec_data20
                ,:rec_data21
                ,:rec_data22
                ,:rec_data23
                ,:rec_data24
            );

        END;
    END-EXEC;

#ifdef DEBUG
printf( "[%s][Line:%04d] end \n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"mailtype[%s] sql_error[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]error[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   rr_mail                                             
/*  機能    :   メール種別「再生診断」時のDB更新処理を行う        
/*  関数型  :   int                                                   
/*  呼出形式:   rr_mail()                                           
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2020.11                                                 */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int rr_mail(){
    #ifdef DEBUG
    printf( "[%s][Line:%04d]START\n", __FUNCTION__,__LINE__ );
    printf( "[%s][Line:%04d]Param[RR_CNT][%d]\n", __FUNCTION__,__LINE__ ,G_CMD_RR_REC[0].count);

    #endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];     /*  設備番号                */
        varchar     sysdate[TIME_MAX_LEN + 1];          /*  共通システム日時        */
        varchar     proc[PROC_NAME_MAX_LEN + 1];        /*  プロセス名              */
        int         i;
        int         rec_cnt;

        char  rec_data00[MAX_RR_REC][CONST_C20 + 1];          /*  RRに続く数値(0〜3)  */
        EXEC SQL VAR rec_data00 IS STRING;
        char  rec_data01[MAX_RR_REC][CONST_C20 + 1];          /*                      */
        EXEC SQL VAR rec_data01 IS STRING;
        char  rec_data02[MAX_RR_REC][CONST_C20 + 1];          /*                      */
        EXEC SQL VAR rec_data02 IS STRING;
        char  rec_data03 [MAX_RR_REC][CONST_C20 + 1];         /*                      */
        EXEC SQL VAR rec_data03 IS STRING;
        char  rec_data04 [MAX_RR_REC][CONST_C20 + 1];         /*                      */
        EXEC SQL VAR rec_data04 IS STRING;
        char  rec_data05 [MAX_RR_REC][CONST_C20 + 1];         /*                      */
        EXEC SQL VAR rec_data05 IS STRING;
        char  rec_data06 [MAX_RR_REC][CONST_C20 + 1];         /*                      */
        EXEC SQL VAR rec_data06 IS STRING;
        char  rec_data07 [MAX_RR_REC][CONST_C20 + 1];         /*                      */
        EXEC SQL VAR rec_data07 IS STRING;
        char  rec_data08 [MAX_RR_REC][CONST_C20 + 1];         /*                      */
        EXEC SQL VAR rec_data08 IS STRING;
        char  rec_data09 [MAX_RR_REC][CONST_C20 + 1];         /*                      */
        EXEC SQL VAR rec_data09 IS STRING;
        char  rec_data10 [MAX_RR_REC][CONST_C20 + 1];         /*                      */
        EXEC SQL VAR rec_data10 IS STRING;

    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

	/* 許容行数×値バイト数で初期化 */
    memset(rec_data00,0x00,(MAX_RR_REC)  * (CONST_C20 + 1));
    memset(rec_data01,0x00,(MAX_RR_REC)  * (CONST_C20 + 1));
    memset(rec_data02,0x00,(MAX_RR_REC)  * (CONST_C20 + 1));
    memset(rec_data03,0x00,(MAX_RR_REC)  * (CONST_C20 + 1));
    memset(rec_data04,0x00,(MAX_RR_REC)  * (CONST_C20 + 1));
    memset(rec_data05,0x00,(MAX_RR_REC)  * (CONST_C20 + 1));
    memset(rec_data06,0x00,(MAX_RR_REC)  * (CONST_C20 + 1));
    memset(rec_data07,0x00,(MAX_RR_REC)  * (CONST_C20 + 1));
    memset(rec_data08,0x00,(MAX_RR_REC)  * (CONST_C20 + 1));
    memset(rec_data09,0x00,(MAX_RR_REC)  * (CONST_C20 + 1));
    memset(rec_data10,0x00,(MAX_RR_REC)  * (CONST_C20 + 1));

    rec_cnt = G_CMD_RR_REC[0].count;
    for(i=0;i<rec_cnt;i++){
        CMD_HANYO06_PARAM *cur = &G_CMD_RR_REC[i];
        strcpy(rec_data00[i]  ,cur->value00);
        strcpy(rec_data01[i]  ,cur->value01);
        strcpy(rec_data02[i]  ,cur->value02);
        strcpy(rec_data03[i]  ,cur->value03);
        strcpy(rec_data04[i]  ,cur->value04);
        strcpy(rec_data05[i]  ,cur->value05);
        strcpy(rec_data06[i]  ,cur->value06);
        strcpy(rec_data07[i]  ,cur->value07);
        strcpy(rec_data08[i]  ,cur->value08);
        strcpy(rec_data09[i]  ,cur->value09);
        strcpy(rec_data10[i]  ,cur->value10);
    }
    
    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG

printf( "[%s][Line:%04d]プロシジャ処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"equip_no.arr",equip_no.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"sysdate.arr",sysdate.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"proc.arr",proc.arr);

printf( "[%s][Line:%04d]Param[RR_CNT][%d]\n", __FUNCTION__,__LINE__ ,rec_cnt);
for(i=0;i<rec_cnt;i++){
printf( "[%s][Line:%04d]Param[CMD][%d][%s]\n", __FUNCTION__,__LINE__    ,i,rec_data00[i]);
printf( "[%s][Line:%04d]Param[DATA01][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data01[i]);
printf( "[%s][Line:%04d]Param[DATA02][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data02[i]);
printf( "[%s][Line:%04d]Param[DATA03][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data03[i]);
printf( "[%s][Line:%04d]Param[DATA04][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data04[i]);
printf( "[%s][Line:%04d]Param[DATA05][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data05[i]);
printf( "[%s][Line:%04d]Param[DATA06][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data06[i]);
printf( "[%s][Line:%04d]Param[DATA07][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data07[i]);
printf( "[%s][Line:%04d]Param[DATA08][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data08[i]);
printf( "[%s][Line:%04d]Param[DATA09][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data09[i]);
printf( "[%s][Line:%04d]Param[DATA10][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data10[i]);
}

#endif



    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
        
            ITC.GET_RR_DATA(
                 :equip_no
                ,:sysdate
                ,:proc
                ,:rec_cnt
                ,:rec_data00
                ,:rec_data01
                ,:rec_data02
                ,:rec_data03
                ,:rec_data04
                ,:rec_data05
                ,:rec_data06
                ,:rec_data07
                ,:rec_data08
                ,:rec_data09
                ,:rec_data10
            );

        END;
    END-EXEC;

#ifdef DEBUG
printf( "[%s][Line:%04d] end \n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"mailtype[%s] sql_error[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]error[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   ssid_mail                                                   */
/*  機能    :   メール種別「SSID書込み」時のDB更新処理を行う                */
/*  関数型  :   int                                                         */
/*  呼出形式:   ssid_mail()                                                 */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2021.09.10                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int ssid_mail(){
	
	#ifdef DEBUG
	printf( "[%s][Line:%04d]「ssid_mail」START\n", __FUNCTION__,__LINE__ );
	#endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     itc_serial_no[SERIAL_NO_MAX_LEN + 1];  /*  ITCシリアルNO      */
        varchar     sysdate[TIME_MAX_LEN + 1];             /*  共通システム日時   */
        varchar     proc[PROC_NAME_MAX_LEN + 1];           /*  プロセス名         */
        varchar     cmd_all[BODY_LINE_MAX_LEN+1];          /*  コマンド行全文     */
        varchar     ssid_status[2 + 1];                    /*  SSID変更応答       */
        varchar     ssid_value[5 + 1];                     /*  SSID内部値         */

    EXEC SQL END DECLARE SECTION;

    strcpy( itc_serial_no.arr, G_CMD_COM_PARAM.itc_serial_no);
    itc_serial_no.len = strlen(G_CMD_COM_PARAM.itc_serial_no);

    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

    strcpy( cmd_all.arr, G_CMD_SSID_PARAM.cmd_all);
    cmd_all.len = strlen(G_CMD_SSID_PARAM.cmd_all);

    strcpy( ssid_status.arr, G_CMD_SSID_PARAM.ssid_status);
    ssid_status.len = strlen(G_CMD_SSID_PARAM.ssid_status);

    strcpy( ssid_value.arr, G_CMD_SSID_PARAM.ssid_value);
    ssid_value.len = strlen(G_CMD_SSID_PARAM.ssid_value);

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [GET_SSID] の処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,itc_serial_no.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,sysdate.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,proc.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,cmd_all.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,ssid_status.arr);
printf( "[%s][Line:%04d]Param[%s]\n", __FUNCTION__,__LINE__ ,ssid_value.arr);
#endif

    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
            ITC.GET_SSID(:itc_serial_no, :sysdate, :proc, :cmd_all, :ssid_status, :ssid_value);
        END;
    END-EXEC;   

#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ [GET_SSID] の処理終了\n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"メールタイプ[%s]処理異常[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]プロシジャ 異常終了[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   kl_mail                                                     */
/*  機能    :   メール種別「K-LOAD作業データ」時のDB更新処理を行う          */
/*  関数型  :   int                                                         */
/*  呼出形式:   kl_mail()                                                   */
/*                                                                          */
/*  戻り値  :   0：正常  0以外：異常                                        */
/*  引数    :   なし                                                        */
/* ------------------------------------------------------------------------ */
/*  作成    KSC     2021.09.30                                              */
/*  更新                                                                    */
/* ------------------------------------------------------------------------ */
int kl_mail(){
    #ifdef DEBUG
    printf( "[%s][Line:%04d]START\n", __FUNCTION__,__LINE__ );
    printf( "[%s][Line:%04d]Param[KL_CNT][%d]\n", __FUNCTION__,__LINE__ ,G_CMD_KL_REC[0].count);

    #endif

    char    errmsg[ORA_ERR_MSG_MAX_LEN + 1];
    int     msglen;
    int     buflen;

    EXEC SQL BEGIN DECLARE SECTION;
        varchar     equip_no[EQUIP_NO_MAX_LEN + 1];        /*  設備番号           */
        varchar     itc_serial_no[SERIAL_NO_MAX_LEN + 1];  /*  ITCシリアルNO      */
        varchar     sysdate[TIME_MAX_LEN + 1];             /*  共通システム日時   */
        varchar     proc[PROC_NAME_MAX_LEN + 1];           /*  プロセス名         */
        int         i;
        int         rec_cnt;

        char  rec_data00[MAX_KL_REC][CONST_C30 + 1];          /*  RRに続く数値(0〜3)  */
        EXEC SQL VAR rec_data00 IS STRING;
        char  rec_data01[MAX_KL_REC][CONST_C30 + 1];          /*                      */
        EXEC SQL VAR rec_data01 IS STRING;
        char  rec_data02[MAX_KL_REC][CONST_C30 + 1];          /*                      */
        EXEC SQL VAR rec_data02 IS STRING;
        char  rec_data03 [MAX_KL_REC][CONST_C30 + 1];         /*                      */
        EXEC SQL VAR rec_data03 IS STRING;
        char  rec_data04 [MAX_KL_REC][CONST_C30 + 1];         /*                      */
        EXEC SQL VAR rec_data04 IS STRING;
        char  rec_data05 [MAX_KL_REC][CONST_C30 + 1];         /*                      */
        EXEC SQL VAR rec_data05 IS STRING;

    EXEC SQL END DECLARE SECTION;

    strcpy( equip_no.arr, G_CMD_COM_PARAM.equip_no);
    equip_no.len = strlen(G_CMD_COM_PARAM.equip_no);

    strcpy( itc_serial_no.arr, G_CMD_COM_PARAM.itc_serial_no);
    itc_serial_no.len = strlen(G_CMD_COM_PARAM.itc_serial_no);
    
    strcpy( sysdate.arr, G_PROC_COM_PARAM.sysdate);
    sysdate.len = strlen(G_PROC_COM_PARAM.sysdate);

    strcpy( proc.arr, G_PROC_COM_PARAM.proc);
    proc.len = strlen(G_PROC_COM_PARAM.proc);

	/* 許容行数×値バイト数で初期化 */
    memset(rec_data00,0x00,(MAX_KL_REC)  * (CONST_C30 + 1));
    memset(rec_data01,0x00,(MAX_KL_REC)  * (CONST_C30 + 1));
    memset(rec_data02,0x00,(MAX_KL_REC)  * (CONST_C30 + 1));
    memset(rec_data03,0x00,(MAX_KL_REC)  * (CONST_C30 + 1));
    memset(rec_data04,0x00,(MAX_KL_REC)  * (CONST_C30 + 1));
    memset(rec_data05,0x00,(MAX_KL_REC)  * (CONST_C30 + 1));

    rec_cnt = G_CMD_KL_REC[0].count;
    for(i=0;i<rec_cnt;i++){
        CMD_C30X10_PARAM *cur = &G_CMD_KL_REC[i];
        strcpy(rec_data00[i]  ,cur->value00);
        strcpy(rec_data01[i]  ,cur->value01);
        strcpy(rec_data02[i]  ,cur->value02);
        strcpy(rec_data03[i]  ,cur->value03);
        strcpy(rec_data04[i]  ,cur->value04);
        strcpy(rec_data05[i]  ,cur->value05);
    }
    
    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

#ifdef DEBUG

printf( "[%s][Line:%04d]プロシジャ処理開始\n", __FUNCTION__,__LINE__ );
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"equip_no.arr",equip_no.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"itc_serial_no.arr",itc_serial_no.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"sysdate.arr",sysdate.arr);
printf( "[%s][Line:%04d]Param[%s][%s]\n", __FUNCTION__,__LINE__ ,"proc.arr",proc.arr);

printf( "[%s][Line:%04d]Param[KL_CNT][%d]\n", __FUNCTION__,__LINE__ ,rec_cnt);
for(i=0;i<rec_cnt;i++){
printf( "[%s][Line:%04d]Param[DATA00][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data00[i]);
printf( "[%s][Line:%04d]Param[DATA01][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data01[i]);
printf( "[%s][Line:%04d]Param[DATA02][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data02[i]);
printf( "[%s][Line:%04d]Param[DATA03][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data03[i]);
printf( "[%s][Line:%04d]Param[DATA04][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data04[i]);
printf( "[%s][Line:%04d]Param[DATA05][%d][%s]\n", __FUNCTION__,__LINE__ ,i,rec_data05[i]);
}

#endif



    /*  PL/SQL処理実行  */
    EXEC SQL EXECUTE
        BEGIN
        
            ITC.GET_KL_DATA(
                 :equip_no
                ,:itc_serial_no
                ,:sysdate
                ,:proc
                ,:rec_cnt
                ,:rec_data00
                ,:rec_data01
                ,:rec_data02
                ,:rec_data03
                ,:rec_data04
                ,:rec_data05
            );

        END;
    END-EXEC;

#ifdef DEBUG
printf( "[%s][Line:%04d] end \n", __FUNCTION__,__LINE__ );
#endif

    return( 0 );

sql_error:

    /*  エラーメッセージ取得  */
    buflen = ORA_ERR_MSG_MAX_LEN;
    sqlglm( errmsg, &buflen, &msglen );
    errmsg[msglen] = '\0';
    
    sprintf(G_CMD_COM_PARAM.err_msg,"mailtype[%s] sql_error[%s]",__FUNCTION__,errmsg);
    
#ifdef DEBUG
printf( "[%s][Line:%04d]error[%d:%s]\n", __FUNCTION__,__LINE__ ,sqlca.sqlcode,errmsg);
#endif

    /*  エラーコード判定結果取得  */
    return( chk_oraerr( sqlca.sqlcode ) );
}

/* ------------------------------------------------------------------------ */
/*  関数名  :   
/*  機能    :   
/*  呼出形式:   
/*              
/*  関数型  :   
/*  戻り値  :   
/* ------------------------------------------------------------------------ */
/*  作成    
/*  更新    
/* ------------------------------------------------------------------------ */
int mail_type_main(char *mail_type){
	int ret = 0;
    char    *p1,*p2;
	
	p1 = 0x00;
	p2 = 0x00;

#ifdef DEBUG
printf( "[%s][Line:%04d]mail_type_main[%s]\n", __FUNCTION__,__LINE__ ,mail_type);
printf( "[%s][Line:%04d]itc_version[%s]\n", __FUNCTION__,__LINE__ ,G_CMD_COM_PARAM.itc_version);
#endif
	
	int (*func)();
	
	if(0 == strcmp(mail_type,MTYP_ONLY_POS)){
		if(0 == strcmp(G_CMD_COM_PARAM.itc_version,"5") || 0 == strcmp(G_CMD_COM_PARAM.itc_version,"P")){	/* MINI用の場合 */
			/* 昼バッチとして処理する */
			G_CMD_COM_PARAM.mail_type_flg = 0;
			strcpy(G_CMD_COM_PARAM.mail_type_forlog,"L");
			func = &daytime;
		}else{												/* KDDI(MINI用)以外の場合 */
			/* 夜間バッチ（非稼動）として処理する */
			G_CMD_COM_PARAM.mail_type_flg = 0;
			strcpy(G_CMD_COM_PARAM.mail_type_forlog,"Y");
			func = &nighttime_non_ope;
		}
	}else if(0 == strcmp(mail_type,MTYP_BATCH_DAYTIME)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &daytime;
	}else if(0 == strcmp(mail_type,MTYP_BATCH_NIGHT_OPE)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &nighttime_ope;
	}else if(0 == strcmp(mail_type,MTYP_BATCH_NIGHT_NOPE)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &nighttime_non_ope;
	}else if(0 == strcmp(mail_type,MTYP_BATCH_NIGHT_EXP)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &nighttime_exception;
	}else if(0 == strcmp(mail_type,MTYP_SC)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &warn_invasion;
	}else if(0 == strcmp(mail_type,MTYP_SA)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &warn_out_area;
	}else if(0 == strcmp(mail_type,MTYP_BT)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &warn_battery_rm;
	}else if(0 == strcmp(mail_type,MTYP_RT)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &res_machine_state;
	}else if(0 == strcmp(mail_type,MTYP_AM)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &res_invasion_warn_time;
	}else if(0 == strcmp(mail_type,MTYP_CL)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &res_area_set;
	}else if(0 == strcmp(mail_type,MTYP_CM0)){
		G_CMD_COM_PARAM.mail_type_flg = 1;
		func = &res_com_stop;
	}else if(0 == strcmp(mail_type,MTYP_CM1)){
		G_CMD_COM_PARAM.mail_type_flg = 1;
		func = &res_com_restart;
	}else if(0 == strcmp(mail_type,MTYP_CT0)){
		G_CMD_COM_PARAM.mail_type_flg = 1;
		func = &res_com_test;
	}else if(0 == strcmp(mail_type,MTYP_CT1)){
		G_CMD_COM_PARAM.mail_type_flg = 1;
		func = &res_com_vol;
	}else if(0 == strcmp(mail_type,MTYP_HS)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &hourmeter_change;
	}else if(0 == strcmp(mail_type,MTYP_HE)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &engine_o_change;
	}else if(0 == strcmp(mail_type,MTYP_HF)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &fuel_f_change;
	}else if(0 == strcmp(mail_type,MTYP_HH)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &hydraulic_of_change;
	}else if(0 == strcmp(mail_type,MTYP_HL)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &hydraulic_o_change;
	}else if(0 == strcmp(mail_type,MTYP_SD)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &res_service_check;
	}else if(0 == strcmp(mail_type,MTYP_AH)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &res_fail_hst;
	}else if(0 == strcmp(mail_type,MTYP_XX)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &warn_self_diag;
	}else if(0 == strcmp(mail_type,MTYP_NG)){
		G_CMD_COM_PARAM.mail_type_flg = 9;
		func = &ng_mail;
	}else if(0 == strcmp(mail_type,MTYP_XXXX)){
		G_CMD_COM_PARAM.mail_type_flg = 9;
		func = &not_suport;
	}else if(0 == strcmp(mail_type,MTYP_RM)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &res_mecha_state;
	}else if(0 == strcmp(mail_type,MTYP_XX_V7)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &warn_self_diag;
	}else if(0 == strcmp(mail_type,MTYP_TD)){
		G_CMD_COM_PARAM.mail_type_flg = 1;
		func = &res_time_difference;
	}else if(0 == strcmp(mail_type,MTYP_BATCH_OPE)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &daily_ope;
	}else if(0 == strcmp(mail_type,MTYP_BATCH_NOPE)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &daily_non_ope;
	}else if(0 == strcmp(mail_type,MTYP_SS)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		p1 = G_CMD_SS_PARAM.value00;
		p2 = G_CMD_SS_PARAM.value01;
		func = &warn_model;
	}else if(0 == strcmp(mail_type,MTYP_SR)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		p1 = G_CMD_SR_PARAM.value00;
		p2 = G_CMD_SR_PARAM.value01;
		func = &warn_model;
	}else if(0 == strcmp(mail_type,MTYP_SG)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		p1 = G_CMD_SG_PARAM.value00;
		p2 = G_CMD_SG_PARAM.value01;
		func = &warn_model;
	}else if(0 == strcmp(mail_type,MTYP_SU)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		p1 = G_CMD_SU_PARAM.value00;
		p2 = G_CMD_SU_PARAM.value01;
/*		func = &warn_model;			*/
		func = &vcu_com_fail_alarm;
/*
	}else if(0 == strcmp(mail_type,MTYP_HD)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		p1 = G_CMD_HD_PARAM.value00;
		p2 = G_CMD_HD_PARAM.value01;
		func = &res_model;
	}else if(0 == strcmp(mail_type,MTYP_HQ)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		p1 = G_CMD_HQ_PARAM.value00;
		p2 = G_CMD_HQ_PARAM.value01;
		func = &res_model;
	}else if(0 == strcmp(mail_type,MTYP_HP)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &get_data_hp;
*/
	}else if(0 == strcmp(mail_type,MTYP_DG)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &res_remote_dl;
	}else if(0 == strcmp(mail_type,MTYP_HANYO)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &hanyo_mail;
	}else if(0 == strcmp(mail_type,MTYP_FDFR)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &fdfr_mail;
	}else if(0 == strcmp(mail_type,MTYP_HDHQHP)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &hdhqhp_mail;
	}else if(0 == strcmp(mail_type,MTYP_LKOK)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &lkok_mail;
	}else if(0 == strcmp(mail_type,MTYP_AE)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &ae_mail;
	}else if(0 == strcmp(mail_type,MTYP_AR)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &ar_mail;
	}else if(0 == strcmp(mail_type,MTYP_RR)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &rr_mail;
	}else if(0 == strcmp(mail_type,MTYP_SSID)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &ssid_mail;
	}else if(0 == strcmp(mail_type,MTYP_KL)){
		G_CMD_COM_PARAM.mail_type_flg = 0;
		func = &kl_mail;
	}else{
		/* メール解析　該当無し */
		return 1;
	}
	

	if(0 == G_CMD_COM_PARAM.mail_type_flg
	&& 0x00 == G_CMD_COM_PARAM.equip_no[0]){
		/* 通常系メールであるにもかかわらず、設備未搭載は処理なし */
		return 0;
	}
	
	ret = (*func)(p1,p2);

	return ret;
}
